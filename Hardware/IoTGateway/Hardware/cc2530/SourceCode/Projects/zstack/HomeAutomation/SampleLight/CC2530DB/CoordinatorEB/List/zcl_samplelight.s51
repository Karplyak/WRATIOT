///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               24/Jun/2016  19:20:59
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
//        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
//        xZDO_IEEEADDR_REQUEST -D MT_UART_DEFAULT_MAX_TX_BUFF=255 -D
//        xHAL_PA_LNA -lC
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
//        -lA
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes
//    List file          =  
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", ""
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??test::?relay`
        FUNCTION `??test::?relay`,0203H
        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleLight_EZModeCB::?relay`,0203H
        FUNCTION `??zclSampleLight_HandleKeys::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessIdentifyTimeChange::?re`,0203H
        FUNCTION `??zclSampleLight_ProcessZDOMsgs::?relay`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_bb8
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC test
        FUNCTION test,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zclSampleLight_DstAddr
        FUNCTION zclSampleLight_EZModeCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION zclSampleLight_HandleKeys,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSampleLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyQueryRspCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_NwkState
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclSampleLight_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        FUNCTION zclSampleLight_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 46, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
`??ZDO_ParseDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sprintf             SYMBOL "sprintf"
`??sprintf::?relay` SYMBOL "?relay", sprintf
strcat              SYMBOL "strcat"
`??strcat::?relay`  SYMBOL "?relay", strcat
strlen              SYMBOL "strlen"
`??strlen::?relay`  SYMBOL "?relay", strlen
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 50>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 50>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_RegisterEZMode  SYMBOL "zcl_RegisterEZMode"
`??zcl_RegisterEZMode::?relay` SYMBOL "?relay", zcl_RegisterEZMode
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
test                SYMBOL "test"
`??test::?relay`    SYMBOL "?relay", test
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseDeviceAnnce::?relay`
        FUNCTION `??ZDO_ParseDeviceAnnce::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sprintf::?relay`
        FUNCTION `??sprintf::?relay`,00H
        EXTERN `??strcat::?relay`
        FUNCTION `??strcat::?relay`,00H
        EXTERN `??strlen::?relay`
        FUNCTION `??strlen::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_RegisterEZMode::?relay`
        FUNCTION `??zcl_RegisterEZMode::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcat
        FUNCTION strcat,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_IdentifyCommissionState
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_RegisterEZMode
        FUNCTION zcl_RegisterEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "zcl.h"
//   77 #include "zcl_general.h"
//   78 #include "zcl_ha.h"
//   79 #include "zcl_ezmode.h"
//   80 #include "zcl_diagnostic.h"
//   81 
//   82 #include "zcl_samplelight.h"
//   83 
//   84 #include "onboard.h"
//   85 
//   86 /* HAL */
//   87 #include "hal_lcd.h"
//   88 #include "hal_led.h"
//   89 #include "hal_key.h"
//   90 
//   91 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   92       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   93 #include "zgp_translationtable.h"
//   94   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   95     #define ZGP_AUTO_TT
//   96   #endif
//   97 #endif
//   98 
//   99 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  100 #include "math.h"
//  101 #include "hal_timer.h"
//  102 #endif
//  103 
//  104 #include "NLMEDE.h"
//  105 
//  106 #include "DebugTrace.h"
//  107 #include "string.h"
//  108 #include "MT_UART.h"
//  109 #include "stdio.h"
//  110 
//  111 /*********************************************************************
//  112  * MACROS
//  113  */
//  114 
//  115 /*********************************************************************
//  116  * CONSTANTS
//  117  */
//  118 #if (defined HAL_BOARD_ZLIGHT)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       1000
//  123 #elif (defined HAL_PWM)
//  124 #define LEVEL_MAX                 0xFE
//  125 #define LEVEL_MIN                 0x0
//  126 #define GAMMA_VALUE               2
//  127 #define PWM_FULL_DUTY_CYCLE       100
//  128 #endif
//  129 
//  130 /*********************************************************************
//  131  * TYPEDEFS
//  132  */
//  133 
//  134 /*********************************************************************
//  135  * GLOBAL VARIABLES
//  136  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139 
//  140 void test(void);
//  141 
//  142 
//  143 /*********************************************************************
//  144  * GLOBAL FUNCTIONS
//  145  */
//  146 
//  147 /*********************************************************************
//  148  * LOCAL VARIABLES
//  149  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  151 
//  152 #ifdef ZCL_EZMODE
//  153 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  154 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  155 
//  156 
//  157 // register EZ-Mode with task information (timeout events, callback, etc...)

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  158 static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
zclSampleLight_RegisterEZModeData:
        DATA16
        DW zclSampleLight_TaskID
        DW 8
        DW 4
        DW zclSampleLightSeqNum
        DW `??zclSampleLight_EZModeCB::?relay`
//  159 {
//  160   &zclSampleLight_TaskID,
//  161   SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  162   SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  163   &zclSampleLightSeqNum,
//  164   zclSampleLight_EZModeCB
//  165 };
//  166 
//  167 #else
//  168 uint16 bindingInClusters[] =
//  169 {
//  170   ZCL_CLUSTER_ID_GEN_ON_OFF
//  171 #ifdef ZCL_LEVEL_CTRL
//  172   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  173 #endif
//  174 };
//  175 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  176 
//  177 #endif  // ZCL_EZMODE
//  178 
//  179 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  180 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  181 {
//  182   SAMPLELIGHT_ENDPOINT,
//  183   &zclSampleLight_TaskID,
//  184   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  185   (afNetworkLatencyReq_t)0            // No Network Latency req
//  186 };
//  187 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  188 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  189 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  190 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  191 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  192 devStates_t zclSampleLight_NwkState = DEV_INIT;
zclSampleLight_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleLight_NwkState>`
        REQUIRE __INIT_XDATA_I
//  193 
//  194 #if ZCL_LEVEL_CTRL
//  195 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  196 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  197 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  198 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  199 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  200 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  201 #endif
//  202 
//  203 /*********************************************************************
//  204  * LOCAL FUNCTIONS
//  205  */
//  206 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  207 static void zclSampleLight_BasicResetCB( void );
//  208 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  209 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  210 static void zclSampleLight_OnOffCB( uint8 cmd );
//  211 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  212 #ifdef ZCL_LEVEL_CTRL
//  213 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  214 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  215 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  216 static void zclSampleLight_LevelControlStopCB( void );
//  217 static void zclSampleLight_DefaultMove( void );
//  218 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  219 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  220 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  221 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  222 static void zclSampleLight_AdjustLightLevel( void );
//  223 #endif
//  224 
//  225 // app display functions
//  226 static void zclSampleLight_LcdDisplayUpdate( void );
//  227 #ifdef LCD_SUPPORTED
//  228 static void zclSampleLight_LcdDisplayMainMode( void );
//  229 static void zclSampleLight_LcdDisplayHelpMode( void );
//  230 #endif
//  231 static void zclSampleLight_DisplayLight( void );
//  232 
//  233 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  234 void zclSampleLight_UpdateLampLevel( uint8 level );
//  235 #endif
//  236 
//  237 // Functions to process ZCL Foundation incoming Command/Response messages
//  238 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  239 #ifdef ZCL_READ
//  240 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  241 #endif
//  242 #ifdef ZCL_WRITE
//  243 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  244 #endif
//  245 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  246 #ifdef ZCL_DISCOVER
//  247 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  248 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  249 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  250 #endif
//  251 
//  252 /*********************************************************************
//  253  * STATUS STRINGS
//  254  */
//  255 #ifdef LCD_SUPPORTED
//  256 const char sDeviceName[]   = "  Sample Light";
//  257 const char sClearLine[]    = " ";
//  258 const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
//  259 const char sSwEZMode[]     = "SW2: EZ-Mode";
//  260 char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
//  261 const char sLightOn[]      = "    LIGHT ON ";
//  262 const char sLightOff[]     = "    LIGHT OFF";
//  263  #if ZCL_LEVEL_CTRL
//  264  char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
//  265  #endif
//  266 #endif
//  267 
//  268 /*********************************************************************
//  269  * ZCL General Profile Callback table
//  270  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  271 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  272 {
//  273   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  274   zclSampleLight_IdentifyCB,              // Identify command
//  275 #ifdef ZCL_EZMODE
//  276   NULL,                                   // Identify EZ-Mode Invoke command
//  277   NULL,                                   // Identify Update Commission State command
//  278 #endif
//  279   NULL,                                   // Identify Trigger Effect command
//  280   zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
//  281   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  282   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  283   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  284   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  285 #ifdef ZCL_LEVEL_CTRL
//  286   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  287   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  288   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  289   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  290 #endif
//  291 #ifdef ZCL_GROUPS
//  292   NULL,                                   // Group Response commands
//  293 #endif
//  294 #ifdef ZCL_SCENES
//  295   NULL,                                  // Scene Store Request command
//  296   NULL,                                  // Scene Recall Request command
//  297   NULL,                                  // Scene Response command
//  298 #endif
//  299 #ifdef ZCL_ALARMS
//  300   NULL,                                  // Alarm (Response) commands
//  301 #endif
//  302 #ifdef SE_UK_EXT
//  303   NULL,                                  // Get Event Log command
//  304   NULL,                                  // Publish Event Log command
//  305 #endif
//  306   NULL,                                  // RSSI Location command
//  307   NULL                                   // RSSI Location Response command
//  308 };
//  309 
//  310 /*********************************************************************
//  311  * @fn          zclSampleLight_Init
//  312  *
//  313  * @brief       Initialization function for the zclGeneral layer.
//  314  *
//  315  * @param       none
//  316  *
//  317  * @return      none
//  318  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  319 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  320 {
        FUNCALL zclSampleLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_RegisterEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  321   zclSampleLight_TaskID = task_id;
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    @DPTR,A
//  322 
//  323   // Set destination address to indirect
//  324   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  325   zclSampleLight_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  326   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  327 
//  328   // This app is part of the Home Automation Profile
//  329   zclHA_Init( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclSampleLight_SimpleDesc & 0xff
        MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  330 
//  331   // Register the ZCL General Cluster Library callback functions
//  332   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  333 
//  334   // Register the application's attribute list
//  335   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleLight_Attrs & 0xff
        MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV     DPTR,#zclSampleLight_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  336 
//  337   // Register the Application to receive the unprocessed Foundation command/response messages
//  338   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  339 
//  340 #ifdef ZCL_DISCOVER
//  341   // Register the application's command list
//  342   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
//  343 #endif
//  344 
//  345   // Register for all key events - This app will handle all key events
//  346   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  347 
//  348   // Register for a test endpoint
//  349   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  350 
//  351 #ifdef ZCL_EZMODE
//  352   // Register EZ-Mode
//  353   zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
        ; Setup parameters for call to function zcl_RegisterEZMode
        MOV     R2,#zclSampleLight_RegisterEZModeData & 0xff
        MOV     R3,#(zclSampleLight_RegisterEZModeData >> 8) & 0xff
        LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
//  354 
//  355   // Register with the ZDO to receive Match Descriptor Responses
//  356   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  357 #endif
//  358   
//  359   ZDO_RegisterForZDOMsg(task_id, Device_annce );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x13
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  360   
//  361   ZDO_RegisterForZDOMsg(task_id, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  362   
//  363   ZDO_RegisterForZDOMsg(task_id, Active_EP_rsp ); 
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x5
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  364 
//  365 
//  366 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  367   HalTimer1Init( 0 );
//  368   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  369   halTimer1SetChannelDuty( RED_LED, 0 );
//  370   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  371   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  372 
//  373   // find if we are already on a network from NV_RESTORE
//  374   uint8 state;
//  375   NLME_GetRequest( nwkNwkState, 0, &state );
//  376 
//  377   if ( state < NWK_ENDDEVICE )
//  378   {
//  379     // Start EZMode on Start up to avoid button press
//  380     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  381   }
//  382 #if ZCL_LEVEL_CTRL
//  383   zclSampleLight_DefaultMove();
//  384 #endif
//  385 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  386 
//  387 #ifdef ZCL_DIAGNOSTIC
//  388   // Register the application's callback function to read/write attribute data.
//  389   // This is only required when the attribute data format is unknown to ZCL.
//  390   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  391 
//  392   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  393   {
//  394     // Here the user could start the timer to save Diagnostics to NV
//  395   }
//  396 #endif
//  397 
//  398 #ifdef LCD_SUPPORTED
//  399   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  400 #endif  // LCD_SUPPORTED
//  401 
//  402 #ifdef ZGP_AUTO_TT
//  403   zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
//  404 #endif
//  405 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  406 
//  407 /*********************************************************************
//  408  * @fn          zclSample_event_loop
//  409  *
//  410  * @brief       Event Loop Processor for zclGeneral.
//  411  *
//  412  * @param       none
//  413  *
//  414  * @return      none
//  415  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  416 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  417 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  418   afIncomingMSGPacket_t *MSGpkt;
//  419 
//  420   (void)task_id;  // Intentionally unreferenced parameter
//  421 
//  422   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleLight_event_loop_0
//  423   {
//  424     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  425     {
//  426       switch ( MSGpkt->hdr.event )
//  427       {
//  428 #ifdef ZCL_EZMODE
//  429         case ZDO_CB_MSG:
//  430           zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  431           break;
//  432 #endif
//  433         case ZCL_INCOMING_MSG:
//  434           // Incoming ZCL Foundation command/response messages
//  435           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  436           break;
//  437 
//  438         case KEY_CHANGE:
//  439           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  440           break;
//  441 
//  442         case ZDO_STATE_CHANGE:
//  443           zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  444 
//  445           // now on the network
//  446           if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  447                (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  448                (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  449           {
//  450             giLightScreenMode = LIGHT_MAINMODE;
//  451             zclSampleLight_LcdDisplayUpdate();
//  452 #ifdef ZCL_EZMODE
//  453             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  454 #endif // ZCL_EZMODE
//  455           }
//  456           break;
//  457 
//  458         default:
//  459           break;
//  460       }
//  461 
//  462       // Release the memory
//  463       osal_msg_deallocate( (uint8 *)MSGpkt );
//  464     }
//  465 
//  466     // return unprocessed events
//  467     return (events ^ SYS_EVENT_MSG);
//  468   }
//  469 
//  470   if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
//  471   {
//  472     if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_event_loop_2
//  473       zclSampleLight_IdentifyTime--;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  474     zclSampleLight_ProcessIdentifyTimeChange();
??zclSampleLight_event_loop_2:
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  475 
//  476     return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
//  477   }
??zclSampleLight_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_5:
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x2
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
??zclSampleLight_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleLight_event_loop_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleLight_event_loop_8
        ADD     A,#0x74
        JZ      ??zclSampleLight_event_loop_9
        ADD     A,#-0x11
        JZ      ??zclSampleLight_event_loop_4
        ADD     A,#-0x2
        JNZ     ??zclSampleLight_event_loop_6
        ; Setup parameters for call to function zclSampleLight_ProcessZDOMsgs
        LCALL   `??zclSampleLight_ProcessZDOMsgs::?relay`; Banked call to: zclSampleLight_ProcessZDOMsgs
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_8:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleLight_event_loop_10
        ADD     A,#-0x3
        JNZ     ??zclSampleLight_event_loop_11
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleLight_event_loop_11
        INC     R0
        SJMP    ??CrossCallReturnLabel_0
??zclSampleLight_event_loop_10:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??zclSampleLight_event_loop_12
??zclSampleLight_event_loop_13:
        INC     R0
??zclSampleLight_event_loop_12:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleLight_event_loop_13
??zclSampleLight_event_loop_11:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleLight_event_loop_6
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_9:
        ; Setup parameters for call to function zclSampleLight_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
        LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
??zclSampleLight_event_loop_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??zclSampleLight_event_loop_14
//  478 
//  479   if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
??zclSampleLight_event_loop_1:
        ANL     A,#0x10
        JZ      ??zclSampleLight_event_loop_15
//  480   {
//  481     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  482     zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  483 
//  484     return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??zclSampleLight_event_loop_3
//  485   }
//  486 
//  487 #ifdef ZCL_EZMODE
//  488 #if (defined HAL_BOARD_ZLIGHT)
//  489   // event to start EZMode on startup with a delay
//  490   if ( events & SAMPLELIGHT_START_EZMODE_EVT )
//  491   {
//  492     // Invoke EZ-Mode
//  493     zclEZMode_InvokeData_t ezModeData;
//  494 
//  495     // Invoke EZ-Mode
//  496     ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  497     if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  498          (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  499          (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  500     {
//  501       ezModeData.onNetwork = TRUE;      // node is already on the network
//  502     }
//  503     else
//  504     {
//  505       ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  506     }
//  507     ezModeData.initiator = FALSE;          // OnOffLight is a target
//  508     ezModeData.numActiveOutClusters = 0;
//  509     ezModeData.pActiveOutClusterIDs = NULL;
//  510     ezModeData.numActiveInClusters = 0;
//  511     ezModeData.pActiveOutClusterIDs = NULL;
//  512     zcl_InvokeEZMode( &ezModeData );
//  513 
//  514     return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
//  515   }
//  516 #endif // #if (defined HAL_BOARD_ZLIGHT)
//  517 
//  518   // going on to next state
//  519   if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
??zclSampleLight_event_loop_15:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zclSampleLight_event_loop_16
//  520   {
//  521     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  522     return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
        MOV     A,R6
        XRL     A,#0x8
        SJMP    ??zclSampleLight_event_loop_3
//  523   }
//  524 
//  525   // the overall EZMode timer expired, so we timed out
//  526   if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
??zclSampleLight_event_loop_16:
        MOV     A,R6
        ANL     A,#0x4
        MOV     R2,#0x0
        MOV     R3,#0x0
        JZ      ??zclSampleLight_event_loop_17
//  527   {
//  528     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R1,#0x63
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  529     return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x4
??zclSampleLight_event_loop_3:
        MOV     R2,A
        MOV     A,R7
??zclSampleLight_event_loop_14:
        MOV     R3,A
//  530   }
//  531 #endif // ZLC_EZMODE
//  532 
//  533 #ifdef ZCL_LEVEL_CTRL
//  534   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  535   {
//  536     zclSampleLight_AdjustLightLevel();
//  537     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  538   }
//  539 #endif
//  540 
//  541   // Discard unknown events
//  542   return 0;
??zclSampleLight_event_loop_17:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  543 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclSampleLight_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  544 
//  545 /*********************************************************************
//  546  * @fn      zclSampleLight_HandleKeys
//  547  *
//  548  * @brief   Handles all key events for this device.
//  549  *
//  550  * @param   shift - true if in shift/alt.
//  551  * @param   keys - bit field for key events. Valid entries:
//  552  *                 HAL_KEY_SW_5
//  553  *                 HAL_KEY_SW_4
//  554  *                 HAL_KEY_SW_2
//  555  *                 HAL_KEY_SW_1
//  556  *
//  557  * @return  none
//  558  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  559 static void zclSampleLight_HandleKeys( byte shift, byte keys )
zclSampleLight_HandleKeys:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleLight_HandleKeys
        CODE
//  560 {
        FUNCALL zclSampleLight_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  561   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclSampleLight_HandleKeys_0
//  562   {
//  563     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  564 
//  565     // toggle local light immediately
//  566     zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_1
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_2
??zclSampleLight_HandleKeys_1:
        MOV     A,#0x1
??zclSampleLight_HandleKeys_2:
        MOVX    @DPTR,A
//  567 #ifdef ZCL_LEVEL_CTRL
//  568     zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  569 #endif
//  570   }
//  571 
//  572   if ( keys & HAL_KEY_SW_2 )
??zclSampleLight_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclSampleLight_HandleKeys_3
//  573   {
//  574 #if (defined HAL_BOARD_ZLIGHT)
//  575 
//  576     zclSampleLight_BasicResetCB();
//  577 
//  578 #else
//  579 
//  580     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  581 
//  582 #ifdef ZCL_EZMODE
//  583     {
//  584       // Invoke EZ-Mode
//  585       zclEZMode_InvokeData_t ezModeData;
//  586 
//  587       // Invoke EZ-Mode
//  588       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x8
        MOVX    @DPTR,A
//  589       if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  590           (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  591             (zclSampleLight_NwkState == DEV_END_DEVICE) )
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleLight_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_HandleKeys_5
//  592       {
//  593         ezModeData.onNetwork = TRUE;      // node is already on the network
??zclSampleLight_HandleKeys_4:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zclSampleLight_HandleKeys_6
//  594       }
//  595       else
//  596       {
//  597         ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zclSampleLight_HandleKeys_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zclSampleLight_HandleKeys_6:
        MOVX    @DPTR,A
//  598       }
//  599       ezModeData.initiator = FALSE;          // OnOffLight is a target
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  600       ezModeData.numActiveOutClusters = 0;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  601       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  602       ezModeData.numActiveInClusters = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  603       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  604       zcl_InvokeEZMode( &ezModeData );
        ; Setup parameters for call to function zcl_InvokeEZMode
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  605     }
//  606 
//  607 #else // NOT EZ-Mode
//  608     {
//  609       zAddrType_t dstAddr;
//  610       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  611 
//  612       // Initiate an End Device Bind Request, this bind request will
//  613       // only use a cluster list that is important to binding.
//  614       dstAddr.addrMode = afAddr16Bit;
//  615       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  616       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  617                            SAMPLELIGHT_ENDPOINT,
//  618                            ZCL_HA_PROFILE_ID,
//  619                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  620                            0, NULL,   // No Outgoing clusters to bind
//  621                            TRUE );
//  622     }
//  623 #endif // ZCL_EZMODE
//  624 #endif // HAL_BOARD_ZLIGHT
//  625   }
//  626 
//  627   if ( keys & HAL_KEY_SW_3 )
??zclSampleLight_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclSampleLight_HandleKeys_7
//  628   {
//  629     NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
//  630                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  631   }
//  632 
//  633   if ( keys & HAL_KEY_SW_4 )
??zclSampleLight_HandleKeys_7:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zclSampleLight_HandleKeys_8
//  634   {
//  635     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  636 
//  637     if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
//  638           ( zclSampleLight_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleLight_HandleKeys_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleLight_HandleKeys_8
//  639     {
//  640       zAddrType_t tmpAddr;
//  641 
//  642       tmpAddr.addrMode = Addr16Bit;
??zclSampleLight_HandleKeys_9:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  643       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  644 
//  645       // toggle permit join
//  646       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_10
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_11
??zclSampleLight_HandleKeys_10:
        MOV     A,#-0x1
??zclSampleLight_HandleKeys_11:
        MOVX    @DPTR,A
//  647 
//  648       // Trust Center significance is always true
//  649       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  650     }
//  651   }
//  652 
//  653   // Shift F5 does a Basic Reset (factory defaults)
//  654   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zclSampleLight_HandleKeys_8:
        MOV     A,R6
        JZ      ??zclSampleLight_HandleKeys_12
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleLight_HandleKeys_13
//  655   {
//  656     zclSampleLight_BasicResetCB();
        ; Setup parameters for call to function zclSampleLight_BasicResetCB
        LCALL   `??zclSampleLight_BasicResetCB::?relay`; Banked call to: zclSampleLight_BasicResetCB
        SJMP    ??zclSampleLight_HandleKeys_13
//  657   }
//  658   else if ( keys & HAL_KEY_SW_5 )
??zclSampleLight_HandleKeys_12:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleLight_HandleKeys_13
//  659   {
//  660     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_14
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_15
??zclSampleLight_HandleKeys_14:
        MOV     A,#0x1
??zclSampleLight_HandleKeys_15:
        MOVX    @DPTR,A
//  661   }
//  662 
//  663   // update the display, including the light
//  664   zclSampleLight_LcdDisplayUpdate();
??zclSampleLight_HandleKeys_13:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  665 }
        MOV     A,#0x9
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock6
//  666 
//  667 /*********************************************************************
//  668  * @fn      zclSampleLight_LcdDisplayUpdate
//  669  *
//  670  * @brief   Called to update the LCD display.
//  671  *
//  672  * @param   none
//  673  *
//  674  * @return  none
//  675  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  676 void zclSampleLight_LcdDisplayUpdate( void )
zclSampleLight_LcdDisplayUpdate:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
        CODE
//  677 {
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  678 #ifdef LCD_SUPPORTED
//  679   if ( giLightScreenMode == LIGHT_HELPMODE )
//  680   {
//  681     zclSampleLight_LcdDisplayHelpMode();
//  682   }
//  683   else
//  684   {
//  685     zclSampleLight_LcdDisplayMainMode();
//  686   }
//  687 #endif
//  688 
//  689   zclSampleLight_DisplayLight();
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_LcdDisplayUpdate_0
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_LcdDisplayUpdate_1
??zclSampleLight_LcdDisplayUpdate_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_LcdDisplayUpdate_1:
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  690 }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock7
//  691 
//  692 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  693 /*********************************************************************
//  694  * @fn      zclSampleLight_UpdateLampLevel
//  695  *
//  696  * @brief   Update lamp level output with gamma compensation
//  697  *
//  698  * @param   level
//  699  *
//  700  * @return  none
//  701  */
//  702 void zclSampleLight_UpdateLampLevel( uint8 level )
//  703 
//  704 {
//  705   uint16 gammaCorrectedLevel;
//  706 
//  707   // gamma correct the level
//  708   gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
//  709 
//  710   halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
//  711 }
//  712 #endif
//  713 
//  714 /*********************************************************************
//  715  * @fn      zclSampleLight_DisplayLight
//  716  *
//  717  * @brief   Displays current state of light on LED and also on main display if supported.
//  718  *
//  719  * @param   none
//  720  *
//  721  * @return  none
//  722  */
//  723 static void zclSampleLight_DisplayLight( void )
//  724 {
//  725   // set the LED1 based on light (on or off)
//  726   if ( zclSampleLight_OnOff == LIGHT_ON )
//  727   {
//  728     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  729   }
//  730   else
//  731   {
//  732     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  733   }
//  734 
//  735 #ifdef LCD_SUPPORTED
//  736   if (giLightScreenMode == LIGHT_MAINMODE)
//  737   {
//  738 #ifdef ZCL_LEVEL_CTRL
//  739     // display current light level
//  740     if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  741          ( zclSampleLight_OnOff == LIGHT_OFF ) )
//  742     {
//  743       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  744     }
//  745     else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  746               ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
//  747                ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  748                  ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
//  749     {
//  750       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  751     }
//  752     else    // "    LEVEL ###"
//  753     {
//  754       zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
//  755       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  756     }
//  757 #else
//  758     if ( zclSampleLight_OnOff )
//  759     {
//  760       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  761     }
//  762     else
//  763     {
//  764       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  765     }
//  766 #endif // ZCL_LEVEL_CTRL
//  767   }
//  768 #endif // LCD_SUPPORTED
//  769 }
//  770 
//  771 #ifdef LCD_SUPPORTED
//  772 /*********************************************************************
//  773  * @fn      zclSampleLight_LcdDisplayMainMode
//  774  *
//  775  * @brief   Called to display the main screen on the LCD.
//  776  *
//  777  * @param   none
//  778  *
//  779  * @return  none
//  780  */
//  781 static void zclSampleLight_LcdDisplayMainMode( void )
//  782 {
//  783   // display line 1 to indicate NWK status
//  784   if ( zclSampleLight_NwkState == DEV_ZB_COORD )
//  785   {
//  786     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
//  787   }
//  788   else if ( zclSampleLight_NwkState == DEV_ROUTER )
//  789   {
//  790     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
//  791   }
//  792   else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
//  793   {
//  794     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
//  795   }
//  796 
//  797   // end of line 3 displays permit join status (*)
//  798   if ( gPermitDuration )
//  799   {
//  800     sSwHelp[15] = '*';
//  801   }
//  802   else
//  803   {
//  804     sSwHelp[15] = ' ';
//  805   }
//  806   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  807 }
//  808 
//  809 /*********************************************************************
//  810  * @fn      zclSampleLight_LcdDisplayHelpMode
//  811  *
//  812  * @brief   Called to display the SW options on the LCD.
//  813  *
//  814  * @param   none
//  815  *
//  816  * @return  none
//  817  */
//  818 static void zclSampleLight_LcdDisplayHelpMode( void )
//  819 {
//  820   HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
//  821   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
//  822   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  823 }
//  824 #endif  // LCD_SUPPORTED
//  825 
//  826 /*********************************************************************
//  827  * @fn      zclSampleLight_ProcessIdentifyTimeChange
//  828  *
//  829  * @brief   Called to process any change to the IdentifyTime attribute.
//  830  *
//  831  * @param   none
//  832  *
//  833  * @return  none
//  834  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  835 static void zclSampleLight_ProcessIdentifyTimeChange( void )
zclSampleLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
        CODE
//  836 {
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  837   if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
//  838   {
//  839     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  840     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
//  841   }
//  842   else
//  843   {
//  844 #ifdef ZCL_EZMODE
//  845     if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
??zclSampleLight_ProcessIdentifyTimeChange_0:
        MOV     DPTR,#zclSampleLight_IdentifyCommissionState
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclSampleLight_ProcessIdentifyTimeChange_2
//  846     {
//  847       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_3
//  848     }
//  849     else
//  850     {
//  851       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
??zclSampleLight_ProcessIdentifyTimeChange_2:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_ProcessIdentifyTimeChange_3:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  852     }
//  853 #endif
//  854 
//  855     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  856   }
//  857 }
??zclSampleLight_ProcessIdentifyTimeChange_1:
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock8
//  858 
//  859 /*********************************************************************
//  860  * @fn      zclSampleLight_BasicResetCB
//  861  *
//  862  * @brief   Callback from the ZCL General Cluster Library
//  863  *          to set all the Basic Cluster attributes to default values.
//  864  *
//  865  * @param   none
//  866  *
//  867  * @return  none
//  868  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  869 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  870 {
        FUNCALL zclSampleLight_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  871   NLME_LeaveReq_t leaveReq;
//  872   // Set every field to 0
//  873   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  874 
//  875   // This will enable the device to rejoin the network after reset.
//  876   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  877 
//  878   // Set the NV startup option to force a "new" join.
//  879   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  880 
//  881   // Leave the network, and reset afterwards
//  882   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zclSampleLight_BasicResetCB_0
//  883   {
//  884     // Couldn't send out leave; prepare to reset anyway
//  885     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  886   }
//  887 }
??zclSampleLight_BasicResetCB_0:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock9
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock10
//  888 
//  889 /*********************************************************************
//  890  * @fn      zclSampleLight_IdentifyCB
//  891  *
//  892  * @brief   Callback from the ZCL General Cluster Library when
//  893  *          it received an Identity Command for this application.
//  894  *
//  895  * @param   srcAddr - source address and endpoint of the response message
//  896  * @param   identifyTime - the number of seconds to identify yourself
//  897  *
//  898  * @return  none
//  899  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  900 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
zclSampleLight_IdentifyCB:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
        CODE
//  901 {
        FUNCALL zclSampleLight_IdentifyCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  902   zclSampleLight_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  903   zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  904 }
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock11
//  905 
//  906 /*********************************************************************
//  907  * @fn      zclSampleLight_IdentifyQueryRspCB
//  908  *
//  909  * @brief   Callback from the ZCL General Cluster Library when
//  910  *          it received an Identity Query Response Command for this application.
//  911  *
//  912  * @param   srcAddr - requestor's address
//  913  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  914  *
//  915  * @return  none
//  916  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  917 static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleLight_IdentifyQueryRspCB:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyQueryRspCB
        CODE
//  918 {
        FUNCALL zclSampleLight_IdentifyQueryRspCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_IdentifyQueryRspCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_IdentifyQueryRspCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 52
        MOV     A,#-0x34
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  919   
//  920   char msgPrint[50];
//  921   sprintf(msgPrint,"CMD{\"CMD\":\"IDENTIFYQ\",\"SRCADDR\":\"0x%x\"}\r\n",pRsp->srcAddr->addr.shortAddr);
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IDENTIFYQ\\"...">` & 0xff
        MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IDENTIFYQ\\"...">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
//  922   HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
        ; Setup parameters for call to function strlen
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  923   
//  924   //sprintf(msgPrint,"{\"0x%x\"}\r\n",pRsp->srcAddr->addr.shortAddr);
//  925   //HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
//  926   
//  927   (void)pRsp;
//  928 #ifdef ZCL_EZMODE
//  929   {
//  930     zclEZMode_ActionData_t data;
//  931     data.pIdentifyQueryRsp = pRsp;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  932     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x4
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  933   }
//  934 #endif
//  935 }
        MOV     A,#0x34
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock12
//  936 
//  937 /*********************************************************************
//  938  * @fn      zclSampleLight_OnOffCB
//  939  *
//  940  * @brief   Callback from the ZCL General Cluster Library when
//  941  *          it received an On/Off Command for this application.
//  942  *
//  943  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  944  *
//  945  * @return  none
//  946  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  947 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  948 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  949   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  950 
//  951   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     DPTR,#zclSampleLight_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  952 
//  953 
//  954   // Turn on the light
//  955   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zclSampleLight_OnOffCB_0
//  956   {
//  957     zclSampleLight_OnOff = LIGHT_ON;
//  958   }
//  959   // Turn off the light
//  960   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclSampleLight_OnOffCB_1
//  961   {
//  962     zclSampleLight_OnOff = LIGHT_OFF;
//  963   }
//  964   // Toggle the light
//  965   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_2
//  966   {
//  967     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_OnOffCB_1
//  968     {
//  969       zclSampleLight_OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_0:
        MOV     DPTR,#zclSampleLight_OnOff
        MOV     A,#0x1
        SJMP    ??zclSampleLight_OnOffCB_3
//  970     }
//  971     else
//  972     {
//  973       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_1:
        MOV     DPTR,#zclSampleLight_OnOff
        CLR     A
??zclSampleLight_OnOffCB_3:
        MOVX    @DPTR,A
//  974     }
//  975   }
//  976 
//  977 #if ZCL_LEVEL_CTRL
//  978   zclSampleLight_DefaultMove( );
//  979 #endif
//  980 
//  981   // update the display
//  982   zclSampleLight_LcdDisplayUpdate( );
??zclSampleLight_OnOffCB_2:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  983 }
        LJMP    ??Subroutine19_0 & 0xFFFF
          CFI EndBlock cfiBlock13
//  984 
//  985 #ifdef ZCL_LEVEL_CTRL
//  986 /*********************************************************************
//  987  * @fn      zclSampleLight_TimeRateHelper
//  988  *
//  989  * @brief   Calculate time based on rate, and startup level state machine
//  990  *
//  991  * @param   newLevel - new level for current level
//  992  *
//  993  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  994  */
//  995 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
//  996 {
//  997   uint32 diff;
//  998   uint32 newLevel32;
//  999 
// 1000   // remember current and new level
// 1001   zclSampleLight_NewLevel = newLevel;
// 1002   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
// 1003 
// 1004   // calculate diff
// 1005   newLevel32 = (uint32)1000 * newLevel;
// 1006   if ( zclSampleLight_LevelCurrentLevel > newLevel )
// 1007   {
// 1008     diff = zclSampleLight_CurrentLevel32 - newLevel32;
// 1009     zclSampleLight_NewLevelUp = FALSE;  // moving down
// 1010   }
// 1011   else
// 1012   {
// 1013     diff = newLevel32 - zclSampleLight_CurrentLevel32;
// 1014     zclSampleLight_NewLevelUp = TRUE;   // moving up
// 1015   }
// 1016 
// 1017   return ( diff );
// 1018 }
// 1019 
// 1020 /*********************************************************************
// 1021  * @fn      zclSampleLight_MoveBasedOnRate
// 1022  *
// 1023  * @brief   Calculate time based on rate, and startup level state machine
// 1024  *
// 1025  * @param   newLevel - new level for current level
// 1026  * @param   rate16   - fixed point rate (e.g. 16.123)
// 1027  *
// 1028  * @return  none
// 1029  */
// 1030 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
// 1031 {
// 1032   uint32 diff;
// 1033 
// 1034   // determine how much time (in 10ths of seconds) based on the difference and rate
// 1035   zclSampleLight_Rate32 = rate;
// 1036   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1037   zclSampleLight_LevelRemainingTime = diff / rate;
// 1038   if ( !zclSampleLight_LevelRemainingTime )
// 1039   {
// 1040     zclSampleLight_LevelRemainingTime = 1;
// 1041   }
// 1042 
// 1043   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1044 }
// 1045 
// 1046 /*********************************************************************
// 1047  * @fn      zclSampleLight_MoveBasedOnTime
// 1048  *
// 1049  * @brief   Calculate rate based on time, and startup level state machine
// 1050  *
// 1051  * @param   newLevel  - new level for current level
// 1052  * @param   time      - in 10ths of seconds
// 1053  *
// 1054  * @return  none
// 1055  */
// 1056 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
// 1057 {
// 1058   uint16 diff;
// 1059 
// 1060   // determine rate (in units) based on difference and time
// 1061   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1062   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
// 1063   zclSampleLight_Rate32 = diff / time;
// 1064 
// 1065   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1066 }
// 1067 
// 1068 /*********************************************************************
// 1069  * @fn      zclSampleLight_GetTime
// 1070  *
// 1071  * @brief   Determine amount of time that MoveXXX will take to complete.
// 1072  *
// 1073  * @param   level = new level to move to
// 1074  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
// 1075  *
// 1076  * @return  none
// 1077  */
// 1078 static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
// 1079 {
// 1080   // there is a hiearchy of the amount of time to use for transistioning
// 1081   // check each one in turn. If none of defaults are set, then use fastest
// 1082   // time possible.
// 1083   if ( time == 0xFFFF )
// 1084   {
// 1085     // use On or Off Transition Time if set (not 0xffff)
// 1086     if ( zclSampleLight_OnOff == LIGHT_ON )
// 1087     {
// 1088       time = zclSampleLight_LevelOffTransitionTime;
// 1089     }
// 1090     else
// 1091     {
// 1092       time = zclSampleLight_LevelOnTransitionTime;
// 1093     }
// 1094 
// 1095     // else use OnOffTransitionTime if set (not 0xffff)
// 1096     if ( time == 0xFFFF )
// 1097     {
// 1098       time = zclSampleLight_LevelOnOffTransitionTime;
// 1099     }
// 1100 
// 1101     // else as fast as possible
// 1102     if ( time == 0xFFFF )
// 1103     {
// 1104       time = 1;
// 1105     }
// 1106   }
// 1107 
// 1108   if ( !time )
// 1109   {
// 1110     time = 1; // as fast as possible
// 1111   }
// 1112 
// 1113   return ( time );
// 1114 }
// 1115 
// 1116 /*********************************************************************
// 1117  * @fn      zclSampleLight_DefaultMove
// 1118  *
// 1119  * @brief   We were turned on/off. Use default time to move to on or off.
// 1120  *
// 1121  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
// 1122  *
// 1123  * @return  none
// 1124  */
// 1125 static void zclSampleLight_DefaultMove( void )
// 1126 {
// 1127   uint8  newLevel;
// 1128   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
// 1129   uint16 time;
// 1130 
// 1131   // if moving to on position, move to on level
// 1132   if ( zclSampleLight_OnOff )
// 1133   {
// 1134     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1135     {
// 1136       // The last Level (before going OFF) should be used)
// 1137       newLevel = zclSampleLight_LevelLastLevel;
// 1138     }
// 1139     else
// 1140     {
// 1141       newLevel = zclSampleLight_LevelOnLevel;
// 1142     }
// 1143 
// 1144     time = zclSampleLight_LevelOnTransitionTime;
// 1145   }
// 1146   else
// 1147   {
// 1148     newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1149 
// 1150     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1151     {
// 1152       // Save the current Level before going OFF to use it when the light turns ON
// 1153       // it should be back to this level
// 1154       zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
// 1155     }
// 1156 
// 1157     time = zclSampleLight_LevelOffTransitionTime;
// 1158   }
// 1159 
// 1160   // else use OnOffTransitionTime if set (not 0xffff)
// 1161   if ( time == 0xFFFF )
// 1162   {
// 1163     time = zclSampleLight_LevelOnOffTransitionTime;
// 1164   }
// 1165 
// 1166   // else as fast as possible
// 1167   if ( time == 0xFFFF )
// 1168   {
// 1169     time = 1;
// 1170   }
// 1171 
// 1172   // calculate rate based on time (int 10ths) for full transition (1-254)
// 1173   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
// 1174 
// 1175   // start up state machine.
// 1176   zclSampleLight_WithOnOff = TRUE;
// 1177   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1178 }
// 1179 
// 1180 /*********************************************************************
// 1181  * @fn      zclSampleLight_AdjustLightLevel
// 1182  *
// 1183  * @brief   Called each 10th of a second while state machine running
// 1184  *
// 1185  * @param   none
// 1186  *
// 1187  * @return  none
// 1188  */
// 1189 static void zclSampleLight_AdjustLightLevel( void )
// 1190 {
// 1191   // one tick (10th of a second) less
// 1192   if ( zclSampleLight_LevelRemainingTime )
// 1193   {
// 1194     --zclSampleLight_LevelRemainingTime;
// 1195   }
// 1196 
// 1197   // no time left, done
// 1198   if ( zclSampleLight_LevelRemainingTime == 0)
// 1199   {
// 1200     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
// 1201   }
// 1202 
// 1203   // still time left, keep increment/decrementing
// 1204   else
// 1205   {
// 1206     if ( zclSampleLight_NewLevelUp )
// 1207     {
// 1208       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
// 1209     }
// 1210     else
// 1211     {
// 1212       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
// 1213     }
// 1214     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
// 1215   }
// 1216 
// 1217 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1218   zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
// 1219 #endif
// 1220 
// 1221   // also affect on/off
// 1222   if ( zclSampleLight_WithOnOff )
// 1223   {
// 1224     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
// 1225     {
// 1226       zclSampleLight_OnOff = LIGHT_ON;
// 1227 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1228       ENABLE_LAMP;
// 1229 #endif
// 1230     }
// 1231     else
// 1232     {
// 1233       zclSampleLight_OnOff = LIGHT_OFF;
// 1234 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1235       DISABLE_LAMP;
// 1236 #endif
// 1237     }
// 1238   }
// 1239 
// 1240   // display light level as we go
// 1241   zclSampleLight_DisplayLight( );
// 1242 
// 1243   // keep ticking away
// 1244   if ( zclSampleLight_LevelRemainingTime )
// 1245   {
// 1246     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1247   }
// 1248 }
// 1249 
// 1250 /*********************************************************************
// 1251  * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1252  *
// 1253  * @brief   Callback from the ZCL General Cluster Library when
// 1254  *          it received a LevelControlMoveToLevel Command for this application.
// 1255  *
// 1256  * @param   pCmd - ZigBee command parameters
// 1257  *
// 1258  * @return  none
// 1259  */
// 1260 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
// 1261 {
// 1262   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1263   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
// 1264 }
// 1265 
// 1266 /*********************************************************************
// 1267  * @fn      zclSampleLight_LevelControlMoveCB
// 1268  *
// 1269  * @brief   Callback from the ZCL General Cluster Library when
// 1270  *          it received a LevelControlMove Command for this application.
// 1271  *
// 1272  * @param   pCmd - ZigBee command parameters
// 1273  *
// 1274  * @return  none
// 1275  */
// 1276 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
// 1277 {
// 1278   uint8 newLevel;
// 1279   uint32 rate;
// 1280 
// 1281   // convert rate from units per second to units per tick (10ths of seconds)
// 1282   // and move at that right up or down
// 1283   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1284 
// 1285   if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1286   {
// 1287     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1288   }
// 1289   else
// 1290   {
// 1291     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1292   }
// 1293 
// 1294   rate = (uint32)100 * pCmd->rate;
// 1295   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1296 }
// 1297 
// 1298 /*********************************************************************
// 1299  * @fn      zclSampleLight_LevelControlStepCB
// 1300  *
// 1301  * @brief   Callback from the ZCL General Cluster Library when
// 1302  *          it received an On/Off Command for this application.
// 1303  *
// 1304  * @param   pCmd - ZigBee command parameters
// 1305  *
// 1306  * @return  none
// 1307  */
// 1308 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1309 {
// 1310   uint8 newLevel;
// 1311 
// 1312   // determine new level, but don't exceed boundaries
// 1313   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1314   {
// 1315     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1316     {
// 1317       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1318     }
// 1319     else
// 1320     {
// 1321       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1322     }
// 1323   }
// 1324   else
// 1325   {
// 1326     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1327     {
// 1328       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1329     }
// 1330     else
// 1331     {
// 1332       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1333     }
// 1334   }
// 1335 
// 1336   // move to the new level
// 1337   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1338   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1339 }
// 1340 
// 1341 /*********************************************************************
// 1342  * @fn      zclSampleLight_LevelControlStopCB
// 1343  *
// 1344  * @brief   Callback from the ZCL General Cluster Library when
// 1345  *          it received an Level Control Stop Command for this application.
// 1346  *
// 1347  * @param   pCmd - ZigBee command parameters
// 1348  *
// 1349  * @return  none
// 1350  */
// 1351 static void zclSampleLight_LevelControlStopCB( void )
// 1352 {
// 1353   // stop immediately
// 1354   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1355   zclSampleLight_LevelRemainingTime = 0;
// 1356 }
// 1357 #endif
// 1358 
// 1359 /******************************************************************************
// 1360  *
// 1361  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1362  *
// 1363  *****************************************************************************/
// 1364 
// 1365 /*********************************************************************
// 1366  * @fn      zclSampleLight_ProcessIncomingMsg
// 1367  *
// 1368  * @brief   Process ZCL Foundation incoming message
// 1369  *
// 1370  * @param   pInMsg - pointer to the received message
// 1371  *
// 1372  * @return  none
// 1373  */
// 1374 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1375 {
// 1376   switch ( pInMsg->zclHdr.commandID )
// 1377   {
// 1378 #ifdef ZCL_READ
// 1379     case ZCL_CMD_READ_RSP:
// 1380       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1381       break;
// 1382 #endif
// 1383 #ifdef ZCL_WRITE
// 1384     case ZCL_CMD_WRITE_RSP:
// 1385       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1386       break;
// 1387 #endif
// 1388 #ifdef ZCL_REPORT
// 1389     // Attribute Reporting implementation should be added here
// 1390     case ZCL_CMD_CONFIG_REPORT:
// 1391       // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
// 1392       break;
// 1393 
// 1394     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1395       // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
// 1396       break;
// 1397 
// 1398     case ZCL_CMD_READ_REPORT_CFG:
// 1399       // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
// 1400       break;
// 1401 
// 1402     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1403       // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
// 1404       break;
// 1405 
// 1406     case ZCL_CMD_REPORT:
// 1407       // zclSampleLight_ProcessInReportCmd( pInMsg );
// 1408       break;
// 1409 #endif
// 1410     case ZCL_CMD_DEFAULT_RSP:
// 1411       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1412       break;
// 1413 #ifdef ZCL_DISCOVER
// 1414     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1415       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1416       break;
// 1417 
// 1418     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1419       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1420       break;
// 1421 
// 1422     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1423       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1424       break;
// 1425 
// 1426     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1427       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1428       break;
// 1429 #endif
// 1430     default:
// 1431       break;
// 1432   }
// 1433 
// 1434   if ( pInMsg->attrCmd )
// 1435     osal_mem_free( pInMsg->attrCmd );
// 1436 }
// 1437 
// 1438 #ifdef ZCL_READ
// 1439 /*********************************************************************
// 1440  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1441  *
// 1442  * @brief   Process the "Profile" Read Response Command
// 1443  *
// 1444  * @param   pInMsg - incoming message to process
// 1445  *
// 1446  * @return  none
// 1447  */
// 1448 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1449 {
// 1450   zclReadRspCmd_t *readRspCmd;
// 1451   uint8 i;
// 1452 
// 1453   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1454   for (i = 0; i < readRspCmd->numAttr; i++)
// 1455   {
// 1456     // Notify the originator of the results of the original read attributes
// 1457     // attempt and, for each successfull request, the value of the requested
// 1458     // attribute
// 1459   }
// 1460 
// 1461   return ( TRUE );
// 1462 }
// 1463 #endif // ZCL_READ
// 1464 
// 1465 #ifdef ZCL_WRITE
// 1466 /*********************************************************************
// 1467  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1468  *
// 1469  * @brief   Process the "Profile" Write Response Command
// 1470  *
// 1471  * @param   pInMsg - incoming message to process
// 1472  *
// 1473  * @return  none
// 1474  */
// 1475 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1476 {
// 1477   zclWriteRspCmd_t *writeRspCmd;
// 1478   uint8 i;
// 1479 
// 1480   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1481   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1482   {
// 1483     // Notify the device of the results of the its original write attributes
// 1484     // command.
// 1485   }
// 1486 
// 1487   return ( TRUE );
// 1488 }
// 1489 #endif // ZCL_WRITE
// 1490 
// 1491 /*********************************************************************
// 1492  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1493  *
// 1494  * @brief   Process the "Profile" Default Response Command
// 1495  *
// 1496  * @param   pInMsg - incoming message to process
// 1497  *
// 1498  * @return  none
// 1499  */
// 1500 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1501 {
// 1502   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1503 
// 1504   // Device is notified of the Default Response command.
// 1505   (void)pInMsg;
// 1506 
// 1507   return ( TRUE );
// 1508 }
// 1509 
// 1510 #ifdef ZCL_DISCOVER
// 1511 /*********************************************************************
// 1512  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1513  *
// 1514  * @brief   Process the Discover Commands Response Command
// 1515  *
// 1516  * @param   pInMsg - incoming message to process
// 1517  *
// 1518  * @return  none
// 1519  */
// 1520 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1521 {
// 1522   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1523   uint8 i;
// 1524 
// 1525   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1526   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1527   {
// 1528     // Device is notified of the result of its attribute discovery command.
// 1529   }
// 1530 
// 1531   return ( TRUE );
// 1532 }
// 1533 
// 1534 /*********************************************************************
// 1535  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1536  *
// 1537  * @brief   Process the "Profile" Discover Attributes Response Command
// 1538  *
// 1539  * @param   pInMsg - incoming message to process
// 1540  *
// 1541  * @return  none
// 1542  */
// 1543 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1544 {
// 1545   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1546   uint8 i;
// 1547 
// 1548   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1549   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1550   {
// 1551     // Device is notified of the result of its attribute discovery command.
// 1552   }
// 1553 
// 1554   return ( TRUE );
// 1555 }
// 1556 
// 1557 /*********************************************************************
// 1558  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1559  *
// 1560  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1561  *
// 1562  * @param   pInMsg - incoming message to process
// 1563  *
// 1564  * @return  none
// 1565  */
// 1566 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1567 {
// 1568   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1569   uint8 i;
// 1570 
// 1571   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1572   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1573   {
// 1574     // Device is notified of the result of its attribute discovery command.
// 1575   }
// 1576 
// 1577   return ( TRUE );
// 1578 }
// 1579 #endif // ZCL_DISCOVER
// 1580 
// 1581 #if ZCL_EZMODE
// 1582 /*********************************************************************
// 1583  * @fn      zclSampleLight_ProcessZDOMsgs
// 1584  *
// 1585  * @brief   Called when this node receives a ZDO/ZDP response.
// 1586  *
// 1587  * @param   none
// 1588  *
// 1589  * @return  status
// 1590  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1591 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
zclSampleLight_ProcessZDOMsgs:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
        CODE
// 1592 {
        FUNCALL zclSampleLight_ProcessZDOMsgs, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1593   zclEZMode_ActionData_t data;
// 1594   
// 1595   //char msgPrint[200];
// 1596   char *msgPrint = osal_mem_alloc(255);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#-0x1
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1597   
// 1598   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1599   ZDO_DeviceAnnce_t *pDeviceAnnce;
// 1600   //for ieee req
// 1601   ZDO_NwkIEEEAddrResp_t *pNwkIEEEAddrResp;
// 1602   ZDO_ActiveEndpointRsp_t *pActiveEndpointRsp;
// 1603 
// 1604   // Let EZ-Mode know of the Simple Descriptor Response
// 1605   if ( pMsg->clusterID == Match_Desc_rsp )
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,#0x6
        XRL     A,R0
        JNZ     ??zclSampleLight_ProcessZDOMsgs_0
        MOV     A,#-0x80
        XRL     A,R1
??zclSampleLight_ProcessZDOMsgs_0:
        JNZ     ??zclSampleLight_ProcessZDOMsgs_1
// 1606   {
// 1607     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1608     data.pMatchDescRsp = pMatchDescRsp;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1609     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x5
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
// 1610     osal_mem_free( pMatchDescRsp );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
// 1611   }
// 1612   else if(pMsg->clusterID == Device_annce){
??zclSampleLight_ProcessZDOMsgs_1:
        MOV     A,#0x13
        XRL     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??zclSampleLight_ProcessZDOMsgs_3 & 0xFFFF
// 1613     
// 1614     pDeviceAnnce = osal_mem_alloc(sizeof(ZDO_DeviceAnnce_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
// 1615     ZDO_ParseDeviceAnnce(pMsg,pDeviceAnnce);
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
// 1616     
// 1617     sprintf(msgPrint, "CMD{\"CMD\":\"ANNCE\",\"IEEEADDR\":\"%x:%x:%x:%x:%x:%x:%x:%x\",\"SHORTADDR\":\"0x%x\",\"CAP\":\"0x%x\"}\r\n",pDeviceAnnce->extAddr[7],pDeviceAnnce->extAddr[6],pDeviceAnnce->extAddr[5],pDeviceAnnce->extAddr[4],pDeviceAnnce->extAddr[3],pDeviceAnnce->extAddr[2],pDeviceAnnce->extAddr[1],pDeviceAnnce->extAddr[0], pDeviceAnnce->nwkAddr,pDeviceAnnce->capabilities);
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">` & 0xff
        MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 1618     HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
        ; Setup parameters for call to function strlen
        LJMP    ??zclSampleLight_ProcessZDOMsgs_4 & 0xFFFF
// 1619     //char sam[10] = "CMD ANNCE IEEE:\n";
// 1620     
// 1621     //HalUARTWrite(MT_UART_DEFAULT_PORT, sam, strlen(sam));
// 1622     //uint8 *chldExtAddr;
// 1623     //chldExtAddr = osal_mem_alloc(8);
// 1624     //ZDO_DeviceAnnce_t msg;
// 1625     //ZDO_ParseDeviceAnnce( pMsg, &msg);
// 1626     //memcpy(&chldExtAddr, msg.extAddr, Z_EXTADDR_LEN);
// 1627     //debug_str("Device_annce");
// 1628   }
// 1629   else if(pMsg->clusterID == IEEE_addr_rsp){
??zclSampleLight_ProcessZDOMsgs_3:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zclSampleLight_ProcessZDOMsgs_5
        MOV     A,#-0x80
        XRL     A,R1
??zclSampleLight_ProcessZDOMsgs_5:
        JZ      $+5
        LJMP    ??zclSampleLight_ProcessZDOMsgs_6 & 0xFFFF
// 1630     
// 1631     pNwkIEEEAddrResp = ZDO_ParseAddrRsp( pMsg );
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1632     if( pNwkIEEEAddrResp->status == ZDO_SUCCESS ){
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
// 1633       
// 1634       if( pNwkIEEEAddrResp->numAssocDevs == 0 ){
        INC     DPTR
        MOV     ?V6,DPL
        MOV     ?V7,DPH
        MOV     A,R2
        ADD     A,#0xb
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        MOV     DPL,?V2
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_ProcessZDOMsgs_7
// 1635         
// 1636         sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"STATUS\":0,\"SHORTADDR\":\"0x%x\",\"Type\":0,\"IEEEADDR\":\"%x:%x:%x:%x:%x:%x:%x:%x\"}\r\n", pNwkIEEEAddrResp->nwkAddr, pNwkIEEEAddrResp->extAddr[7], pNwkIEEEAddrResp->extAddr[6], pNwkIEEEAddrResp->extAddr[5], pNwkIEEEAddrResp->extAddr[4], pNwkIEEEAddrResp->extAddr[3], pNwkIEEEAddrResp->extAddr[2], pNwkIEEEAddrResp->extAddr[1], pNwkIEEEAddrResp->extAddr[0]);
        ; Setup parameters for call to function sprintf
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     DPL,?V6
        MOV     DPH,?V7
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">` & 0xff
        MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x12
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 1637         HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
        ; Setup parameters for call to function strlen
        LJMP    ??zclSampleLight_ProcessZDOMsgs_4 & 0xFFFF
// 1638         
// 1639       }
// 1640       else if( pNwkIEEEAddrResp->numAssocDevs > 0 ){
// 1641         
// 1642         
// 1643         
// 1644         for(uint8 i = 0 ; i < pNwkIEEEAddrResp->numAssocDevs ; i++){
??zclSampleLight_ProcessZDOMsgs_7:
        MOV     ?V4,#0x0
??zclSampleLight_ProcessZDOMsgs_8:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V4
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
// 1645           
// 1646           //sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"STATUS\":0,\"SRTADDR\":\"0x%x\",\"Type\":1,\"STID\":\"0x%x\",\"NumAsso\":\"0x%x\",\"TB\":\"0x%x\"}\r\n", pNwkIEEEAddrResp->nwkAddr, pNwkIEEEAddrResp->startIndex, pNwkIEEEAddrResp->numAssocDevs, pNwkIEEEAddrResp->devList[i]);
// 1647           sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"SRTADDR\":\"0x%x\",\"TB\":\"0x%x\"}\r\n",pNwkIEEEAddrResp->nwkAddr,pNwkIEEEAddrResp->devList[i]);
        ; Setup parameters for call to function sprintf
        MOV     R0,?V4
        MOV     A,R0
        ADD     A,R0
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,?V0
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V1
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPL,?V6
        MOV     DPH,?V7
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1` & 0xff
        MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 1648           HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
        ; Setup parameters for call to function strlen
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R4,?V8
        MOV     R5,?V9
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
// 1649           
// 1650         }
        INC     ?V4
        SJMP    ??zclSampleLight_ProcessZDOMsgs_8
// 1651         
// 1652       }
// 1653     }
// 1654   
// 1655   }
// 1656   else if(pMsg->clusterID == Active_EP_rsp){
??zclSampleLight_ProcessZDOMsgs_6:
        MOV     A,#0x5
        XRL     A,R0
        JNZ     ??zclSampleLight_ProcessZDOMsgs_9
        MOV     A,#-0x80
        XRL     A,R1
??zclSampleLight_ProcessZDOMsgs_9:
        JZ      $+5
        LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
// 1657     
// 1658     char temp[6];
// 1659     pActiveEndpointRsp = ZDO_ParseEPListRsp(pMsg);
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1660     sprintf(msgPrint, "CMD{\"CMD\":\"ACTIVEEP\",\"SRTADDR\":\"0x%x\",\"EP\":[", pActiveEndpointRsp->nwkAddr);
        ; Setup parameters for call to function sprintf
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"ACTIVEEP\\",...">` & 0xff
        MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"ACTIVEEP\\",...">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 1661     
// 1662     for(uint8 i=0; i<pActiveEndpointRsp->cnt; i++){
        MOV     ?V2,#0x0
        SJMP    ??zclSampleLight_ProcessZDOMsgs_10
// 1663       if(i!=pActiveEndpointRsp->cnt-1){
// 1664         sprintf(temp,"\"0x%x\",", pActiveEndpointRsp->epList[i]);
// 1665         strcat(msgPrint,temp);
// 1666       }else{
// 1667         sprintf(temp,"\"0x%x\"]}", pActiveEndpointRsp->epList[i]);
??zclSampleLight_ProcessZDOMsgs_11:
        ; Setup parameters for call to function sprintf
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,#`?<Constant "\\"0x%x\\"]}">` & 0xff
        MOV     R5,#(`?<Constant "\\"0x%x\\"]}">` >> 8) & 0xff
??zclSampleLight_ProcessZDOMsgs_12:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 1668         strcat(msgPrint,temp);
        ; Setup parameters for call to function strcat
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
// 1669       }
        INC     ?V2
??zclSampleLight_ProcessZDOMsgs_10:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V2
        CLR     C
        SUBB    A,R2
        JNC     ??zclSampleLight_ProcessZDOMsgs_4
        MOV     R0,?V2
        MOV     A,?V0
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     ?V5,#0x0
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        CLR     A
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R2
        XRL     A,R0
        JNZ     ??zclSampleLight_ProcessZDOMsgs_13
        MOV     A,R3
??zclSampleLight_ProcessZDOMsgs_13:
        MOV     R0,#?V4
        JZ      ??zclSampleLight_ProcessZDOMsgs_11
        ; Setup parameters for call to function sprintf
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,#`?<Constant "\\"0x%x\\",">` & 0xff
        MOV     R5,#(`?<Constant "\\"0x%x\\",">` >> 8) & 0xff
        SJMP    ??zclSampleLight_ProcessZDOMsgs_12
          CFI CFA_XSP16 add(XSP16, 26)
// 1670     }
// 1671     
// 1672     //sprintf(msgPrint,"Im here !!\r\n");    
// 1673     HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
??zclSampleLight_ProcessZDOMsgs_4:
        ; Setup parameters for call to function strlen
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
// 1674     
// 1675     
// 1676     
// 1677   
// 1678   }
// 1679   
// 1680   osal_mem_free(msgPrint);
??zclSampleLight_ProcessZDOMsgs_2:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1681   
// 1682 }
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond19) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond19) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond19) CFA_SP SP+-7
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV     DPTR,#zclSampleLight_IdentifyTime
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine8_0:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclSampleLight_OnOffCB
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zclSampleLight_event_loop
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond25) CFA_SP SP+-7
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        INC     DPTR
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        INC     DPTR
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        INC     DPTR
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        INC     DPTR
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        INC     DPTR
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        INC     DPTR
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-2
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        INC     DPTR
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        INC     DPTR
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        INC     DPTR
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker84 Using cfiCommon1
          CFI (cfiPicker84) NoFunction
          CFI (cfiPicker84) Picker
        INC     DPTR
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiPicker84
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine18_0:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93
// 1683 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1684 void test(){
test:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function test
        CODE
        FUNCALL test, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL test, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1685 
// 1686   for(int i =0;i<301;i++){
        MOV     R6,#0x2d
        MOV     R7,#0x1
// 1687     
// 1688     char gg[] = "g";
??test_0:
        MOV     DPTR,#`?<Constant "g">`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x2
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1689     HalUARTWrite(MT_UART_DEFAULT_PORT, gg, strlen(gg));
        ; Setup parameters for call to function strlen
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function HalUARTWrite
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
// 1690   
// 1691   }
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JNZ     ??test_0
// 1692     
// 1693 
// 1694 }
        MOV     A,#0x2
          CFI EndBlock cfiBlock94
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock95
        REQUIRE ??Subroutine19_0
        ; // Fall through to label ??Subroutine19_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine19_0:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock96
// 1695 
// 1696 
// 1697 /*********************************************************************
// 1698  * @fn      zclSampleLight_EZModeCB
// 1699  *
// 1700  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1701 *           going on during EZ-Mode steering/finding/binding.
// 1702  *
// 1703  * @param   state - an
// 1704  *
// 1705  * @return  none
// 1706  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1707 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
zclSampleLight_EZModeCB:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI Function zclSampleLight_EZModeCB
        CODE
// 1708 {
        FUNCALL zclSampleLight_EZModeCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1709 #ifdef LCD_SUPPORTED
// 1710   char *pStr;
// 1711   uint8 err;
// 1712 #endif
// 1713 
// 1714   // time to go into identify mode
// 1715   if ( state == EZMODE_STATE_IDENTIFYING )
        MOV     A,#0x4
        XRL     A,R6
        JNZ     ??zclSampleLight_EZModeCB_0
// 1716   {
// 1717 #ifdef LCD_SUPPORTED
// 1718     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1719 #endif
// 1720 
// 1721     zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,#-0x4c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1722     zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
        SJMP    ??zclSampleLight_EZModeCB_1
// 1723   }
// 1724 
// 1725   // autoclosing, show what happened (success, cancelled, etc...)
// 1726   if( state == EZMODE_STATE_AUTOCLOSE )
// 1727   {
// 1728 #ifdef LCD_SUPPORTED
// 1729     pStr = NULL;
// 1730     err = pData->sAutoClose.err;
// 1731     if ( err == EZMODE_ERR_SUCCESS )
// 1732     {
// 1733       pStr = "EZMode: Success";
// 1734     }
// 1735     else if ( err == EZMODE_ERR_NOMATCH )
// 1736     {
// 1737       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1738     }
// 1739     if ( pStr )
// 1740     {
// 1741       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1742       {
// 1743         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1744       }
// 1745     }
// 1746 #endif
// 1747   }
// 1748 
// 1749   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1750   if( state == EZMODE_STATE_FINISH )
??zclSampleLight_EZModeCB_0:
        MOV     A,#0x63
        XRL     A,R6
        JNZ     ??zclSampleLight_EZModeCB_1
// 1751   {
// 1752     // turn off identify mode
// 1753     zclSampleLight_IdentifyTime = 0;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1754     zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
// 1755 
// 1756 #ifdef LCD_SUPPORTED
// 1757     // if successful, inform user which nwkaddr/ep we bound to
// 1758     pStr = NULL;
// 1759     err = pData->sFinish.err;
// 1760     if( err == EZMODE_ERR_SUCCESS )
// 1761     {
// 1762       // already stated on autoclose
// 1763     }
// 1764     else if ( err == EZMODE_ERR_CANCELLED )
// 1765     {
// 1766       pStr = "EZMode: Cancel";
// 1767     }
// 1768     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1769     {
// 1770       pStr = "EZMode: BadParm";
// 1771     }
// 1772     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1773     {
// 1774       pStr = "EZMode: TimeOut";
// 1775     }
// 1776     if ( pStr )
// 1777     {
// 1778       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1779       {
// 1780         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1781       }
// 1782     }
// 1783 #endif
// 1784     // show main UI screen 3 seconds after binding
// 1785     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_bb8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1786   }
// 1787 }
??zclSampleLight_EZModeCB_1:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock97

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 8
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW `??zclSampleLight_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIdentifyTimeChange::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??test::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    test

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_EZModeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_EZModeCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CMD{\\"CMD\\":\\"IDENTIFYQ\\"...">`:
        DB "CMD{\"CMD\":\"IDENTIFYQ\",\"SRCADDR\":\"0x%x\"}\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">`:
        DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
        DB 22H, 3AH, 22H, 41H, 4EH, 4EH, 43H, 45H
        DB 22H, 2CH, 22H, 49H, 45H, 45H, 45H, 41H
        DB 44H, 44H, 52H, 22H, 3AH, 22H, 25H, 78H
        DB 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH, 25H
        DB 78H, 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH
        DB 25H, 78H, 3AH, 25H, 78H, 22H, 2CH, 22H
        DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
        DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
        DB 22H, 2CH, 22H, 43H, 41H, 50H, 22H, 3AH
        DB 22H, 30H, 78H, 25H, 78H, 22H, 7DH, 0DH
        DB 0AH, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">`:
        DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
        DB 22H, 3AH, 22H, 49H, 45H, 45H, 45H, 52H
        DB 45H, 51H, 22H, 2CH, 22H, 53H, 54H, 41H
        DB 54H, 55H, 53H, 22H, 3AH, 30H, 2CH, 22H
        DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
        DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
        DB 22H, 2CH, 22H, 54H, 79H, 70H, 65H, 22H
        DB 3AH, 30H, 2CH, 22H, 49H, 45H, 45H, 45H
        DB 41H, 44H, 44H, 52H, 22H, 3AH, 22H, 25H
        DB 78H, 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH
        DB 25H, 78H, 3AH, 25H, 78H, 3AH, 25H, 78H
        DB 3AH, 25H, 78H, 3AH, 25H, 78H, 22H, 7DH
        DB 0DH, 0AH, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1`:
        DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
        DB 22H, 3AH, 22H, 49H, 45H, 45H, 45H, 52H
        DB 45H, 51H, 22H, 2CH, 22H, 53H, 52H, 54H
        DB 41H, 44H, 44H, 52H, 22H, 3AH, 22H, 30H
        DB 78H, 25H, 78H, 22H, 2CH, 22H, 54H, 42H
        DB 22H, 3AH, 22H, 30H, 78H, 25H, 78H, 22H
        DB 7DH, 0DH, 0AH, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CMD{\\"CMD\\":\\"ACTIVEEP\\",...">`:
        DB "CMD{\"CMD\":\"ACTIVEEP\",\"SRTADDR\":\"0x%x\",\"EP\":["

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"0x%x\\",">`:
        DB "\"0x%x\","

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"0x%x\\"]}">`:
        DB "\"0x%x\"]}"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "g">`:
        DB "g"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        END
// 1788 #endif // ZCL_EZMODE
// 1789 
// 1790 /****************************************************************************
// 1791 ****************************************************************************/
// 1792 
// 1793 
// 
// 2 027 bytes in segment BANKED_CODE
//    72 bytes in segment BANK_RELAYS
//    39 bytes in segment XDATA_I
//    39 bytes in segment XDATA_ID
//   365 bytes in segment XDATA_ROM_C
//    16 bytes in segment XDATA_Z
// 
// 2 138 bytes of CODE  memory
//   357 bytes of CONST memory (+ 8 bytes shared)
//    55 bytes of XDATA memory
//
//Errors: none
//Warnings: 7
