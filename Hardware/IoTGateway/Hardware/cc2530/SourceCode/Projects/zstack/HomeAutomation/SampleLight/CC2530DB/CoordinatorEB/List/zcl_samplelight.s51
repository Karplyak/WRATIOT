///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               20/Jun/2016  21:04:21
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
//        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
//        -lA
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes
//    List file          =  
//        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", ""
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleLight_EZModeCB::?relay`,0203H
        FUNCTION `??zclSampleLight_HandleKeys::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessIdentifyTimeChange::?re`,0203H
        FUNCTION `??zclSampleLight_ProcessZDOMsgs::?relay`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_bb8
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zclSampleLight_DstAddr
        FUNCTION zclSampleLight_EZModeCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION zclSampleLight_HandleKeys,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSampleLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyQueryRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_NwkState
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclSampleLight_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        FUNCTION zclSampleLight_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 286, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
`??ZDO_ParseDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sprintf             SYMBOL "sprintf"
`??sprintf::?relay` SYMBOL "?relay", sprintf
strcat              SYMBOL "strcat"
`??strcat::?relay`  SYMBOL "?relay", strcat
strlen              SYMBOL "strlen"
`??strlen::?relay`  SYMBOL "?relay", strlen
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 50>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 50>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_RegisterEZMode  SYMBOL "zcl_RegisterEZMode"
`??zcl_RegisterEZMode::?relay` SYMBOL "?relay", zcl_RegisterEZMode
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseDeviceAnnce::?relay`
        FUNCTION `??ZDO_ParseDeviceAnnce::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sprintf::?relay`
        FUNCTION `??sprintf::?relay`,00H
        EXTERN `??strcat::?relay`
        FUNCTION `??strcat::?relay`,00H
        EXTERN `??strlen::?relay`
        FUNCTION `??strlen::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_RegisterEZMode::?relay`
        FUNCTION `??zcl_RegisterEZMode::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 286, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcat
        FUNCTION strcat,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_IdentifyCommissionState
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_RegisterEZMode
        FUNCTION zcl_RegisterEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "zcl.h"
//   77 #include "zcl_general.h"
//   78 #include "zcl_ha.h"
//   79 #include "zcl_ezmode.h"
//   80 #include "zcl_diagnostic.h"
//   81 
//   82 #include "zcl_samplelight.h"
//   83 
//   84 #include "onboard.h"
//   85 
//   86 /* HAL */
//   87 #include "hal_lcd.h"
//   88 #include "hal_led.h"
//   89 #include "hal_key.h"
//   90 
//   91 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   92       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   93 #include "zgp_translationtable.h"
//   94   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   95     #define ZGP_AUTO_TT
//   96   #endif
//   97 #endif
//   98 
//   99 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  100 #include "math.h"
//  101 #include "hal_timer.h"
//  102 #endif
//  103 
//  104 #include "NLMEDE.h"
//  105 
//  106 #include "DebugTrace.h"
//  107 #include "string.h"
//  108 #include "MT_UART.h"
//  109 #include "stdio.h"
//  110 
//  111 /*********************************************************************
//  112  * MACROS
//  113  */
//  114 
//  115 /*********************************************************************
//  116  * CONSTANTS
//  117  */
//  118 #if (defined HAL_BOARD_ZLIGHT)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       1000
//  123 #elif (defined HAL_PWM)
//  124 #define LEVEL_MAX                 0xFE
//  125 #define LEVEL_MIN                 0x0
//  126 #define GAMMA_VALUE               2
//  127 #define PWM_FULL_DUTY_CYCLE       100
//  128 #endif
//  129 
//  130 /*********************************************************************
//  131  * TYPEDEFS
//  132  */
//  133 
//  134 /*********************************************************************
//  135  * GLOBAL VARIABLES
//  136  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139 
//  140 
//  141 /*********************************************************************
//  142  * GLOBAL FUNCTIONS
//  143  */
//  144 
//  145 /*********************************************************************
//  146  * LOCAL VARIABLES
//  147  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  149 
//  150 #ifdef ZCL_EZMODE
//  151 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  152 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  153 
//  154 
//  155 // register EZ-Mode with task information (timeout events, callback, etc...)

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  156 static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
zclSampleLight_RegisterEZModeData:
        DATA16
        DW zclSampleLight_TaskID
        DW 8
        DW 4
        DW zclSampleLightSeqNum
        DW `??zclSampleLight_EZModeCB::?relay`
//  157 {
//  158   &zclSampleLight_TaskID,
//  159   SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  160   SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  161   &zclSampleLightSeqNum,
//  162   zclSampleLight_EZModeCB
//  163 };
//  164 
//  165 #else
//  166 uint16 bindingInClusters[] =
//  167 {
//  168   ZCL_CLUSTER_ID_GEN_ON_OFF
//  169 #ifdef ZCL_LEVEL_CTRL
//  170   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  171 #endif
//  172 };
//  173 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  174 
//  175 #endif  // ZCL_EZMODE
//  176 
//  177 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  178 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  179 {
//  180   SAMPLELIGHT_ENDPOINT,
//  181   &zclSampleLight_TaskID,
//  182   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  183   (afNetworkLatencyReq_t)0            // No Network Latency req
//  184 };
//  185 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  186 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  187 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  188 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  189 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  190 devStates_t zclSampleLight_NwkState = DEV_INIT;
zclSampleLight_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleLight_NwkState>`
        REQUIRE __INIT_XDATA_I
//  191 
//  192 #if ZCL_LEVEL_CTRL
//  193 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  194 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  195 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  196 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  197 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  198 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  199 #endif
//  200 
//  201 /*********************************************************************
//  202  * LOCAL FUNCTIONS
//  203  */
//  204 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  205 static void zclSampleLight_BasicResetCB( void );
//  206 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  207 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  208 static void zclSampleLight_OnOffCB( uint8 cmd );
//  209 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  210 #ifdef ZCL_LEVEL_CTRL
//  211 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  212 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  213 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  214 static void zclSampleLight_LevelControlStopCB( void );
//  215 static void zclSampleLight_DefaultMove( void );
//  216 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  217 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  218 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  219 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  220 static void zclSampleLight_AdjustLightLevel( void );
//  221 #endif
//  222 
//  223 // app display functions
//  224 static void zclSampleLight_LcdDisplayUpdate( void );
//  225 #ifdef LCD_SUPPORTED
//  226 static void zclSampleLight_LcdDisplayMainMode( void );
//  227 static void zclSampleLight_LcdDisplayHelpMode( void );
//  228 #endif
//  229 static void zclSampleLight_DisplayLight( void );
//  230 
//  231 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  232 void zclSampleLight_UpdateLampLevel( uint8 level );
//  233 #endif
//  234 
//  235 // Functions to process ZCL Foundation incoming Command/Response messages
//  236 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  237 #ifdef ZCL_READ
//  238 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  239 #endif
//  240 #ifdef ZCL_WRITE
//  241 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  242 #endif
//  243 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  244 #ifdef ZCL_DISCOVER
//  245 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  246 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  247 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  248 #endif
//  249 
//  250 /*********************************************************************
//  251  * STATUS STRINGS
//  252  */
//  253 #ifdef LCD_SUPPORTED
//  254 const char sDeviceName[]   = "  Sample Light";
//  255 const char sClearLine[]    = " ";
//  256 const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
//  257 const char sSwEZMode[]     = "SW2: EZ-Mode";
//  258 char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
//  259 const char sLightOn[]      = "    LIGHT ON ";
//  260 const char sLightOff[]     = "    LIGHT OFF";
//  261  #if ZCL_LEVEL_CTRL
//  262  char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
//  263  #endif
//  264 #endif
//  265 
//  266 /*********************************************************************
//  267  * ZCL General Profile Callback table
//  268  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  269 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  270 {
//  271   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  272   zclSampleLight_IdentifyCB,              // Identify command
//  273 #ifdef ZCL_EZMODE
//  274   NULL,                                   // Identify EZ-Mode Invoke command
//  275   NULL,                                   // Identify Update Commission State command
//  276 #endif
//  277   NULL,                                   // Identify Trigger Effect command
//  278   zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
//  279   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  280   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  281   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  282   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  283 #ifdef ZCL_LEVEL_CTRL
//  284   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  285   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  286   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  287   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  288 #endif
//  289 #ifdef ZCL_GROUPS
//  290   NULL,                                   // Group Response commands
//  291 #endif
//  292 #ifdef ZCL_SCENES
//  293   NULL,                                  // Scene Store Request command
//  294   NULL,                                  // Scene Recall Request command
//  295   NULL,                                  // Scene Response command
//  296 #endif
//  297 #ifdef ZCL_ALARMS
//  298   NULL,                                  // Alarm (Response) commands
//  299 #endif
//  300 #ifdef SE_UK_EXT
//  301   NULL,                                  // Get Event Log command
//  302   NULL,                                  // Publish Event Log command
//  303 #endif
//  304   NULL,                                  // RSSI Location command
//  305   NULL                                   // RSSI Location Response command
//  306 };
//  307 
//  308 /*********************************************************************
//  309  * @fn          zclSampleLight_Init
//  310  *
//  311  * @brief       Initialization function for the zclGeneral layer.
//  312  *
//  313  * @param       none
//  314  *
//  315  * @return      none
//  316  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  317 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  318 {
        FUNCALL zclSampleLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_RegisterEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  319   zclSampleLight_TaskID = task_id;
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    @DPTR,A
//  320 
//  321   // Set destination address to indirect
//  322   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  323   zclSampleLight_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  324   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  325 
//  326   // This app is part of the Home Automation Profile
//  327   zclHA_Init( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclSampleLight_SimpleDesc & 0xff
        MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  328 
//  329   // Register the ZCL General Cluster Library callback functions
//  330   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  331 
//  332   // Register the application's attribute list
//  333   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleLight_Attrs & 0xff
        MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV     DPTR,#zclSampleLight_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  334 
//  335   // Register the Application to receive the unprocessed Foundation command/response messages
//  336   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  337 
//  338 #ifdef ZCL_DISCOVER
//  339   // Register the application's command list
//  340   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
//  341 #endif
//  342 
//  343   // Register for all key events - This app will handle all key events
//  344   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  345 
//  346   // Register for a test endpoint
//  347   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  348 
//  349 #ifdef ZCL_EZMODE
//  350   // Register EZ-Mode
//  351   zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
        ; Setup parameters for call to function zcl_RegisterEZMode
        MOV     R2,#zclSampleLight_RegisterEZModeData & 0xff
        MOV     R3,#(zclSampleLight_RegisterEZModeData >> 8) & 0xff
        LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
//  352 
//  353   // Register with the ZDO to receive Match Descriptor Responses
//  354   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  355 #endif
//  356   
//  357   ZDO_RegisterForZDOMsg(task_id, Device_annce );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x13
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  358   
//  359   ZDO_RegisterForZDOMsg(task_id, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  360 
//  361 
//  362 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  363   HalTimer1Init( 0 );
//  364   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  365   halTimer1SetChannelDuty( RED_LED, 0 );
//  366   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  367   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  368 
//  369   // find if we are already on a network from NV_RESTORE
//  370   uint8 state;
//  371   NLME_GetRequest( nwkNwkState, 0, &state );
//  372 
//  373   if ( state < NWK_ENDDEVICE )
//  374   {
//  375     // Start EZMode on Start up to avoid button press
//  376     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  377   }
//  378 #if ZCL_LEVEL_CTRL
//  379   zclSampleLight_DefaultMove();
//  380 #endif
//  381 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  382 
//  383 #ifdef ZCL_DIAGNOSTIC
//  384   // Register the application's callback function to read/write attribute data.
//  385   // This is only required when the attribute data format is unknown to ZCL.
//  386   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  387 
//  388   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  389   {
//  390     // Here the user could start the timer to save Diagnostics to NV
//  391   }
//  392 #endif
//  393 
//  394 #ifdef LCD_SUPPORTED
//  395   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  396 #endif  // LCD_SUPPORTED
//  397 
//  398 #ifdef ZGP_AUTO_TT
//  399   zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
//  400 #endif
//  401 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  402 
//  403 /*********************************************************************
//  404  * @fn          zclSample_event_loop
//  405  *
//  406  * @brief       Event Loop Processor for zclGeneral.
//  407  *
//  408  * @param       none
//  409  *
//  410  * @return      none
//  411  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  412 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  413 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  414   afIncomingMSGPacket_t *MSGpkt;
//  415 
//  416   (void)task_id;  // Intentionally unreferenced parameter
//  417 
//  418   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleLight_event_loop_0
//  419   {
//  420     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  421     {
//  422       switch ( MSGpkt->hdr.event )
//  423       {
//  424 #ifdef ZCL_EZMODE
//  425         case ZDO_CB_MSG:
//  426           zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  427           break;
//  428 #endif
//  429         case ZCL_INCOMING_MSG:
//  430           // Incoming ZCL Foundation command/response messages
//  431           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  432           break;
//  433 
//  434         case KEY_CHANGE:
//  435           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  436           break;
//  437 
//  438         case ZDO_STATE_CHANGE:
//  439           zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  440 
//  441           // now on the network
//  442           if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  443                (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  444                (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  445           {
//  446             giLightScreenMode = LIGHT_MAINMODE;
//  447             zclSampleLight_LcdDisplayUpdate();
//  448 #ifdef ZCL_EZMODE
//  449             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  450 #endif // ZCL_EZMODE
//  451           }
//  452           break;
//  453 
//  454         default:
//  455           break;
//  456       }
//  457 
//  458       // Release the memory
//  459       osal_msg_deallocate( (uint8 *)MSGpkt );
//  460     }
//  461 
//  462     // return unprocessed events
//  463     return (events ^ SYS_EVENT_MSG);
//  464   }
//  465 
//  466   if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
//  467   {
//  468     if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_event_loop_2
//  469       zclSampleLight_IdentifyTime--;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  470     zclSampleLight_ProcessIdentifyTimeChange();
??zclSampleLight_event_loop_2:
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  471 
//  472     return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
//  473   }
??zclSampleLight_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_5:
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x2
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
??zclSampleLight_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleLight_event_loop_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleLight_event_loop_8
        ADD     A,#0x74
        JZ      ??zclSampleLight_event_loop_9
        ADD     A,#-0x11
        JZ      ??zclSampleLight_event_loop_4
        ADD     A,#-0x2
        JNZ     ??zclSampleLight_event_loop_6
        ; Setup parameters for call to function zclSampleLight_ProcessZDOMsgs
        LCALL   `??zclSampleLight_ProcessZDOMsgs::?relay`; Banked call to: zclSampleLight_ProcessZDOMsgs
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_8:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleLight_event_loop_10
        ADD     A,#-0x3
        JNZ     ??zclSampleLight_event_loop_11
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleLight_event_loop_11
        INC     R0
        SJMP    ??CrossCallReturnLabel_0
??zclSampleLight_event_loop_10:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??zclSampleLight_event_loop_12
??zclSampleLight_event_loop_13:
        INC     R0
??zclSampleLight_event_loop_12:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleLight_event_loop_13
??zclSampleLight_event_loop_11:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleLight_event_loop_6
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_9:
        ; Setup parameters for call to function zclSampleLight_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
        LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
??zclSampleLight_event_loop_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??zclSampleLight_event_loop_14
//  474 
//  475   if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
??zclSampleLight_event_loop_1:
        ANL     A,#0x10
        JZ      ??zclSampleLight_event_loop_15
//  476   {
//  477     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  478     zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  479 
//  480     return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??zclSampleLight_event_loop_3
//  481   }
//  482 
//  483 #ifdef ZCL_EZMODE
//  484 #if (defined HAL_BOARD_ZLIGHT)
//  485   // event to start EZMode on startup with a delay
//  486   if ( events & SAMPLELIGHT_START_EZMODE_EVT )
//  487   {
//  488     // Invoke EZ-Mode
//  489     zclEZMode_InvokeData_t ezModeData;
//  490 
//  491     // Invoke EZ-Mode
//  492     ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  493     if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  494          (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  495          (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  496     {
//  497       ezModeData.onNetwork = TRUE;      // node is already on the network
//  498     }
//  499     else
//  500     {
//  501       ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  502     }
//  503     ezModeData.initiator = FALSE;          // OnOffLight is a target
//  504     ezModeData.numActiveOutClusters = 0;
//  505     ezModeData.pActiveOutClusterIDs = NULL;
//  506     ezModeData.numActiveInClusters = 0;
//  507     ezModeData.pActiveOutClusterIDs = NULL;
//  508     zcl_InvokeEZMode( &ezModeData );
//  509 
//  510     return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
//  511   }
//  512 #endif // #if (defined HAL_BOARD_ZLIGHT)
//  513 
//  514   // going on to next state
//  515   if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
??zclSampleLight_event_loop_15:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zclSampleLight_event_loop_16
//  516   {
//  517     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  518     return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
        MOV     A,R6
        XRL     A,#0x8
        SJMP    ??zclSampleLight_event_loop_3
//  519   }
//  520 
//  521   // the overall EZMode timer expired, so we timed out
//  522   if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
??zclSampleLight_event_loop_16:
        MOV     A,R6
        ANL     A,#0x4
        MOV     R2,#0x0
        MOV     R3,#0x0
        JZ      ??zclSampleLight_event_loop_17
//  523   {
//  524     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R1,#0x63
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  525     return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x4
??zclSampleLight_event_loop_3:
        MOV     R2,A
        MOV     A,R7
??zclSampleLight_event_loop_14:
        MOV     R3,A
//  526   }
//  527 #endif // ZLC_EZMODE
//  528 
//  529 #ifdef ZCL_LEVEL_CTRL
//  530   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  531   {
//  532     zclSampleLight_AdjustLightLevel();
//  533     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  534   }
//  535 #endif
//  536 
//  537   // Discard unknown events
//  538   return 0;
??zclSampleLight_event_loop_17:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  539 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclSampleLight_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  540 
//  541 /*********************************************************************
//  542  * @fn      zclSampleLight_HandleKeys
//  543  *
//  544  * @brief   Handles all key events for this device.
//  545  *
//  546  * @param   shift - true if in shift/alt.
//  547  * @param   keys - bit field for key events. Valid entries:
//  548  *                 HAL_KEY_SW_5
//  549  *                 HAL_KEY_SW_4
//  550  *                 HAL_KEY_SW_2
//  551  *                 HAL_KEY_SW_1
//  552  *
//  553  * @return  none
//  554  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  555 static void zclSampleLight_HandleKeys( byte shift, byte keys )
zclSampleLight_HandleKeys:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleLight_HandleKeys
        CODE
//  556 {
        FUNCALL zclSampleLight_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  557   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclSampleLight_HandleKeys_0
//  558   {
//  559     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  560 
//  561     // toggle local light immediately
//  562     zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_1
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_2
??zclSampleLight_HandleKeys_1:
        MOV     A,#0x1
??zclSampleLight_HandleKeys_2:
        MOVX    @DPTR,A
//  563 #ifdef ZCL_LEVEL_CTRL
//  564     zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  565 #endif
//  566   }
//  567 
//  568   if ( keys & HAL_KEY_SW_2 )
??zclSampleLight_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclSampleLight_HandleKeys_3
//  569   {
//  570 #if (defined HAL_BOARD_ZLIGHT)
//  571 
//  572     zclSampleLight_BasicResetCB();
//  573 
//  574 #else
//  575 
//  576     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  577 
//  578 #ifdef ZCL_EZMODE
//  579     {
//  580       // Invoke EZ-Mode
//  581       zclEZMode_InvokeData_t ezModeData;
//  582 
//  583       // Invoke EZ-Mode
//  584       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x8
        MOVX    @DPTR,A
//  585       if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  586           (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  587             (zclSampleLight_NwkState == DEV_END_DEVICE) )
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleLight_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_HandleKeys_5
//  588       {
//  589         ezModeData.onNetwork = TRUE;      // node is already on the network
??zclSampleLight_HandleKeys_4:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zclSampleLight_HandleKeys_6
//  590       }
//  591       else
//  592       {
//  593         ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zclSampleLight_HandleKeys_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zclSampleLight_HandleKeys_6:
        MOVX    @DPTR,A
//  594       }
//  595       ezModeData.initiator = FALSE;          // OnOffLight is a target
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  596       ezModeData.numActiveOutClusters = 0;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  597       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  598       ezModeData.numActiveInClusters = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  599       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  600       zcl_InvokeEZMode( &ezModeData );
        ; Setup parameters for call to function zcl_InvokeEZMode
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  601     }
//  602 
//  603 #else // NOT EZ-Mode
//  604     {
//  605       zAddrType_t dstAddr;
//  606       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  607 
//  608       // Initiate an End Device Bind Request, this bind request will
//  609       // only use a cluster list that is important to binding.
//  610       dstAddr.addrMode = afAddr16Bit;
//  611       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  612       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  613                            SAMPLELIGHT_ENDPOINT,
//  614                            ZCL_HA_PROFILE_ID,
//  615                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  616                            0, NULL,   // No Outgoing clusters to bind
//  617                            TRUE );
//  618     }
//  619 #endif // ZCL_EZMODE
//  620 #endif // HAL_BOARD_ZLIGHT
//  621   }
//  622 
//  623   if ( keys & HAL_KEY_SW_3 )
??zclSampleLight_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclSampleLight_HandleKeys_7
//  624   {
//  625     NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
//  626                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  627   }
//  628 
//  629   if ( keys & HAL_KEY_SW_4 )
??zclSampleLight_HandleKeys_7:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zclSampleLight_HandleKeys_8
//  630   {
//  631     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  632 
//  633     if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
//  634           ( zclSampleLight_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleLight_HandleKeys_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleLight_HandleKeys_8
//  635     {
//  636       zAddrType_t tmpAddr;
//  637 
//  638       tmpAddr.addrMode = Addr16Bit;
??zclSampleLight_HandleKeys_9:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  639       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  640 
//  641       // toggle permit join
//  642       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_10
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_11
??zclSampleLight_HandleKeys_10:
        MOV     A,#-0x1
??zclSampleLight_HandleKeys_11:
        MOVX    @DPTR,A
//  643 
//  644       // Trust Center significance is always true
//  645       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  646     }
//  647   }
//  648 
//  649   // Shift F5 does a Basic Reset (factory defaults)
//  650   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zclSampleLight_HandleKeys_8:
        MOV     A,R6
        JZ      ??zclSampleLight_HandleKeys_12
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleLight_HandleKeys_13
//  651   {
//  652     zclSampleLight_BasicResetCB();
        ; Setup parameters for call to function zclSampleLight_BasicResetCB
        LCALL   `??zclSampleLight_BasicResetCB::?relay`; Banked call to: zclSampleLight_BasicResetCB
        SJMP    ??zclSampleLight_HandleKeys_13
//  653   }
//  654   else if ( keys & HAL_KEY_SW_5 )
??zclSampleLight_HandleKeys_12:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleLight_HandleKeys_13
//  655   {
//  656     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_14
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_15
??zclSampleLight_HandleKeys_14:
        MOV     A,#0x1
??zclSampleLight_HandleKeys_15:
        MOVX    @DPTR,A
//  657   }
//  658 
//  659   // update the display, including the light
//  660   zclSampleLight_LcdDisplayUpdate();
??zclSampleLight_HandleKeys_13:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  661 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  662 
//  663 /*********************************************************************
//  664  * @fn      zclSampleLight_LcdDisplayUpdate
//  665  *
//  666  * @brief   Called to update the LCD display.
//  667  *
//  668  * @param   none
//  669  *
//  670  * @return  none
//  671  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  672 void zclSampleLight_LcdDisplayUpdate( void )
zclSampleLight_LcdDisplayUpdate:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
        CODE
//  673 {
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  674 #ifdef LCD_SUPPORTED
//  675   if ( giLightScreenMode == LIGHT_HELPMODE )
//  676   {
//  677     zclSampleLight_LcdDisplayHelpMode();
//  678   }
//  679   else
//  680   {
//  681     zclSampleLight_LcdDisplayMainMode();
//  682   }
//  683 #endif
//  684 
//  685   zclSampleLight_DisplayLight();
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_LcdDisplayUpdate_0
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_LcdDisplayUpdate_1
??zclSampleLight_LcdDisplayUpdate_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_LcdDisplayUpdate_1:
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  686 }
        SJMP    ??Subroutine9_0
          CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 5)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock9
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock10
//  687 
//  688 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  689 /*********************************************************************
//  690  * @fn      zclSampleLight_UpdateLampLevel
//  691  *
//  692  * @brief   Update lamp level output with gamma compensation
//  693  *
//  694  * @param   level
//  695  *
//  696  * @return  none
//  697  */
//  698 void zclSampleLight_UpdateLampLevel( uint8 level )
//  699 
//  700 {
//  701   uint16 gammaCorrectedLevel;
//  702 
//  703   // gamma correct the level
//  704   gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
//  705 
//  706   halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
//  707 }
//  708 #endif
//  709 
//  710 /*********************************************************************
//  711  * @fn      zclSampleLight_DisplayLight
//  712  *
//  713  * @brief   Displays current state of light on LED and also on main display if supported.
//  714  *
//  715  * @param   none
//  716  *
//  717  * @return  none
//  718  */
//  719 static void zclSampleLight_DisplayLight( void )
//  720 {
//  721   // set the LED1 based on light (on or off)
//  722   if ( zclSampleLight_OnOff == LIGHT_ON )
//  723   {
//  724     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  725   }
//  726   else
//  727   {
//  728     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  729   }
//  730 
//  731 #ifdef LCD_SUPPORTED
//  732   if (giLightScreenMode == LIGHT_MAINMODE)
//  733   {
//  734 #ifdef ZCL_LEVEL_CTRL
//  735     // display current light level
//  736     if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  737          ( zclSampleLight_OnOff == LIGHT_OFF ) )
//  738     {
//  739       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  740     }
//  741     else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  742               ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
//  743                ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  744                  ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
//  745     {
//  746       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  747     }
//  748     else    // "    LEVEL ###"
//  749     {
//  750       zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
//  751       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  752     }
//  753 #else
//  754     if ( zclSampleLight_OnOff )
//  755     {
//  756       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  757     }
//  758     else
//  759     {
//  760       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  761     }
//  762 #endif // ZCL_LEVEL_CTRL
//  763   }
//  764 #endif // LCD_SUPPORTED
//  765 }
//  766 
//  767 #ifdef LCD_SUPPORTED
//  768 /*********************************************************************
//  769  * @fn      zclSampleLight_LcdDisplayMainMode
//  770  *
//  771  * @brief   Called to display the main screen on the LCD.
//  772  *
//  773  * @param   none
//  774  *
//  775  * @return  none
//  776  */
//  777 static void zclSampleLight_LcdDisplayMainMode( void )
//  778 {
//  779   // display line 1 to indicate NWK status
//  780   if ( zclSampleLight_NwkState == DEV_ZB_COORD )
//  781   {
//  782     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
//  783   }
//  784   else if ( zclSampleLight_NwkState == DEV_ROUTER )
//  785   {
//  786     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
//  787   }
//  788   else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
//  789   {
//  790     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
//  791   }
//  792 
//  793   // end of line 3 displays permit join status (*)
//  794   if ( gPermitDuration )
//  795   {
//  796     sSwHelp[15] = '*';
//  797   }
//  798   else
//  799   {
//  800     sSwHelp[15] = ' ';
//  801   }
//  802   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  803 }
//  804 
//  805 /*********************************************************************
//  806  * @fn      zclSampleLight_LcdDisplayHelpMode
//  807  *
//  808  * @brief   Called to display the SW options on the LCD.
//  809  *
//  810  * @param   none
//  811  *
//  812  * @return  none
//  813  */
//  814 static void zclSampleLight_LcdDisplayHelpMode( void )
//  815 {
//  816   HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
//  817   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
//  818   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  819 }
//  820 #endif  // LCD_SUPPORTED
//  821 
//  822 /*********************************************************************
//  823  * @fn      zclSampleLight_ProcessIdentifyTimeChange
//  824  *
//  825  * @brief   Called to process any change to the IdentifyTime attribute.
//  826  *
//  827  * @param   none
//  828  *
//  829  * @return  none
//  830  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  831 static void zclSampleLight_ProcessIdentifyTimeChange( void )
zclSampleLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
        CODE
//  832 {
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  833   if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
//  834   {
//  835     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  836     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
//  837   }
//  838   else
//  839   {
//  840 #ifdef ZCL_EZMODE
//  841     if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
??zclSampleLight_ProcessIdentifyTimeChange_0:
        MOV     DPTR,#zclSampleLight_IdentifyCommissionState
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclSampleLight_ProcessIdentifyTimeChange_2
//  842     {
//  843       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_3
//  844     }
//  845     else
//  846     {
//  847       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
??zclSampleLight_ProcessIdentifyTimeChange_2:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_ProcessIdentifyTimeChange_3:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  848     }
//  849 #endif
//  850 
//  851     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  852   }
//  853 }
??zclSampleLight_ProcessIdentifyTimeChange_1:
        SJMP    ??Subroutine9_0
          CFI EndBlock cfiBlock11
//  854 
//  855 /*********************************************************************
//  856  * @fn      zclSampleLight_BasicResetCB
//  857  *
//  858  * @brief   Callback from the ZCL General Cluster Library
//  859  *          to set all the Basic Cluster attributes to default values.
//  860  *
//  861  * @param   none
//  862  *
//  863  * @return  none
//  864  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  865 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  866 {
        FUNCALL zclSampleLight_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  867   NLME_LeaveReq_t leaveReq;
//  868   // Set every field to 0
//  869   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  870 
//  871   // This will enable the device to rejoin the network after reset.
//  872   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  873 
//  874   // Set the NV startup option to force a "new" join.
//  875   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  876 
//  877   // Leave the network, and reset afterwards
//  878   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zclSampleLight_BasicResetCB_0
//  879   {
//  880     // Couldn't send out leave; prepare to reset anyway
//  881     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  882   }
//  883 }
??zclSampleLight_BasicResetCB_0:
        MOV     A,#0x5
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock12
//  884 
//  885 /*********************************************************************
//  886  * @fn      zclSampleLight_IdentifyCB
//  887  *
//  888  * @brief   Callback from the ZCL General Cluster Library when
//  889  *          it received an Identity Command for this application.
//  890  *
//  891  * @param   srcAddr - source address and endpoint of the response message
//  892  * @param   identifyTime - the number of seconds to identify yourself
//  893  *
//  894  * @return  none
//  895  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  896 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
zclSampleLight_IdentifyCB:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
        CODE
//  897 {
        FUNCALL zclSampleLight_IdentifyCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  898   zclSampleLight_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  899   zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  900 }
        LJMP    ??Subroutine9_0 & 0xFFFF
          CFI EndBlock cfiBlock13
//  901 
//  902 /*********************************************************************
//  903  * @fn      zclSampleLight_IdentifyQueryRspCB
//  904  *
//  905  * @brief   Callback from the ZCL General Cluster Library when
//  906  *          it received an Identity Query Response Command for this application.
//  907  *
//  908  * @param   srcAddr - requestor's address
//  909  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  910  *
//  911  * @return  none
//  912  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  913 static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleLight_IdentifyQueryRspCB:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyQueryRspCB
        CODE
//  914 {
        FUNCALL zclSampleLight_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  915   (void)pRsp;
//  916 #ifdef ZCL_EZMODE
//  917   {
//  918     zclEZMode_ActionData_t data;
//  919     data.pIdentifyQueryRsp = pRsp;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  920     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x4
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  921   }
//  922 #endif
//  923 }
        MOV     A,#0x2
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock14
//  924 
//  925 /*********************************************************************
//  926  * @fn      zclSampleLight_OnOffCB
//  927  *
//  928  * @brief   Callback from the ZCL General Cluster Library when
//  929  *          it received an On/Off Command for this application.
//  930  *
//  931  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  932  *
//  933  * @return  none
//  934  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  935 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  936 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  937   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  938 
//  939   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     DPTR,#zclSampleLight_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  940 
//  941 
//  942   // Turn on the light
//  943   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zclSampleLight_OnOffCB_0
//  944   {
//  945     zclSampleLight_OnOff = LIGHT_ON;
//  946   }
//  947   // Turn off the light
//  948   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclSampleLight_OnOffCB_1
//  949   {
//  950     zclSampleLight_OnOff = LIGHT_OFF;
//  951   }
//  952   // Toggle the light
//  953   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_2
//  954   {
//  955     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_OnOffCB_1
//  956     {
//  957       zclSampleLight_OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_0:
        MOV     DPTR,#zclSampleLight_OnOff
        MOV     A,#0x1
        SJMP    ??zclSampleLight_OnOffCB_3
//  958     }
//  959     else
//  960     {
//  961       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_1:
        MOV     DPTR,#zclSampleLight_OnOff
        CLR     A
??zclSampleLight_OnOffCB_3:
        MOVX    @DPTR,A
//  962     }
//  963   }
//  964 
//  965 #if ZCL_LEVEL_CTRL
//  966   zclSampleLight_DefaultMove( );
//  967 #endif
//  968 
//  969   // update the display
//  970   zclSampleLight_LcdDisplayUpdate( );
??zclSampleLight_OnOffCB_2:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  971 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock15
//  972 
//  973 #ifdef ZCL_LEVEL_CTRL
//  974 /*********************************************************************
//  975  * @fn      zclSampleLight_TimeRateHelper
//  976  *
//  977  * @brief   Calculate time based on rate, and startup level state machine
//  978  *
//  979  * @param   newLevel - new level for current level
//  980  *
//  981  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  982  */
//  983 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
//  984 {
//  985   uint32 diff;
//  986   uint32 newLevel32;
//  987 
//  988   // remember current and new level
//  989   zclSampleLight_NewLevel = newLevel;
//  990   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
//  991 
//  992   // calculate diff
//  993   newLevel32 = (uint32)1000 * newLevel;
//  994   if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  995   {
//  996     diff = zclSampleLight_CurrentLevel32 - newLevel32;
//  997     zclSampleLight_NewLevelUp = FALSE;  // moving down
//  998   }
//  999   else
// 1000   {
// 1001     diff = newLevel32 - zclSampleLight_CurrentLevel32;
// 1002     zclSampleLight_NewLevelUp = TRUE;   // moving up
// 1003   }
// 1004 
// 1005   return ( diff );
// 1006 }
// 1007 
// 1008 /*********************************************************************
// 1009  * @fn      zclSampleLight_MoveBasedOnRate
// 1010  *
// 1011  * @brief   Calculate time based on rate, and startup level state machine
// 1012  *
// 1013  * @param   newLevel - new level for current level
// 1014  * @param   rate16   - fixed point rate (e.g. 16.123)
// 1015  *
// 1016  * @return  none
// 1017  */
// 1018 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
// 1019 {
// 1020   uint32 diff;
// 1021 
// 1022   // determine how much time (in 10ths of seconds) based on the difference and rate
// 1023   zclSampleLight_Rate32 = rate;
// 1024   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1025   zclSampleLight_LevelRemainingTime = diff / rate;
// 1026   if ( !zclSampleLight_LevelRemainingTime )
// 1027   {
// 1028     zclSampleLight_LevelRemainingTime = 1;
// 1029   }
// 1030 
// 1031   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1032 }
// 1033 
// 1034 /*********************************************************************
// 1035  * @fn      zclSampleLight_MoveBasedOnTime
// 1036  *
// 1037  * @brief   Calculate rate based on time, and startup level state machine
// 1038  *
// 1039  * @param   newLevel  - new level for current level
// 1040  * @param   time      - in 10ths of seconds
// 1041  *
// 1042  * @return  none
// 1043  */
// 1044 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
// 1045 {
// 1046   uint16 diff;
// 1047 
// 1048   // determine rate (in units) based on difference and time
// 1049   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1050   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
// 1051   zclSampleLight_Rate32 = diff / time;
// 1052 
// 1053   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1054 }
// 1055 
// 1056 /*********************************************************************
// 1057  * @fn      zclSampleLight_GetTime
// 1058  *
// 1059  * @brief   Determine amount of time that MoveXXX will take to complete.
// 1060  *
// 1061  * @param   level = new level to move to
// 1062  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
// 1063  *
// 1064  * @return  none
// 1065  */
// 1066 static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
// 1067 {
// 1068   // there is a hiearchy of the amount of time to use for transistioning
// 1069   // check each one in turn. If none of defaults are set, then use fastest
// 1070   // time possible.
// 1071   if ( time == 0xFFFF )
// 1072   {
// 1073     // use On or Off Transition Time if set (not 0xffff)
// 1074     if ( zclSampleLight_OnOff == LIGHT_ON )
// 1075     {
// 1076       time = zclSampleLight_LevelOffTransitionTime;
// 1077     }
// 1078     else
// 1079     {
// 1080       time = zclSampleLight_LevelOnTransitionTime;
// 1081     }
// 1082 
// 1083     // else use OnOffTransitionTime if set (not 0xffff)
// 1084     if ( time == 0xFFFF )
// 1085     {
// 1086       time = zclSampleLight_LevelOnOffTransitionTime;
// 1087     }
// 1088 
// 1089     // else as fast as possible
// 1090     if ( time == 0xFFFF )
// 1091     {
// 1092       time = 1;
// 1093     }
// 1094   }
// 1095 
// 1096   if ( !time )
// 1097   {
// 1098     time = 1; // as fast as possible
// 1099   }
// 1100 
// 1101   return ( time );
// 1102 }
// 1103 
// 1104 /*********************************************************************
// 1105  * @fn      zclSampleLight_DefaultMove
// 1106  *
// 1107  * @brief   We were turned on/off. Use default time to move to on or off.
// 1108  *
// 1109  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
// 1110  *
// 1111  * @return  none
// 1112  */
// 1113 static void zclSampleLight_DefaultMove( void )
// 1114 {
// 1115   uint8  newLevel;
// 1116   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
// 1117   uint16 time;
// 1118 
// 1119   // if moving to on position, move to on level
// 1120   if ( zclSampleLight_OnOff )
// 1121   {
// 1122     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1123     {
// 1124       // The last Level (before going OFF) should be used)
// 1125       newLevel = zclSampleLight_LevelLastLevel;
// 1126     }
// 1127     else
// 1128     {
// 1129       newLevel = zclSampleLight_LevelOnLevel;
// 1130     }
// 1131 
// 1132     time = zclSampleLight_LevelOnTransitionTime;
// 1133   }
// 1134   else
// 1135   {
// 1136     newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1137 
// 1138     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1139     {
// 1140       // Save the current Level before going OFF to use it when the light turns ON
// 1141       // it should be back to this level
// 1142       zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
// 1143     }
// 1144 
// 1145     time = zclSampleLight_LevelOffTransitionTime;
// 1146   }
// 1147 
// 1148   // else use OnOffTransitionTime if set (not 0xffff)
// 1149   if ( time == 0xFFFF )
// 1150   {
// 1151     time = zclSampleLight_LevelOnOffTransitionTime;
// 1152   }
// 1153 
// 1154   // else as fast as possible
// 1155   if ( time == 0xFFFF )
// 1156   {
// 1157     time = 1;
// 1158   }
// 1159 
// 1160   // calculate rate based on time (int 10ths) for full transition (1-254)
// 1161   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
// 1162 
// 1163   // start up state machine.
// 1164   zclSampleLight_WithOnOff = TRUE;
// 1165   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1166 }
// 1167 
// 1168 /*********************************************************************
// 1169  * @fn      zclSampleLight_AdjustLightLevel
// 1170  *
// 1171  * @brief   Called each 10th of a second while state machine running
// 1172  *
// 1173  * @param   none
// 1174  *
// 1175  * @return  none
// 1176  */
// 1177 static void zclSampleLight_AdjustLightLevel( void )
// 1178 {
// 1179   // one tick (10th of a second) less
// 1180   if ( zclSampleLight_LevelRemainingTime )
// 1181   {
// 1182     --zclSampleLight_LevelRemainingTime;
// 1183   }
// 1184 
// 1185   // no time left, done
// 1186   if ( zclSampleLight_LevelRemainingTime == 0)
// 1187   {
// 1188     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
// 1189   }
// 1190 
// 1191   // still time left, keep increment/decrementing
// 1192   else
// 1193   {
// 1194     if ( zclSampleLight_NewLevelUp )
// 1195     {
// 1196       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
// 1197     }
// 1198     else
// 1199     {
// 1200       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
// 1201     }
// 1202     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
// 1203   }
// 1204 
// 1205 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1206   zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
// 1207 #endif
// 1208 
// 1209   // also affect on/off
// 1210   if ( zclSampleLight_WithOnOff )
// 1211   {
// 1212     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
// 1213     {
// 1214       zclSampleLight_OnOff = LIGHT_ON;
// 1215 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1216       ENABLE_LAMP;
// 1217 #endif
// 1218     }
// 1219     else
// 1220     {
// 1221       zclSampleLight_OnOff = LIGHT_OFF;
// 1222 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1223       DISABLE_LAMP;
// 1224 #endif
// 1225     }
// 1226   }
// 1227 
// 1228   // display light level as we go
// 1229   zclSampleLight_DisplayLight( );
// 1230 
// 1231   // keep ticking away
// 1232   if ( zclSampleLight_LevelRemainingTime )
// 1233   {
// 1234     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1235   }
// 1236 }
// 1237 
// 1238 /*********************************************************************
// 1239  * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1240  *
// 1241  * @brief   Callback from the ZCL General Cluster Library when
// 1242  *          it received a LevelControlMoveToLevel Command for this application.
// 1243  *
// 1244  * @param   pCmd - ZigBee command parameters
// 1245  *
// 1246  * @return  none
// 1247  */
// 1248 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
// 1249 {
// 1250   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1251   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
// 1252 }
// 1253 
// 1254 /*********************************************************************
// 1255  * @fn      zclSampleLight_LevelControlMoveCB
// 1256  *
// 1257  * @brief   Callback from the ZCL General Cluster Library when
// 1258  *          it received a LevelControlMove Command for this application.
// 1259  *
// 1260  * @param   pCmd - ZigBee command parameters
// 1261  *
// 1262  * @return  none
// 1263  */
// 1264 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
// 1265 {
// 1266   uint8 newLevel;
// 1267   uint32 rate;
// 1268 
// 1269   // convert rate from units per second to units per tick (10ths of seconds)
// 1270   // and move at that right up or down
// 1271   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1272 
// 1273   if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1274   {
// 1275     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1276   }
// 1277   else
// 1278   {
// 1279     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1280   }
// 1281 
// 1282   rate = (uint32)100 * pCmd->rate;
// 1283   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1284 }
// 1285 
// 1286 /*********************************************************************
// 1287  * @fn      zclSampleLight_LevelControlStepCB
// 1288  *
// 1289  * @brief   Callback from the ZCL General Cluster Library when
// 1290  *          it received an On/Off Command for this application.
// 1291  *
// 1292  * @param   pCmd - ZigBee command parameters
// 1293  *
// 1294  * @return  none
// 1295  */
// 1296 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1297 {
// 1298   uint8 newLevel;
// 1299 
// 1300   // determine new level, but don't exceed boundaries
// 1301   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1302   {
// 1303     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1304     {
// 1305       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1306     }
// 1307     else
// 1308     {
// 1309       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1310     }
// 1311   }
// 1312   else
// 1313   {
// 1314     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1315     {
// 1316       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1317     }
// 1318     else
// 1319     {
// 1320       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1321     }
// 1322   }
// 1323 
// 1324   // move to the new level
// 1325   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1326   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1327 }
// 1328 
// 1329 /*********************************************************************
// 1330  * @fn      zclSampleLight_LevelControlStopCB
// 1331  *
// 1332  * @brief   Callback from the ZCL General Cluster Library when
// 1333  *          it received an Level Control Stop Command for this application.
// 1334  *
// 1335  * @param   pCmd - ZigBee command parameters
// 1336  *
// 1337  * @return  none
// 1338  */
// 1339 static void zclSampleLight_LevelControlStopCB( void )
// 1340 {
// 1341   // stop immediately
// 1342   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1343   zclSampleLight_LevelRemainingTime = 0;
// 1344 }
// 1345 #endif
// 1346 
// 1347 /******************************************************************************
// 1348  *
// 1349  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1350  *
// 1351  *****************************************************************************/
// 1352 
// 1353 /*********************************************************************
// 1354  * @fn      zclSampleLight_ProcessIncomingMsg
// 1355  *
// 1356  * @brief   Process ZCL Foundation incoming message
// 1357  *
// 1358  * @param   pInMsg - pointer to the received message
// 1359  *
// 1360  * @return  none
// 1361  */
// 1362 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1363 {
// 1364   switch ( pInMsg->zclHdr.commandID )
// 1365   {
// 1366 #ifdef ZCL_READ
// 1367     case ZCL_CMD_READ_RSP:
// 1368       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1369       break;
// 1370 #endif
// 1371 #ifdef ZCL_WRITE
// 1372     case ZCL_CMD_WRITE_RSP:
// 1373       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1374       break;
// 1375 #endif
// 1376 #ifdef ZCL_REPORT
// 1377     // Attribute Reporting implementation should be added here
// 1378     case ZCL_CMD_CONFIG_REPORT:
// 1379       // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
// 1380       break;
// 1381 
// 1382     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1383       // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
// 1384       break;
// 1385 
// 1386     case ZCL_CMD_READ_REPORT_CFG:
// 1387       // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
// 1388       break;
// 1389 
// 1390     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1391       // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
// 1392       break;
// 1393 
// 1394     case ZCL_CMD_REPORT:
// 1395       // zclSampleLight_ProcessInReportCmd( pInMsg );
// 1396       break;
// 1397 #endif
// 1398     case ZCL_CMD_DEFAULT_RSP:
// 1399       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1400       break;
// 1401 #ifdef ZCL_DISCOVER
// 1402     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1403       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1404       break;
// 1405 
// 1406     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1407       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1408       break;
// 1409 
// 1410     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1411       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1412       break;
// 1413 
// 1414     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1415       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1416       break;
// 1417 #endif
// 1418     default:
// 1419       break;
// 1420   }
// 1421 
// 1422   if ( pInMsg->attrCmd )
// 1423     osal_mem_free( pInMsg->attrCmd );
// 1424 }
// 1425 
// 1426 #ifdef ZCL_READ
// 1427 /*********************************************************************
// 1428  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1429  *
// 1430  * @brief   Process the "Profile" Read Response Command
// 1431  *
// 1432  * @param   pInMsg - incoming message to process
// 1433  *
// 1434  * @return  none
// 1435  */
// 1436 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1437 {
// 1438   zclReadRspCmd_t *readRspCmd;
// 1439   uint8 i;
// 1440 
// 1441   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1442   for (i = 0; i < readRspCmd->numAttr; i++)
// 1443   {
// 1444     // Notify the originator of the results of the original read attributes
// 1445     // attempt and, for each successfull request, the value of the requested
// 1446     // attribute
// 1447   }
// 1448 
// 1449   return ( TRUE );
// 1450 }
// 1451 #endif // ZCL_READ
// 1452 
// 1453 #ifdef ZCL_WRITE
// 1454 /*********************************************************************
// 1455  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1456  *
// 1457  * @brief   Process the "Profile" Write Response Command
// 1458  *
// 1459  * @param   pInMsg - incoming message to process
// 1460  *
// 1461  * @return  none
// 1462  */
// 1463 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1464 {
// 1465   zclWriteRspCmd_t *writeRspCmd;
// 1466   uint8 i;
// 1467 
// 1468   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1469   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1470   {
// 1471     // Notify the device of the results of the its original write attributes
// 1472     // command.
// 1473   }
// 1474 
// 1475   return ( TRUE );
// 1476 }
// 1477 #endif // ZCL_WRITE
// 1478 
// 1479 /*********************************************************************
// 1480  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1481  *
// 1482  * @brief   Process the "Profile" Default Response Command
// 1483  *
// 1484  * @param   pInMsg - incoming message to process
// 1485  *
// 1486  * @return  none
// 1487  */
// 1488 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1489 {
// 1490   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1491 
// 1492   // Device is notified of the Default Response command.
// 1493   (void)pInMsg;
// 1494 
// 1495   return ( TRUE );
// 1496 }
// 1497 
// 1498 #ifdef ZCL_DISCOVER
// 1499 /*********************************************************************
// 1500  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1501  *
// 1502  * @brief   Process the Discover Commands Response Command
// 1503  *
// 1504  * @param   pInMsg - incoming message to process
// 1505  *
// 1506  * @return  none
// 1507  */
// 1508 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1509 {
// 1510   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1511   uint8 i;
// 1512 
// 1513   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1514   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1515   {
// 1516     // Device is notified of the result of its attribute discovery command.
// 1517   }
// 1518 
// 1519   return ( TRUE );
// 1520 }
// 1521 
// 1522 /*********************************************************************
// 1523  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1524  *
// 1525  * @brief   Process the "Profile" Discover Attributes Response Command
// 1526  *
// 1527  * @param   pInMsg - incoming message to process
// 1528  *
// 1529  * @return  none
// 1530  */
// 1531 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1532 {
// 1533   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1534   uint8 i;
// 1535 
// 1536   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1537   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1538   {
// 1539     // Device is notified of the result of its attribute discovery command.
// 1540   }
// 1541 
// 1542   return ( TRUE );
// 1543 }
// 1544 
// 1545 /*********************************************************************
// 1546  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1547  *
// 1548  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1549  *
// 1550  * @param   pInMsg - incoming message to process
// 1551  *
// 1552  * @return  none
// 1553  */
// 1554 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1555 {
// 1556   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1557   uint8 i;
// 1558 
// 1559   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1560   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1561   {
// 1562     // Device is notified of the result of its attribute discovery command.
// 1563   }
// 1564 
// 1565   return ( TRUE );
// 1566 }
// 1567 #endif // ZCL_DISCOVER
// 1568 
// 1569 #if ZCL_EZMODE
// 1570 /*********************************************************************
// 1571  * @fn      zclSampleLight_ProcessZDOMsgs
// 1572  *
// 1573  * @brief   Called when this node receives a ZDO/ZDP response.
// 1574  *
// 1575  * @param   none
// 1576  *
// 1577  * @return  status
// 1578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1579 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
zclSampleLight_ProcessZDOMsgs:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
        CODE
// 1580 {
        FUNCALL zclSampleLight_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 286, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 286, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 284, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 284, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 272, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 268, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 268, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 266, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 266, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 252
        MOV     A,#0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 266)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1581   zclEZMode_ActionData_t data;
// 1582   char msgPrint[200];
// 1583   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1584   ZDO_DeviceAnnce_t *pDeviceAnnce;
// 1585   //for ieee req
// 1586   ZDO_NwkIEEEAddrResp_t *pNwkIEEEAddrResp;
// 1587 
// 1588   // Let EZ-Mode know of the Simple Descriptor Response
// 1589   if ( pMsg->clusterID == Match_Desc_rsp )
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x6
        XRL     A,R0
        JNZ     ??zclSampleLight_ProcessZDOMsgs_0
        MOV     A,#-0x80
        XRL     A,R1
??zclSampleLight_ProcessZDOMsgs_0:
        JNZ     ??zclSampleLight_ProcessZDOMsgs_1
// 1590   {
// 1591     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1592     data.pMatchDescRsp = pMatchDescRsp;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1593     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x5
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
// 1594     osal_mem_free( pMatchDescRsp );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
// 1595   }
// 1596   else if(pMsg->clusterID == Device_annce){
??zclSampleLight_ProcessZDOMsgs_1:
        MOV     A,#0x13
        XRL     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??zclSampleLight_ProcessZDOMsgs_3 & 0xFFFF
// 1597     
// 1598     
// 1599     pDeviceAnnce = osal_mem_alloc(sizeof(ZDO_DeviceAnnce_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1600     ZDO_ParseDeviceAnnce(pMsg,pDeviceAnnce);
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
// 1601     
// 1602     sprintf(msgPrint, "CMD{\"CMD\":\"ANNCE\",\"IEEEADDR\":\"%x:%x:%x:%x:%x:%x:%x:%x\",\"SHORTADDR\":\"0x%x\",\"CAP\":\"0x%x\"}\r\n",pDeviceAnnce->extAddr[7],pDeviceAnnce->extAddr[6],pDeviceAnnce->extAddr[5],pDeviceAnnce->extAddr[4],pDeviceAnnce->extAddr[3],pDeviceAnnce->extAddr[2],pDeviceAnnce->extAddr[1],pDeviceAnnce->extAddr[0], pDeviceAnnce->nwkAddr,pDeviceAnnce->capabilities);
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 268)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 270)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine19_0 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 274)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 276)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 278)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 280)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 282)
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 284)
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 286)
        MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">` & 0xff
        MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">` >> 8) & 0xff
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 266)
// 1603     HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
        ; Setup parameters for call to function strlen
        LJMP    ??zclSampleLight_ProcessZDOMsgs_4 & 0xFFFF
// 1604     //char sam[10] = "CMD ANNCE IEEE:\n";
// 1605     
// 1606     //HalUARTWrite(MT_UART_DEFAULT_PORT, sam, strlen(sam));
// 1607     //uint8 *chldExtAddr;
// 1608     //chldExtAddr = osal_mem_alloc(8);
// 1609     //ZDO_DeviceAnnce_t msg;
// 1610     //ZDO_ParseDeviceAnnce( pMsg, &msg);
// 1611     //memcpy(&chldExtAddr, msg.extAddr, Z_EXTADDR_LEN);
// 1612     //debug_str("Device_annce");
// 1613   }
// 1614   else if(pMsg->clusterID == IEEE_addr_rsp){
??zclSampleLight_ProcessZDOMsgs_3:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zclSampleLight_ProcessZDOMsgs_5
        MOV     A,#-0x80
        XRL     A,R1
??zclSampleLight_ProcessZDOMsgs_5:
        JZ      $+5
        LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
// 1615     
// 1616     
// 1617     
// 1618     pNwkIEEEAddrResp = ZDO_ParseAddrRsp( pMsg );
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1619     if( pNwkIEEEAddrResp->status == ZDO_SUCCESS ){
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
// 1620       
// 1621       if( pNwkIEEEAddrResp->numAssocDevs == 0 ){
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     A,R6
        ADD     A,#0xb
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        JNZ     ??zclSampleLight_ProcessZDOMsgs_6
// 1622         
// 1623         sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"STATUS\":0,\"SHORTADDR\":\"0x%x\",\"Type\":0,\"IEEEADDR\":\"%x:%x:%x:%x:%x:%x:%x:%x\"}\r\n", pNwkIEEEAddrResp->nwkAddr, pNwkIEEEAddrResp->extAddr[7], pNwkIEEEAddrResp->extAddr[6], pNwkIEEEAddrResp->extAddr[5], pNwkIEEEAddrResp->extAddr[4], pNwkIEEEAddrResp->extAddr[3], pNwkIEEEAddrResp->extAddr[2], pNwkIEEEAddrResp->extAddr[1], pNwkIEEEAddrResp->extAddr[0]);
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 268)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 270)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 274)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 276)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 278)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 280)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 282)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 284)
        MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">` & 0xff
        MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">` >> 8) & 0xff
        MOV     A,#0x46
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x12
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 266)
// 1624         HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
        ; Setup parameters for call to function strlen
        LJMP    ??zclSampleLight_ProcessZDOMsgs_4 & 0xFFFF
// 1625         
// 1626       }
// 1627       else if( pNwkIEEEAddrResp->numAssocDevs > 0 ){
// 1628         
// 1629         char temp[50];
// 1630         
// 1631         sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"STATUS\":0,\"SHORTADDR\":\"0x%x\",\"Type\":1,\"STID\":\"0x%x\",\"NumAsso\":\"0x%x\",\"TB\":[", pNwkIEEEAddrResp->nwkAddr, pNwkIEEEAddrResp->startIndex, pNwkIEEEAddrResp->numAssocDevs);
??zclSampleLight_ProcessZDOMsgs_6:
        ; Setup parameters for call to function sprintf
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 268)
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 270)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1` & 0xff
        MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1` >> 8) & 0xff
        MOV     A,#0x3a
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 266)
// 1632         
// 1633         for(uint8 i = 0 ; i < pNwkIEEEAddrResp->numAssocDevs ; i++){
        MOV     ?V2,#0x0
        SJMP    ??zclSampleLight_ProcessZDOMsgs_7
// 1634         
// 1635           sprintf(temp, "\"0x%x\",", pNwkIEEEAddrResp->devList[i]);
??zclSampleLight_ProcessZDOMsgs_8:
        ; Setup parameters for call to function sprintf
        MOV     R0,?V2
        MOV     A,R0
        ADD     A,R0
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 268)
        MOV     R4,#`?<Constant "\\"0x%x\\",">` & 0xff
        MOV     R5,#(`?<Constant "\\"0x%x\\",">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 266)
// 1636           strcat(msgPrint,temp);
        ; Setup parameters for call to function strcat
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
// 1637         }
        INC     ?V2
??zclSampleLight_ProcessZDOMsgs_7:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V2
        CLR     C
        SUBB    A,R0
        JC      ??zclSampleLight_ProcessZDOMsgs_8
// 1638         
// 1639         sprintf(temp, "]}");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "]}">` & 0xff
        MOV     R5,#(`?<Constant "]}">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
// 1640         strcat(msgPrint,temp);
        ; Setup parameters for call to function strcat
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
// 1641         
// 1642         HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
        ; Setup parameters for call to function strlen
??zclSampleLight_ProcessZDOMsgs_4:
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
// 1643       
// 1644       }
// 1645       
// 1646     }
// 1647     /*
// 1648     else{
// 1649       
// 1650       sprintf(msgPrint, "CMD{CMD:\"IEEEREQ\",STATUS:%d,SRCADDR:\"%x\"}\r\n", pNwkIEEEAddrResp->status, pNwkIEEEAddrResp->nwkAddr);
// 1651       HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
// 1652       
// 1653     }*/
// 1654   
// 1655   }
// 1656   
// 1657 }
??zclSampleLight_ProcessZDOMsgs_2:
        MOV     A,#-0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 266)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 268)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 284)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 266)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond24) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond24) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond24) CFA_SP SP+-7
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOV     DPTR,#zclSampleLight_IdentifyTime
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_6
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclSampleLight_OnOffCB
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 266)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclSampleLight_event_loop
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond30) CFA_SP SP+-7
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        INC     DPTR
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        INC     DPTR
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 274)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        INC     DPTR
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 272)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 274)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        INC     DPTR
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 270)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 272)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 274)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        INC     DPTR
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 268)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 270)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 272)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 274)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-2
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond65 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 280)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 282)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        INC     DPTR
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 282)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        INC     DPTR
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 282)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        INC     DPTR
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine18_0:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 274)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 282)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        INC     DPTR
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82
        REQUIRE ??Subroutine19_0
        ; // Fall through to label ??Subroutine19_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine19_0:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 272)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 274)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 282)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        INC     DPTR
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine20_0:
          CFI Block cfiCond90 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 270)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 272)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 274)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 282)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function zclSampleLight_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 268)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 270)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 272)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 274)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 276)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 280)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zclSampleLight_ProcessZDOMsgs
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 282)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        RET
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106
// 1658 
// 1659 /*********************************************************************
// 1660  * @fn      zclSampleLight_EZModeCB
// 1661  *
// 1662  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1663 *           going on during EZ-Mode steering/finding/binding.
// 1664  *
// 1665  * @param   state - an
// 1666  *
// 1667  * @return  none
// 1668  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1669 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
zclSampleLight_EZModeCB:
          CFI Block cfiBlock107 Using cfiCommon0
          CFI Function zclSampleLight_EZModeCB
        CODE
// 1670 {
        FUNCALL zclSampleLight_EZModeCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1671 #ifdef LCD_SUPPORTED
// 1672   char *pStr;
// 1673   uint8 err;
// 1674 #endif
// 1675 
// 1676   // time to go into identify mode
// 1677   if ( state == EZMODE_STATE_IDENTIFYING )
        MOV     A,#0x4
        XRL     A,R6
        JNZ     ??zclSampleLight_EZModeCB_0
// 1678   {
// 1679 #ifdef LCD_SUPPORTED
// 1680     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1681 #endif
// 1682 
// 1683     zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,#-0x4c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1684     zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
        SJMP    ??zclSampleLight_EZModeCB_1
// 1685   }
// 1686 
// 1687   // autoclosing, show what happened (success, cancelled, etc...)
// 1688   if( state == EZMODE_STATE_AUTOCLOSE )
// 1689   {
// 1690 #ifdef LCD_SUPPORTED
// 1691     pStr = NULL;
// 1692     err = pData->sAutoClose.err;
// 1693     if ( err == EZMODE_ERR_SUCCESS )
// 1694     {
// 1695       pStr = "EZMode: Success";
// 1696     }
// 1697     else if ( err == EZMODE_ERR_NOMATCH )
// 1698     {
// 1699       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1700     }
// 1701     if ( pStr )
// 1702     {
// 1703       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1704       {
// 1705         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1706       }
// 1707     }
// 1708 #endif
// 1709   }
// 1710 
// 1711   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1712   if( state == EZMODE_STATE_FINISH )
??zclSampleLight_EZModeCB_0:
        MOV     A,#0x63
        XRL     A,R6
        JNZ     ??zclSampleLight_EZModeCB_1
// 1713   {
// 1714     // turn off identify mode
// 1715     zclSampleLight_IdentifyTime = 0;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1716     zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
// 1717 
// 1718 #ifdef LCD_SUPPORTED
// 1719     // if successful, inform user which nwkaddr/ep we bound to
// 1720     pStr = NULL;
// 1721     err = pData->sFinish.err;
// 1722     if( err == EZMODE_ERR_SUCCESS )
// 1723     {
// 1724       // already stated on autoclose
// 1725     }
// 1726     else if ( err == EZMODE_ERR_CANCELLED )
// 1727     {
// 1728       pStr = "EZMode: Cancel";
// 1729     }
// 1730     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1731     {
// 1732       pStr = "EZMode: BadParm";
// 1733     }
// 1734     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1735     {
// 1736       pStr = "EZMode: TimeOut";
// 1737     }
// 1738     if ( pStr )
// 1739     {
// 1740       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1741       {
// 1742         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1743       }
// 1744     }
// 1745 #endif
// 1746     // show main UI screen 3 seconds after binding
// 1747     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_bb8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1748   }
// 1749 }
??zclSampleLight_EZModeCB_1:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock107

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 8
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW `??zclSampleLight_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIdentifyTimeChange::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_EZModeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_EZModeCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">`:
        DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
        DB 22H, 3AH, 22H, 41H, 4EH, 4EH, 43H, 45H
        DB 22H, 2CH, 22H, 49H, 45H, 45H, 45H, 41H
        DB 44H, 44H, 52H, 22H, 3AH, 22H, 25H, 78H
        DB 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH, 25H
        DB 78H, 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH
        DB 25H, 78H, 3AH, 25H, 78H, 22H, 2CH, 22H
        DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
        DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
        DB 22H, 2CH, 22H, 43H, 41H, 50H, 22H, 3AH
        DB 22H, 30H, 78H, 25H, 78H, 22H, 7DH, 0DH
        DB 0AH, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">`:
        DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
        DB 22H, 3AH, 22H, 49H, 45H, 45H, 45H, 52H
        DB 45H, 51H, 22H, 2CH, 22H, 53H, 54H, 41H
        DB 54H, 55H, 53H, 22H, 3AH, 30H, 2CH, 22H
        DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
        DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
        DB 22H, 2CH, 22H, 54H, 79H, 70H, 65H, 22H
        DB 3AH, 30H, 2CH, 22H, 49H, 45H, 45H, 45H
        DB 41H, 44H, 44H, 52H, 22H, 3AH, 22H, 25H
        DB 78H, 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH
        DB 25H, 78H, 3AH, 25H, 78H, 3AH, 25H, 78H
        DB 3AH, 25H, 78H, 3AH, 25H, 78H, 22H, 7DH
        DB 0DH, 0AH, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1`:
        DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
        DB 22H, 3AH, 22H, 49H, 45H, 45H, 45H, 52H
        DB 45H, 51H, 22H, 2CH, 22H, 53H, 54H, 41H
        DB 54H, 55H, 53H, 22H, 3AH, 30H, 2CH, 22H
        DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
        DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
        DB 22H, 2CH, 22H, 54H, 79H, 70H, 65H, 22H
        DB 3AH, 31H, 2CH, 22H, 53H, 54H, 49H, 44H
        DB 22H, 3AH, 22H, 30H, 78H, 25H, 78H, 22H
        DB 2CH, 22H, 4EH, 75H, 6DH, 41H, 73H, 73H
        DB 6FH, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
        DB 22H, 2CH, 22H, 54H, 42H, 22H, 3AH, 5BH
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"0x%x\\",">`:
        DB "\"0x%x\","

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "]}">`:
        DB "]}"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        END
// 1750 #endif // ZCL_EZMODE
// 1751 
// 1752 /****************************************************************************
// 1753 ****************************************************************************/
// 1754 
// 1755 
// 
// 1 768 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//    39 bytes in segment XDATA_I
//    39 bytes in segment XDATA_ID
//   315 bytes in segment XDATA_ROM_C
//    16 bytes in segment XDATA_Z
// 
// 1 873 bytes of CODE  memory
//   307 bytes of CONST memory (+ 8 bytes shared)
//    55 bytes of XDATA memory
//
//Errors: none
//Warnings: 3
