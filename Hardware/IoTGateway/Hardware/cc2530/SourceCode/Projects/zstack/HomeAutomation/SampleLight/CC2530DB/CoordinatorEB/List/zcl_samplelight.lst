###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Jun/2016  19:20:59
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#    Command line       =  
#        -f
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
#        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
#        xZDO_IEEEADDR_REQUEST -D MT_UART_DEFAULT_MAX_TX_BUFF=255 -D
#        xHAL_PA_LNA -lC
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
#        -lA
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_samplelight.lst
#    Object file        =  
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\zcl_samplelight.r51
#
###############################################################################

H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "nwk_util.h"
     75          
     76          #include "zcl.h"
     77          #include "zcl_general.h"
     78          #include "zcl_ha.h"
     79          #include "zcl_ezmode.h"
     80          #include "zcl_diagnostic.h"
     81          
     82          #include "zcl_samplelight.h"
     83          
     84          #include "onboard.h"

  #define xHAL_PA_LNA
          ^
"H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Components\hal\target\CC2530EB\hal_board_cfg.h",61  Warning[Pe047]: 
          incompatible redefinition of macro "xHAL_PA_LNA"
     85          
     86          /* HAL */
     87          #include "hal_lcd.h"
     88          #include "hal_led.h"
     89          #include "hal_key.h"
     90          
     91          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     92                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     93          #include "zgp_translationtable.h"
     94            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
     95              #define ZGP_AUTO_TT
     96            #endif
     97          #endif
     98          
     99          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    100          #include "math.h"
    101          #include "hal_timer.h"
    102          #endif
    103          
    104          #include "NLMEDE.h"
    105          
    106          #include "DebugTrace.h"
    107          #include "string.h"
    108          #include "MT_UART.h"
    109          #include "stdio.h"
    110          
    111          /*********************************************************************
    112           * MACROS
    113           */
    114          
    115          /*********************************************************************
    116           * CONSTANTS
    117           */
    118          #if (defined HAL_BOARD_ZLIGHT)
    119          #define LEVEL_MAX                 0xFE
    120          #define LEVEL_MIN                 0x0
    121          #define GAMMA_VALUE               2
    122          #define PWM_FULL_DUTY_CYCLE       1000
    123          #elif (defined HAL_PWM)
    124          #define LEVEL_MAX                 0xFE
    125          #define LEVEL_MIN                 0x0
    126          #define GAMMA_VALUE               2
    127          #define PWM_FULL_DUTY_CYCLE       100
    128          #endif
    129          
    130          /*********************************************************************
    131           * TYPEDEFS
    132           */
    133          
    134          /*********************************************************************
    135           * GLOBAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          
    140          void test(void);
    141          
    142          
    143          /*********************************************************************
    144           * GLOBAL FUNCTIONS
    145           */
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    151          
    152          #ifdef ZCL_EZMODE
    153          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    154          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    155          
    156          
    157          // register EZ-Mode with task information (timeout events, callback, etc...)

   \                                 In  segment XDATA_ROM_C, align 1
    158          static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
   \                     zclSampleLight_RegisterEZModeData:
   \   000000   ....         DW zclSampleLight_TaskID
   \   000002   0800         DW 8
   \   000004   0400         DW 4
   \   000006   ....         DW zclSampleLightSeqNum
   \   000008   ....         DW `??zclSampleLight_EZModeCB::?relay`
    159          {
    160            &zclSampleLight_TaskID,
    161            SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    162            SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    163            &zclSampleLightSeqNum,
    164            zclSampleLight_EZModeCB
    165          };
    166          
    167          #else
    168          uint16 bindingInClusters[] =
    169          {
    170            ZCL_CLUSTER_ID_GEN_ON_OFF
    171          #ifdef ZCL_LEVEL_CTRL
    172            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    173          #endif
    174          };
    175          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    176          
    177          #endif  // ZCL_EZMODE
    178          
    179          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    181          {
    182            SAMPLELIGHT_ENDPOINT,
    183            &zclSampleLight_TaskID,
    184            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    185            (afNetworkLatencyReq_t)0            // No Network Latency req
    186          };
    187          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    192          devStates_t zclSampleLight_NwkState = DEV_INIT;
   \                     zclSampleLight_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleLight_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    193          
    194          #if ZCL_LEVEL_CTRL
    195          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
    196          uint8 zclSampleLight_NewLevel;        // new level when done moving
    197          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
    198          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
    199          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
    200          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
    201          #endif
    202          
    203          /*********************************************************************
    204           * LOCAL FUNCTIONS
    205           */
    206          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    207          static void zclSampleLight_BasicResetCB( void );
    208          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
    209          static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    210          static void zclSampleLight_OnOffCB( uint8 cmd );
    211          static void zclSampleLight_ProcessIdentifyTimeChange( void );
    212          #ifdef ZCL_LEVEL_CTRL
    213          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    214          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    215          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    216          static void zclSampleLight_LevelControlStopCB( void );
    217          static void zclSampleLight_DefaultMove( void );
    218          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    219          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    220          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    221          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    222          static void zclSampleLight_AdjustLightLevel( void );
    223          #endif
    224          
    225          // app display functions
    226          static void zclSampleLight_LcdDisplayUpdate( void );
    227          #ifdef LCD_SUPPORTED
    228          static void zclSampleLight_LcdDisplayMainMode( void );
    229          static void zclSampleLight_LcdDisplayHelpMode( void );
    230          #endif
    231          static void zclSampleLight_DisplayLight( void );
    232          
    233          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    234          void zclSampleLight_UpdateLampLevel( uint8 level );
    235          #endif
    236          
    237          // Functions to process ZCL Foundation incoming Command/Response messages
    238          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    239          #ifdef ZCL_READ
    240          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    241          #endif
    242          #ifdef ZCL_WRITE
    243          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    244          #endif
    245          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    246          #ifdef ZCL_DISCOVER
    247          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    248          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    249          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    250          #endif
    251          
    252          /*********************************************************************
    253           * STATUS STRINGS
    254           */
    255          #ifdef LCD_SUPPORTED
    256          const char sDeviceName[]   = "  Sample Light";
    257          const char sClearLine[]    = " ";
    258          const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
    259          const char sSwEZMode[]     = "SW2: EZ-Mode";
    260          char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
    261          const char sLightOn[]      = "    LIGHT ON ";
    262          const char sLightOff[]     = "    LIGHT OFF";
    263           #if ZCL_LEVEL_CTRL
    264           char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
    265           #endif
    266          #endif
    267          
    268          /*********************************************************************
    269           * ZCL General Profile Callback table
    270           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    271          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   000020                REQUIRE __INIT_XDATA_I
    272          {
    273            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    274            zclSampleLight_IdentifyCB,              // Identify command
    275          #ifdef ZCL_EZMODE
    276            NULL,                                   // Identify EZ-Mode Invoke command
    277            NULL,                                   // Identify Update Commission State command
    278          #endif
    279            NULL,                                   // Identify Trigger Effect command
    280            zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
    281            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    282            NULL,                                   // On/Off cluster enhanced command Off with Effect
    283            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    284            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    285          #ifdef ZCL_LEVEL_CTRL
    286            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    287            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    288            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    289            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    290          #endif
    291          #ifdef ZCL_GROUPS
    292            NULL,                                   // Group Response commands
    293          #endif
    294          #ifdef ZCL_SCENES
    295            NULL,                                  // Scene Store Request command
    296            NULL,                                  // Scene Recall Request command
    297            NULL,                                  // Scene Response command
    298          #endif
    299          #ifdef ZCL_ALARMS
    300            NULL,                                  // Alarm (Response) commands
    301          #endif
    302          #ifdef SE_UK_EXT
    303            NULL,                                  // Get Event Log command
    304            NULL,                                  // Publish Event Log command
    305          #endif
    306            NULL,                                  // RSSI Location command
    307            NULL                                   // RSSI Location Response command
    308          };
    309          
    310          /*********************************************************************
    311           * @fn          zclSampleLight_Init
    312           *
    313           * @brief       Initialization function for the zclGeneral layer.
    314           *
    315           * @param       none
    316           *
    317           * @return      none
    318           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    319          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    320          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    321            zclSampleLight_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    322          
    323            // Set destination address to indirect
    324            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    325            zclSampleLight_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    326            zclSampleLight_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    327          
    328            // This app is part of the Home Automation Profile
    329            zclHA_Init( &zclSampleLight_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zclSampleLight_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    330          
    331            // Register the ZCL General Cluster Library callback functions
    332            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
   \   00001F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001F   7A..         MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000021   7B..         MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000023   7908         MOV     R1,#0x8
   \   000025   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    333          
    334            // Register the application's attribute list
    335            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
   \   000028                ; Setup parameters for call to function zcl_registerAttrList
   \   000028   7C..         MOV     R4,#zclSampleLight_Attrs & 0xff
   \   00002A   7D..         MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   00002C   90....       MOV     DPTR,#zclSampleLight_NumAttributes
   \   00002F   E4           CLR     A
   \   000030   93           MOVC    A,@A+DPTR
   \   000031   FA           MOV     R2,A
   \   000032   7908         MOV     R1,#0x8
   \   000034   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    336          
    337            // Register the Application to receive the unprocessed Foundation command/response messages
    338            zcl_registerForMsg( zclSampleLight_TaskID );
   \   000037                ; Setup parameters for call to function zcl_registerForMsg
   \   000037   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    339          
    340          #ifdef ZCL_DISCOVER
    341            // Register the application's command list
    342            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
    343          #endif
    344          
    345            // Register for all key events - This app will handle all key events
    346            RegisterForKeys( zclSampleLight_TaskID );
   \   00003F                ; Setup parameters for call to function RegisterForKeys
   \   00003F   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    347          
    348            // Register for a test endpoint
    349            afRegister( &sampleLight_TestEp );
   \   000047                ; Setup parameters for call to function afRegister
   \   000047   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   000049   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   00004B   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    350          
    351          #ifdef ZCL_EZMODE
    352            // Register EZ-Mode
    353            zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
   \   00004E                ; Setup parameters for call to function zcl_RegisterEZMode
   \   00004E   7A..         MOV     R2,#zclSampleLight_RegisterEZModeData & 0xff
   \   000050   7B..         MOV     R3,#(zclSampleLight_RegisterEZModeData >> 8) & 0xff
   \   000052   12....       LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
    354          
    355            // Register with the ZDO to receive Match Descriptor Responses
    356            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
   \   000055                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000055   7A06         MOV     R2,#0x6
   \   000057   7B80         MOV     R3,#-0x80
   \   000059   EE           MOV     A,R6
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    357          #endif
    358            
    359            ZDO_RegisterForZDOMsg(task_id, Device_annce );
   \   00005E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00005E   7A13         MOV     R2,#0x13
   \   000060   7B00         MOV     R3,#0x0
   \   000062   EE           MOV     A,R6
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    360            
    361            ZDO_RegisterForZDOMsg(task_id, IEEE_addr_rsp );
   \   000067                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000067   7A01         MOV     R2,#0x1
   \   000069   7B80         MOV     R3,#-0x80
   \   00006B   EE           MOV     A,R6
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    362            
    363            ZDO_RegisterForZDOMsg(task_id, Active_EP_rsp ); 
   \   000070                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000070   7A05         MOV     R2,#0x5
   \   000072   7B80         MOV     R3,#-0x80
   \   000074   EE           MOV     A,R6
   \   000075   F9           MOV     R1,A
   \   000076   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    364          
    365          
    366          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    367            HalTimer1Init( 0 );
    368            halTimer1SetChannelDuty( WHITE_LED, 0 );
    369            halTimer1SetChannelDuty( RED_LED, 0 );
    370            halTimer1SetChannelDuty( BLUE_LED, 0 );
    371            halTimer1SetChannelDuty( GREEN_LED, 0 );
    372          
    373            // find if we are already on a network from NV_RESTORE
    374            uint8 state;
    375            NLME_GetRequest( nwkNwkState, 0, &state );
    376          
    377            if ( state < NWK_ENDDEVICE )
    378            {
    379              // Start EZMode on Start up to avoid button press
    380              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
    381            }
    382          #if ZCL_LEVEL_CTRL
    383            zclSampleLight_DefaultMove();
    384          #endif
    385          #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    386          
    387          #ifdef ZCL_DIAGNOSTIC
    388            // Register the application's callback function to read/write attribute data.
    389            // This is only required when the attribute data format is unknown to ZCL.
    390            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   000079                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   000079   7C00         MOV     R4,#0x0
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7A..         MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
   \   00007F   7B..         MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   000081   7908         MOV     R1,#0x8
   \   000083   12....       LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    391          
    392            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   000086                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   000086   12....       LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
    393            {
    394              // Here the user could start the timer to save Diagnostics to NV
    395            }
    396          #endif
    397          
    398          #ifdef LCD_SUPPORTED
    399            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    400          #endif  // LCD_SUPPORTED
    401          
    402          #ifdef ZGP_AUTO_TT
    403            zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
    404          #endif
    405          }
   \   000089                REQUIRE ?Subroutine0
   \   000089                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    406          
    407          /*********************************************************************
    408           * @fn          zclSample_event_loop
    409           *
    410           * @brief       Event Loop Processor for zclGeneral.
    411           *
    412           * @param       none
    413           *
    414           * @return      none
    415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    417          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    418            afIncomingMSGPacket_t *MSGpkt;
    419          
    420            (void)task_id;  // Intentionally unreferenced parameter
    421          
    422            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7050         JNZ     ??zclSampleLight_event_loop_0
    423            {
    424              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    425              {
    426                switch ( MSGpkt->hdr.event )
    427                {
    428          #ifdef ZCL_EZMODE
    429                  case ZDO_CB_MSG:
    430                    zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    431                    break;
    432          #endif
    433                  case ZCL_INCOMING_MSG:
    434                    // Incoming ZCL Foundation command/response messages
    435                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    436                    break;
    437          
    438                  case KEY_CHANGE:
    439                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    440                    break;
    441          
    442                  case ZDO_STATE_CHANGE:
    443                    zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
    444          
    445                    // now on the network
    446                    if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    447                         (zclSampleLight_NwkState == DEV_ROUTER)   ||
    448                         (zclSampleLight_NwkState == DEV_END_DEVICE) )
    449                    {
    450                      giLightScreenMode = LIGHT_MAINMODE;
    451                      zclSampleLight_LcdDisplayUpdate();
    452          #ifdef ZCL_EZMODE
    453                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    454          #endif // ZCL_EZMODE
    455                    }
    456                    break;
    457          
    458                  default:
    459                    break;
    460                }
    461          
    462                // Release the memory
    463                osal_msg_deallocate( (uint8 *)MSGpkt );
    464              }
    465          
    466              // return unprocessed events
    467              return (events ^ SYS_EVENT_MSG);
    468            }
    469          
    470            if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   4003         JC      $+5
   \   000012   02....       LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
    471            {
    472              if ( zclSampleLight_IdentifyTime > 0 )
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   600C         JZ      ??zclSampleLight_event_loop_2
    473                zclSampleLight_IdentifyTime--;
   \   00001C   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   24FF         ADD     A,#-0x1
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   34FF         ADDC    A,#-0x1
   \   000027   F0           MOVX    @DPTR,A
    474              zclSampleLight_ProcessIdentifyTimeChange();
   \                     ??zclSampleLight_event_loop_2:
   \   000028                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000028   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    475          
    476              return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   00002B   EE           MOV     A,R6
   \   00002C   6401         XRL     A,#0x1
   \   00002E   02....       LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
    477            }
   \                     ??zclSampleLight_event_loop_4:
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000036   F0           MOVX    @DPTR,A
   \   000037   6409         XRL     A,#0x9
   \   000039   600A         JZ      ??zclSampleLight_event_loop_5
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6407         XRL     A,#0x7
   \   00003E   6005         JZ      ??zclSampleLight_event_loop_5
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6406         XRL     A,#0x6
   \   000043   7011         JNZ     ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_5:
   \   000045   90....       MOV     DPTR,#giLightScreenMode
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00004A   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
   \   00004D                ; Setup parameters for call to function zcl_EZModeAction
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   7902         MOV     R1,#0x2
   \   000053   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \                     ??zclSampleLight_event_loop_6:
   \   000056                ; Setup parameters for call to function osal_msg_deallocate
   \   000056   AA..         MOV     R2,?V0
   \   000058   AB..         MOV     R3,?V1
   \   00005A   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   00005D                ; Setup parameters for call to function osal_msg_receive
   \   00005D   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000065   8A..         MOV     ?V0,R2
   \   000067   8B..         MOV     ?V1,R3
   \   000069   EA           MOV     A,R2
   \   00006A   45..         ORL     A,?V1
   \   00006C   6075         JZ      ??zclSampleLight_event_loop_7
   \   00006E   8A82         MOV     DPL,R2
   \   000070   8B83         MOV     DPH,R3
   \   000072   E0           MOVX    A,@DPTR
   \   000073   24CC         ADD     A,#-0x34
   \   000075   6011         JZ      ??zclSampleLight_event_loop_8
   \   000077   2474         ADD     A,#0x74
   \   000079   6054         JZ      ??zclSampleLight_event_loop_9
   \   00007B   24EF         ADD     A,#-0x11
   \   00007D   60B2         JZ      ??zclSampleLight_event_loop_4
   \   00007F   24FE         ADD     A,#-0x2
   \   000081   70D3         JNZ     ??zclSampleLight_event_loop_6
   \   000083                ; Setup parameters for call to function zclSampleLight_ProcessZDOMsgs
   \   000083   12....       LCALL   `??zclSampleLight_ProcessZDOMsgs::?relay`; Banked call to: zclSampleLight_ProcessZDOMsgs
   \   000086   80CE         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_8:
   \   000088   EA           MOV     A,R2
   \   000089   2417         ADD     A,#0x17
   \   00008B   F8           MOV     R0,A
   \   00008C   E4           CLR     A
   \   00008D   35..         ADDC    A,?V1
   \   00008F   F9           MOV     R1,A
   \   000090   E8           MOV     A,R0
   \   000091   FA           MOV     R2,A
   \   000092   E9           MOV     A,R1
   \   000093   FB           MOV     R3,A
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   14           DEC     A
   \   00009D   6011         JZ      ??zclSampleLight_event_loop_10
   \   00009F   24FD         ADD     A,#-0x3
   \   0000A1   701A         JNZ     ??zclSampleLight_event_loop_11
   \   0000A3   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   C3           CLR     C
   \   0000AA   99           SUBB    A,R1
   \   0000AB   5010         JNC     ??zclSampleLight_event_loop_11
   \   0000AD   08           INC     R0
   \   0000AE   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclSampleLight_event_loop_10:
   \   0000B0   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000B3   8001         SJMP    ??zclSampleLight_event_loop_12
   \                     ??zclSampleLight_event_loop_13:
   \   0000B5   08           INC     R0
   \                     ??zclSampleLight_event_loop_12:
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   E8           MOV     A,R0
   \   0000B9   C3           CLR     C
   \   0000BA   99           SUBB    A,R1
   \   0000BB   40F8         JC      ??zclSampleLight_event_loop_13
   \                     ??zclSampleLight_event_loop_11:
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   FA           MOV     R2,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FB           MOV     R3,A
   \   0000C6   EA           MOV     A,R2
   \   0000C7   4B           ORL     A,R3
   \   0000C8   608C         JZ      ??zclSampleLight_event_loop_6
   \   0000CA                ; Setup parameters for call to function osal_mem_free
   \   0000CA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000CD   8087         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_9:
   \   0000CF                ; Setup parameters for call to function zclSampleLight_HandleKeys
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   85..82       MOV     DPL,?V0
   \   0000D7   8B83         MOV     DPH,R3
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F9           MOV     R1,A
   \   0000DD   12....       LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
   \   0000E0   02....       LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
   \                     ??zclSampleLight_event_loop_7:
   \   0000E3   EE           MOV     A,R6
   \   0000E4   FA           MOV     R2,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   6480         XRL     A,#0x80
   \   0000E8   8037         SJMP    ??zclSampleLight_event_loop_14
    478          
    479            if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   0000EA   5410         ANL     A,#0x10
   \   0000EC   600D         JZ      ??zclSampleLight_event_loop_15
    480            {
    481              giLightScreenMode = LIGHT_MAINMODE;
   \   0000EE   90....       MOV     DPTR,#giLightScreenMode
   \   0000F1   E4           CLR     A
   \   0000F2   F0           MOVX    @DPTR,A
    482              zclSampleLight_LcdDisplayUpdate();
   \   0000F3                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   0000F3   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    483          
    484              return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
   \   0000F6   EE           MOV     A,R6
   \   0000F7   6410         XRL     A,#0x10
   \   0000F9   8024         SJMP    ??zclSampleLight_event_loop_3
    485            }
    486          
    487          #ifdef ZCL_EZMODE
    488          #if (defined HAL_BOARD_ZLIGHT)
    489            // event to start EZMode on startup with a delay
    490            if ( events & SAMPLELIGHT_START_EZMODE_EVT )
    491            {
    492              // Invoke EZ-Mode
    493              zclEZMode_InvokeData_t ezModeData;
    494          
    495              // Invoke EZ-Mode
    496              ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    497              if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    498                   (zclSampleLight_NwkState == DEV_ROUTER)   ||
    499                   (zclSampleLight_NwkState == DEV_END_DEVICE) )
    500              {
    501                ezModeData.onNetwork = TRUE;      // node is already on the network
    502              }
    503              else
    504              {
    505                ezModeData.onNetwork = FALSE;     // node is not yet on the network
    506              }
    507              ezModeData.initiator = FALSE;          // OnOffLight is a target
    508              ezModeData.numActiveOutClusters = 0;
    509              ezModeData.pActiveOutClusterIDs = NULL;
    510              ezModeData.numActiveInClusters = 0;
    511              ezModeData.pActiveOutClusterIDs = NULL;
    512              zcl_InvokeEZMode( &ezModeData );
    513          
    514              return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
    515            }
    516          #endif // #if (defined HAL_BOARD_ZLIGHT)
    517          
    518            // going on to next state
    519            if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
   \                     ??zclSampleLight_event_loop_15:
   \   0000FB   EE           MOV     A,R6
   \   0000FC   5408         ANL     A,#0x8
   \   0000FE   600E         JZ      ??zclSampleLight_event_loop_16
    520            {
    521              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
   \   000100                ; Setup parameters for call to function zcl_EZModeAction
   \   000100   7A00         MOV     R2,#0x0
   \   000102   7B00         MOV     R3,#0x0
   \   000104   7901         MOV     R1,#0x1
   \   000106   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    522              return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
   \   000109   EE           MOV     A,R6
   \   00010A   6408         XRL     A,#0x8
   \   00010C   8011         SJMP    ??zclSampleLight_event_loop_3
    523            }
    524          
    525            // the overall EZMode timer expired, so we timed out
    526            if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
   \                     ??zclSampleLight_event_loop_16:
   \   00010E   EE           MOV     A,R6
   \   00010F   5404         ANL     A,#0x4
   \   000111   7A00         MOV     R2,#0x0
   \   000113   7B00         MOV     R3,#0x0
   \   000115   600B         JZ      ??zclSampleLight_event_loop_17
    527            {
    528              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
   \   000117                ; Setup parameters for call to function zcl_EZModeAction
   \   000117   7963         MOV     R1,#0x63
   \   000119   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    529              return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
   \   00011C   EE           MOV     A,R6
   \   00011D   6404         XRL     A,#0x4
   \                     ??zclSampleLight_event_loop_3:
   \   00011F   FA           MOV     R2,A
   \   000120   EF           MOV     A,R7
   \                     ??zclSampleLight_event_loop_14:
   \   000121   FB           MOV     R3,A
    530            }
    531          #endif // ZLC_EZMODE
    532          
    533          #ifdef ZCL_LEVEL_CTRL
    534            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
    535            {
    536              zclSampleLight_AdjustLightLevel();
    537              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
    538            }
    539          #endif
    540          
    541            // Discard unknown events
    542            return 0;
   \                     ??zclSampleLight_event_loop_17:
   \   000122   7F04         MOV     R7,#0x4
   \   000124   02....       LJMP    ?BANKED_LEAVE_XDATA
    543          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000003                REQUIRE ??Subroutine8_0
   \   000003                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    544          
    545          /*********************************************************************
    546           * @fn      zclSampleLight_HandleKeys
    547           *
    548           * @brief   Handles all key events for this device.
    549           *
    550           * @param   shift - true if in shift/alt.
    551           * @param   keys - bit field for key events. Valid entries:
    552           *                 HAL_KEY_SW_5
    553           *                 HAL_KEY_SW_4
    554           *                 HAL_KEY_SW_2
    555           *                 HAL_KEY_SW_1
    556           *
    557           * @return  none
    558           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          static void zclSampleLight_HandleKeys( byte shift, byte keys )
   \                     zclSampleLight_HandleKeys:
    560          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    561            if ( keys & HAL_KEY_SW_1 )
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5011         JNC     ??zclSampleLight_HandleKeys_0
    562            {
    563              giLightScreenMode = LIGHT_MAINMODE;
   \   000012   90....       MOV     DPTR,#giLightScreenMode
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    564          
    565              // toggle local light immediately
    566              zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
   \   000017   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6003         JZ      ??zclSampleLight_HandleKeys_1
   \   00001D   E4           CLR     A
   \   00001E   8002         SJMP    ??zclSampleLight_HandleKeys_2
   \                     ??zclSampleLight_HandleKeys_1:
   \   000020   7401         MOV     A,#0x1
   \                     ??zclSampleLight_HandleKeys_2:
   \   000022   F0           MOVX    @DPTR,A
    567          #ifdef ZCL_LEVEL_CTRL
    568              zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    569          #endif
    570            }
    571          
    572            if ( keys & HAL_KEY_SW_2 )
   \                     ??zclSampleLight_HandleKeys_0:
   \   000023   EF           MOV     A,R7
   \   000024   A2E1         MOV     C,0xE0 /* A   */.1
   \   000026   505E         JNC     ??zclSampleLight_HandleKeys_3
    573            {
    574          #if (defined HAL_BOARD_ZLIGHT)
    575          
    576              zclSampleLight_BasicResetCB();
    577          
    578          #else
    579          
    580              giLightScreenMode = LIGHT_MAINMODE;
   \   000028   90....       MOV     DPTR,#giLightScreenMode
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    581          
    582          #ifdef ZCL_EZMODE
    583              {
    584                // Invoke EZ-Mode
    585                zclEZMode_InvokeData_t ezModeData;
    586          
    587                // Invoke EZ-Mode
    588                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   7408         MOV     A,#0x8
   \   000035   F0           MOVX    @DPTR,A
    589                if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    590                    (zclSampleLight_NwkState == DEV_ROUTER)   ||
    591                      (zclSampleLight_NwkState == DEV_END_DEVICE) )
   \   000036   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6409         XRL     A,#0x9
   \   00003C   600A         JZ      ??zclSampleLight_HandleKeys_4
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6407         XRL     A,#0x7
   \   000041   6005         JZ      ??zclSampleLight_HandleKeys_4
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6406         XRL     A,#0x6
   \   000046   7009         JNZ     ??zclSampleLight_HandleKeys_5
    592                {
    593                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zclSampleLight_HandleKeys_4:
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   8006         SJMP    ??zclSampleLight_HandleKeys_6
    594                }
    595                else
    596                {
    597                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zclSampleLight_HandleKeys_5:
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E4           CLR     A
   \                     ??zclSampleLight_HandleKeys_6:
   \   000057   F0           MOVX    @DPTR,A
    598                }
    599                ezModeData.initiator = FALSE;          // OnOffLight is a target
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    600                ezModeData.numActiveOutClusters = 0;
   \   00005F   7406         MOV     A,#0x6
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    601                ezModeData.pActiveOutClusterIDs = NULL;
   \   000066   7407         MOV     A,#0x7
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   F0           MOVX    @DPTR,A
    602                ezModeData.numActiveInClusters = 0;
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
    603                ezModeData.pActiveOutClusterIDs = NULL;
   \   000076   7407         MOV     A,#0x7
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   F0           MOVX    @DPTR,A
    604                zcl_InvokeEZMode( &ezModeData );
   \   00007F                ; Setup parameters for call to function zcl_InvokeEZMode
   \   00007F   AA..         MOV     R2,?XSP + 0
   \   000081   AB..         MOV     R3,?XSP + 1
   \   000083   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    605              }
    606          
    607          #else // NOT EZ-Mode
    608              {
    609                zAddrType_t dstAddr;
    610                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    611          
    612                // Initiate an End Device Bind Request, this bind request will
    613                // only use a cluster list that is important to binding.
    614                dstAddr.addrMode = afAddr16Bit;
    615                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    616                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    617                                     SAMPLELIGHT_ENDPOINT,
    618                                     ZCL_HA_PROFILE_ID,
    619                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    620                                     0, NULL,   // No Outgoing clusters to bind
    621                                     TRUE );
    622              }
    623          #endif // ZCL_EZMODE
    624          #endif // HAL_BOARD_ZLIGHT
    625            }
    626          
    627            if ( keys & HAL_KEY_SW_3 )
   \                     ??zclSampleLight_HandleKeys_3:
   \   000086   EF           MOV     A,R7
   \   000087   A2E4         MOV     C,0xE0 /* A   */.4
   \   000089   5025         JNC     ??zclSampleLight_HandleKeys_7
    628            {
    629              NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
    630                                 NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
   \   00008B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00008E   8A..         MOV     ?V0,R2
   \   000090   8B..         MOV     ?V1,R3
   \   000092   AC..         MOV     R4,?V0
   \   000094   AD..         MOV     R5,?V1
   \   000096                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   000096   75..00       MOV     ?V0,#0x0
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   7902         MOV     R1,#0x2
   \   0000A0   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000AB   7401         MOV     A,#0x1
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
    631            }
    632          
    633            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclSampleLight_HandleKeys_7:
   \   0000B0   EF           MOV     A,R7
   \   0000B1   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000B3   5041         JNC     ??zclSampleLight_HandleKeys_8
    634            {
    635              giLightScreenMode = LIGHT_MAINMODE;
   \   0000B5   90....       MOV     DPTR,#giLightScreenMode
   \   0000B8   E4           CLR     A
   \   0000B9   F0           MOVX    @DPTR,A
    636          
    637              if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
    638                    ( zclSampleLight_NwkState == DEV_ROUTER ) )
   \   0000BA   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   6409         XRL     A,#0x9
   \   0000C0   6005         JZ      ??zclSampleLight_HandleKeys_9
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   6407         XRL     A,#0x7
   \   0000C5   702F         JNZ     ??zclSampleLight_HandleKeys_8
    639              {
    640                zAddrType_t tmpAddr;
    641          
    642                tmpAddr.addrMode = Addr16Bit;
   \                     ??zclSampleLight_HandleKeys_9:
   \   0000C7   7408         MOV     A,#0x8
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   F0           MOVX    @DPTR,A
    643                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0000CF                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000CF   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   EA           MOV     A,R2
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   EB           MOV     A,R3
   \   0000DC   F0           MOVX    @DPTR,A
    644          
    645                // toggle permit join
    646                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   0000DD   90....       MOV     DPTR,#gPermitDuration
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6003         JZ      ??zclSampleLight_HandleKeys_10
   \   0000E3   E4           CLR     A
   \   0000E4   8002         SJMP    ??zclSampleLight_HandleKeys_11
   \                     ??zclSampleLight_HandleKeys_10:
   \   0000E6   74FF         MOV     A,#-0x1
   \                     ??zclSampleLight_HandleKeys_11:
   \   0000E8   F0           MOVX    @DPTR,A
    647          
    648                // Trust Center significance is always true
    649                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   0000E9                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   0000E9   7D00         MOV     R5,#0x0
   \   0000EB   7C01         MOV     R4,#0x1
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   AA..         MOV     R2,?XSP + 0
   \   0000F1   AB..         MOV     R3,?XSP + 1
   \   0000F3   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    650              }
    651            }
    652          
    653            // Shift F5 does a Basic Reset (factory defaults)
    654            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zclSampleLight_HandleKeys_8:
   \   0000F6   EE           MOV     A,R6
   \   0000F7   600A         JZ      ??zclSampleLight_HandleKeys_12
   \   0000F9   EF           MOV     A,R7
   \   0000FA   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000FC   5016         JNC     ??zclSampleLight_HandleKeys_13
    655            {
    656              zclSampleLight_BasicResetCB();
   \   0000FE                ; Setup parameters for call to function zclSampleLight_BasicResetCB
   \   0000FE   12....       LCALL   `??zclSampleLight_BasicResetCB::?relay`; Banked call to: zclSampleLight_BasicResetCB
   \   000101   8011         SJMP    ??zclSampleLight_HandleKeys_13
    657            }
    658            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zclSampleLight_HandleKeys_12:
   \   000103   EF           MOV     A,R7
   \   000104   A2E2         MOV     C,0xE0 /* A   */.2
   \   000106   500C         JNC     ??zclSampleLight_HandleKeys_13
    659            {
    660              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
   \   000108   90....       MOV     DPTR,#giLightScreenMode
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   6003         JZ      ??zclSampleLight_HandleKeys_14
   \   00010E   E4           CLR     A
   \   00010F   8002         SJMP    ??zclSampleLight_HandleKeys_15
   \                     ??zclSampleLight_HandleKeys_14:
   \   000111   7401         MOV     A,#0x1
   \                     ??zclSampleLight_HandleKeys_15:
   \   000113   F0           MOVX    @DPTR,A
    661            }
    662          
    663            // update the display, including the light
    664            zclSampleLight_LcdDisplayUpdate();
   \                     ??zclSampleLight_HandleKeys_13:
   \   000114                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   000114   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    665          }
   \   000117   7409         MOV     A,#0x9
   \   000119   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine19_0
   \   000003                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    666          
    667          /*********************************************************************
    668           * @fn      zclSampleLight_LcdDisplayUpdate
    669           *
    670           * @brief   Called to update the LCD display.
    671           *
    672           * @param   none
    673           *
    674           * @return  none
    675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    676          void zclSampleLight_LcdDisplayUpdate( void )
   \                     zclSampleLight_LcdDisplayUpdate:
    677          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    678          #ifdef LCD_SUPPORTED
    679            if ( giLightScreenMode == LIGHT_HELPMODE )
    680            {
    681              zclSampleLight_LcdDisplayHelpMode();
    682            }
    683            else
    684            {
    685              zclSampleLight_LcdDisplayMainMode();
    686            }
    687          #endif
    688          
    689            zclSampleLight_DisplayLight();
   \   000004   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_0
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   8002         SJMP    ??zclSampleLight_LcdDisplayUpdate_1
   \                     ??zclSampleLight_LcdDisplayUpdate_0:
   \   000010                ; Setup parameters for call to function HalLedSet
   \   000010   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_LcdDisplayUpdate_1:
   \   000012   7901         MOV     R1,#0x1
   \   000014   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    690          }
   \   000017   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    691          
    692          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    693          /*********************************************************************
    694           * @fn      zclSampleLight_UpdateLampLevel
    695           *
    696           * @brief   Update lamp level output with gamma compensation
    697           *
    698           * @param   level
    699           *
    700           * @return  none
    701           */
    702          void zclSampleLight_UpdateLampLevel( uint8 level )
    703          
    704          {
    705            uint16 gammaCorrectedLevel;
    706          
    707            // gamma correct the level
    708            gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
    709          
    710            halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
    711          }
    712          #endif
    713          
    714          /*********************************************************************
    715           * @fn      zclSampleLight_DisplayLight
    716           *
    717           * @brief   Displays current state of light on LED and also on main display if supported.
    718           *
    719           * @param   none
    720           *
    721           * @return  none
    722           */
    723          static void zclSampleLight_DisplayLight( void )
    724          {
    725            // set the LED1 based on light (on or off)
    726            if ( zclSampleLight_OnOff == LIGHT_ON )
    727            {
    728              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    729            }
    730            else
    731            {
    732              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    733            }
    734          
    735          #ifdef LCD_SUPPORTED
    736            if (giLightScreenMode == LIGHT_MAINMODE)
    737            {
    738          #ifdef ZCL_LEVEL_CTRL
    739              // display current light level
    740              if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    741                   ( zclSampleLight_OnOff == LIGHT_OFF ) )
    742              {
    743                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    744              }
    745              else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    746                        ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
    747                         ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    748                           ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
    749              {
    750                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    751              }
    752              else    // "    LEVEL ###"
    753              {
    754                zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
    755                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
    756              }
    757          #else
    758              if ( zclSampleLight_OnOff )
    759              {
    760                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    761              }
    762              else
    763              {
    764                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    765              }
    766          #endif // ZCL_LEVEL_CTRL
    767            }
    768          #endif // LCD_SUPPORTED
    769          }
    770          
    771          #ifdef LCD_SUPPORTED
    772          /*********************************************************************
    773           * @fn      zclSampleLight_LcdDisplayMainMode
    774           *
    775           * @brief   Called to display the main screen on the LCD.
    776           *
    777           * @param   none
    778           *
    779           * @return  none
    780           */
    781          static void zclSampleLight_LcdDisplayMainMode( void )
    782          {
    783            // display line 1 to indicate NWK status
    784            if ( zclSampleLight_NwkState == DEV_ZB_COORD )
    785            {
    786              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
    787            }
    788            else if ( zclSampleLight_NwkState == DEV_ROUTER )
    789            {
    790              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
    791            }
    792            else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
    793            {
    794              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
    795            }
    796          
    797            // end of line 3 displays permit join status (*)
    798            if ( gPermitDuration )
    799            {
    800              sSwHelp[15] = '*';
    801            }
    802            else
    803            {
    804              sSwHelp[15] = ' ';
    805            }
    806            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    807          }
    808          
    809          /*********************************************************************
    810           * @fn      zclSampleLight_LcdDisplayHelpMode
    811           *
    812           * @brief   Called to display the SW options on the LCD.
    813           *
    814           * @param   none
    815           *
    816           * @return  none
    817           */
    818          static void zclSampleLight_LcdDisplayHelpMode( void )
    819          {
    820            HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
    821            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
    822            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    823          }
    824          #endif  // LCD_SUPPORTED
    825          
    826          /*********************************************************************
    827           * @fn      zclSampleLight_ProcessIdentifyTimeChange
    828           *
    829           * @brief   Called to process any change to the IdentifyTime attribute.
    830           *
    831           * @param   none
    832           *
    833           * @return  none
    834           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    835          static void zclSampleLight_ProcessIdentifyTimeChange( void )
   \                     zclSampleLight_ProcessIdentifyTimeChange:
    836          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    837            if ( zclSampleLight_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   6026         JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
    838            {
    839              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000B                ; Setup parameters for call to function osal_start_timerEx
   \   00000B   90....       MOV     DPTR,#__Constant_3e8
   \   00000E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
    840              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000022                ; Setup parameters for call to function HalLedBlink
   \   000022   7CE8         MOV     R4,#-0x18
   \   000024   7D03         MOV     R5,#0x3
   \   000026   7B05         MOV     R3,#0x5
   \   000028   7AFF         MOV     R2,#-0x1
   \   00002A   7908         MOV     R1,#0x8
   \   00002C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00002F   801F         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
    841            }
    842            else
    843            {
    844          #ifdef ZCL_EZMODE
    845              if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_0:
   \   000031   90....       MOV     DPTR,#zclSampleLight_IdentifyCommissionState
   \   000034   E0           MOVX    A,@DPTR
   \   000035   A2E1         MOV     C,0xE0 /* A   */.1
   \   000037   5004         JNC     ??zclSampleLight_ProcessIdentifyTimeChange_2
    846              {
    847                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   000039                ; Setup parameters for call to function HalLedSet
   \   000039   7A01         MOV     R2,#0x1
   \   00003B   8002         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_3
    848              }
    849              else
    850              {
    851                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_2:
   \   00003D                ; Setup parameters for call to function HalLedSet
   \   00003D   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_3:
   \   00003F   7908         MOV     R1,#0x8
   \   000041   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    852              }
    853          #endif
    854          
    855              osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000044                ; Setup parameters for call to function osal_stop_timerEx
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    856            }
    857          }
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_1:
   \   000050   80..         SJMP    ?Subroutine2
    858          
    859          /*********************************************************************
    860           * @fn      zclSampleLight_BasicResetCB
    861           *
    862           * @brief   Callback from the ZCL General Cluster Library
    863           *          to set all the Basic Cluster attributes to default values.
    864           *
    865           * @param   none
    866           *
    867           * @return  none
    868           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    869          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
    870          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    871            NLME_LeaveReq_t leaveReq;
    872            // Set every field to 0
    873            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    874          
    875            // This will enable the device to rejoin the network after reset.
    876            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    877          
    878            // Set the NV startup option to force a "new" join.
    879            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    880          
    881            // Leave the network, and reset afterwards
    882            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zclSampleLight_BasicResetCB_0
    883            {
    884              // Couldn't send out leave; prepare to reset anyway
    885              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
    886            }
    887          }
   \                     ??zclSampleLight_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039                REQUIRE ?Subroutine2
   \   000039                ; // Fall through to label ?Subroutine2
    888          
    889          /*********************************************************************
    890           * @fn      zclSampleLight_IdentifyCB
    891           *
    892           * @brief   Callback from the ZCL General Cluster Library when
    893           *          it received an Identity Command for this application.
    894           *
    895           * @param   srcAddr - source address and endpoint of the response message
    896           * @param   identifyTime - the number of seconds to identify yourself
    897           *
    898           * @return  none
    899           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    900          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleLight_IdentifyCB:
    901          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    902            zclSampleLight_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00000D   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
    903            zclSampleLight_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    904          }
   \   000018   80..         SJMP    ?Subroutine2
    905          
    906          /*********************************************************************
    907           * @fn      zclSampleLight_IdentifyQueryRspCB
    908           *
    909           * @brief   Callback from the ZCL General Cluster Library when
    910           *          it received an Identity Query Response Command for this application.
    911           *
    912           * @param   srcAddr - requestor's address
    913           * @param   timeout - number of seconds to identify yourself (valid for query response)
    914           *
    915           * @return  none
    916           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    917          static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleLight_IdentifyQueryRspCB:
    918          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 52
   \   000005   74CC         MOV     A,#-0x34
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    919            
    920            char msgPrint[50];
    921            sprintf(msgPrint,"CMD{\"CMD\":\"IDENTIFYQ\",\"SRCADDR\":\"0x%x\"}\r\n",pRsp->srcAddr->addr.shortAddr);
   \   00000E                ; Setup parameters for call to function sprintf
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00001D   7C..         MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IDENTIFYQ\\"...">` & 0xff
   \   00001F   7D..         MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IDENTIFYQ\\"...">` >> 8) & 0xff
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP101_8
   \   000026   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
    922            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
                                                      ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   00002E                ; Setup parameters for call to function strlen
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP101_8
   \   000033   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   000036   8A..         MOV     ?V0,R2
   \   000038   8B..         MOV     ?V1,R3
   \   00003A   AC..         MOV     R4,?V0
   \   00003C   AD..         MOV     R5,?V1
   \   00003E                ; Setup parameters for call to function HalUARTWrite
   \   00003E   7402         MOV     A,#0x2
   \   000040   12....       LCALL   ?XSTACK_DISP101_8
   \   000043   7900         MOV     R1,#0x0
   \   000045   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    923            
    924            //sprintf(msgPrint,"{\"0x%x\"}\r\n",pRsp->srcAddr->addr.shortAddr);
    925            //HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
    926            
    927            (void)pRsp;
    928          #ifdef ZCL_EZMODE
    929            {
    930              zclEZMode_ActionData_t data;
    931              data.pIdentifyQueryRsp = pRsp;
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   EE           MOV     A,R6
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   EF           MOV     A,R7
   \   000052   F0           MOVX    @DPTR,A
    932              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
   \   000053                ; Setup parameters for call to function zcl_EZModeAction
   \   000053   AA..         MOV     R2,?XSP + 0
   \   000055   AB..         MOV     R3,?XSP + 1
   \   000057   7904         MOV     R1,#0x4
   \   000059   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    933            }
    934          #endif
    935          }
   \   00005C   7434         MOV     A,#0x34
   \   00005E   02....       LJMP    ?Subroutine1 & 0xFFFF
    936          
    937          /*********************************************************************
    938           * @fn      zclSampleLight_OnOffCB
    939           *
    940           * @brief   Callback from the ZCL General Cluster Library when
    941           *          it received an On/Off Command for this application.
    942           *
    943           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    949            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
    950          
    951            zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000017   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   00001A   E8           MOV     A,R0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   E9           MOV     A,R1
   \   00001E   F0           MOVX    @DPTR,A
    952          
    953          
    954            // Turn on the light
    955            if ( cmd == COMMAND_ON )
   \   00001F   7401         MOV     A,#0x1
   \   000021   6E           XRL     A,R6
   \   000022   600E         JZ      ??zclSampleLight_OnOffCB_0
    956            {
    957              zclSampleLight_OnOff = LIGHT_ON;
    958            }
    959            // Turn off the light
    960            else if ( cmd == COMMAND_OFF )
   \   000024   EE           MOV     A,R6
   \   000025   6012         JZ      ??zclSampleLight_OnOffCB_1
    961            {
    962              zclSampleLight_OnOff = LIGHT_OFF;
    963            }
    964            // Toggle the light
    965            else if ( cmd == COMMAND_TOGGLE )
   \   000027   7402         MOV     A,#0x2
   \   000029   6E           XRL     A,R6
   \   00002A   7012         JNZ     ??zclSampleLight_OnOffCB_2
    966            {
    967              if ( zclSampleLight_OnOff == LIGHT_OFF )
   \   00002C   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   7007         JNZ     ??zclSampleLight_OnOffCB_1
    968              {
    969                zclSampleLight_OnOff = LIGHT_ON;
   \                     ??zclSampleLight_OnOffCB_0:
   \   000032   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000035   7401         MOV     A,#0x1
   \   000037   8004         SJMP    ??zclSampleLight_OnOffCB_3
    970              }
    971              else
    972              {
    973                zclSampleLight_OnOff = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_1:
   \   000039   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00003C   E4           CLR     A
   \                     ??zclSampleLight_OnOffCB_3:
   \   00003D   F0           MOVX    @DPTR,A
    974              }
    975            }
    976          
    977          #if ZCL_LEVEL_CTRL
    978            zclSampleLight_DefaultMove( );
    979          #endif
    980          
    981            // update the display
    982            zclSampleLight_LcdDisplayUpdate( );
   \                     ??zclSampleLight_OnOffCB_2:
   \   00003E                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00003E   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    983          }
   \   000041   02....       LJMP    ??Subroutine19_0 & 0xFFFF
    984          
    985          #ifdef ZCL_LEVEL_CTRL
    986          /*********************************************************************
    987           * @fn      zclSampleLight_TimeRateHelper
    988           *
    989           * @brief   Calculate time based on rate, and startup level state machine
    990           *
    991           * @param   newLevel - new level for current level
    992           *
    993           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
    994           */
    995          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
    996          {
    997            uint32 diff;
    998            uint32 newLevel32;
    999          
   1000            // remember current and new level
   1001            zclSampleLight_NewLevel = newLevel;
   1002            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
   1003          
   1004            // calculate diff
   1005            newLevel32 = (uint32)1000 * newLevel;
   1006            if ( zclSampleLight_LevelCurrentLevel > newLevel )
   1007            {
   1008              diff = zclSampleLight_CurrentLevel32 - newLevel32;
   1009              zclSampleLight_NewLevelUp = FALSE;  // moving down
   1010            }
   1011            else
   1012            {
   1013              diff = newLevel32 - zclSampleLight_CurrentLevel32;
   1014              zclSampleLight_NewLevelUp = TRUE;   // moving up
   1015            }
   1016          
   1017            return ( diff );
   1018          }
   1019          
   1020          /*********************************************************************
   1021           * @fn      zclSampleLight_MoveBasedOnRate
   1022           *
   1023           * @brief   Calculate time based on rate, and startup level state machine
   1024           *
   1025           * @param   newLevel - new level for current level
   1026           * @param   rate16   - fixed point rate (e.g. 16.123)
   1027           *
   1028           * @return  none
   1029           */
   1030          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
   1031          {
   1032            uint32 diff;
   1033          
   1034            // determine how much time (in 10ths of seconds) based on the difference and rate
   1035            zclSampleLight_Rate32 = rate;
   1036            diff = zclSampleLight_TimeRateHelper( newLevel );
   1037            zclSampleLight_LevelRemainingTime = diff / rate;
   1038            if ( !zclSampleLight_LevelRemainingTime )
   1039            {
   1040              zclSampleLight_LevelRemainingTime = 1;
   1041            }
   1042          
   1043            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1044          }
   1045          
   1046          /*********************************************************************
   1047           * @fn      zclSampleLight_MoveBasedOnTime
   1048           *
   1049           * @brief   Calculate rate based on time, and startup level state machine
   1050           *
   1051           * @param   newLevel  - new level for current level
   1052           * @param   time      - in 10ths of seconds
   1053           *
   1054           * @return  none
   1055           */
   1056          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
   1057          {
   1058            uint16 diff;
   1059          
   1060            // determine rate (in units) based on difference and time
   1061            diff = zclSampleLight_TimeRateHelper( newLevel );
   1062            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
   1063            zclSampleLight_Rate32 = diff / time;
   1064          
   1065            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1066          }
   1067          
   1068          /*********************************************************************
   1069           * @fn      zclSampleLight_GetTime
   1070           *
   1071           * @brief   Determine amount of time that MoveXXX will take to complete.
   1072           *
   1073           * @param   level = new level to move to
   1074           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
   1075           *
   1076           * @return  none
   1077           */
   1078          static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
   1079          {
   1080            // there is a hiearchy of the amount of time to use for transistioning
   1081            // check each one in turn. If none of defaults are set, then use fastest
   1082            // time possible.
   1083            if ( time == 0xFFFF )
   1084            {
   1085              // use On or Off Transition Time if set (not 0xffff)
   1086              if ( zclSampleLight_OnOff == LIGHT_ON )
   1087              {
   1088                time = zclSampleLight_LevelOffTransitionTime;
   1089              }
   1090              else
   1091              {
   1092                time = zclSampleLight_LevelOnTransitionTime;
   1093              }
   1094          
   1095              // else use OnOffTransitionTime if set (not 0xffff)
   1096              if ( time == 0xFFFF )
   1097              {
   1098                time = zclSampleLight_LevelOnOffTransitionTime;
   1099              }
   1100          
   1101              // else as fast as possible
   1102              if ( time == 0xFFFF )
   1103              {
   1104                time = 1;
   1105              }
   1106            }
   1107          
   1108            if ( !time )
   1109            {
   1110              time = 1; // as fast as possible
   1111            }
   1112          
   1113            return ( time );
   1114          }
   1115          
   1116          /*********************************************************************
   1117           * @fn      zclSampleLight_DefaultMove
   1118           *
   1119           * @brief   We were turned on/off. Use default time to move to on or off.
   1120           *
   1121           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
   1122           *
   1123           * @return  none
   1124           */
   1125          static void zclSampleLight_DefaultMove( void )
   1126          {
   1127            uint8  newLevel;
   1128            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
   1129            uint16 time;
   1130          
   1131            // if moving to on position, move to on level
   1132            if ( zclSampleLight_OnOff )
   1133            {
   1134              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1135              {
   1136                // The last Level (before going OFF) should be used)
   1137                newLevel = zclSampleLight_LevelLastLevel;
   1138              }
   1139              else
   1140              {
   1141                newLevel = zclSampleLight_LevelOnLevel;
   1142              }
   1143          
   1144              time = zclSampleLight_LevelOnTransitionTime;
   1145            }
   1146            else
   1147            {
   1148              newLevel = ATTR_LEVEL_MIN_LEVEL;
   1149          
   1150              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1151              {
   1152                // Save the current Level before going OFF to use it when the light turns ON
   1153                // it should be back to this level
   1154                zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   1155              }
   1156          
   1157              time = zclSampleLight_LevelOffTransitionTime;
   1158            }
   1159          
   1160            // else use OnOffTransitionTime if set (not 0xffff)
   1161            if ( time == 0xFFFF )
   1162            {
   1163              time = zclSampleLight_LevelOnOffTransitionTime;
   1164            }
   1165          
   1166            // else as fast as possible
   1167            if ( time == 0xFFFF )
   1168            {
   1169              time = 1;
   1170            }
   1171          
   1172            // calculate rate based on time (int 10ths) for full transition (1-254)
   1173            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
   1174          
   1175            // start up state machine.
   1176            zclSampleLight_WithOnOff = TRUE;
   1177            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1178          }
   1179          
   1180          /*********************************************************************
   1181           * @fn      zclSampleLight_AdjustLightLevel
   1182           *
   1183           * @brief   Called each 10th of a second while state machine running
   1184           *
   1185           * @param   none
   1186           *
   1187           * @return  none
   1188           */
   1189          static void zclSampleLight_AdjustLightLevel( void )
   1190          {
   1191            // one tick (10th of a second) less
   1192            if ( zclSampleLight_LevelRemainingTime )
   1193            {
   1194              --zclSampleLight_LevelRemainingTime;
   1195            }
   1196          
   1197            // no time left, done
   1198            if ( zclSampleLight_LevelRemainingTime == 0)
   1199            {
   1200              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
   1201            }
   1202          
   1203            // still time left, keep increment/decrementing
   1204            else
   1205            {
   1206              if ( zclSampleLight_NewLevelUp )
   1207              {
   1208                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
   1209              }
   1210              else
   1211              {
   1212                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
   1213              }
   1214              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
   1215            }
   1216          
   1217          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1218            zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
   1219          #endif
   1220          
   1221            // also affect on/off
   1222            if ( zclSampleLight_WithOnOff )
   1223            {
   1224              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
   1225              {
   1226                zclSampleLight_OnOff = LIGHT_ON;
   1227          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1228                ENABLE_LAMP;
   1229          #endif
   1230              }
   1231              else
   1232              {
   1233                zclSampleLight_OnOff = LIGHT_OFF;
   1234          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1235                DISABLE_LAMP;
   1236          #endif
   1237              }
   1238            }
   1239          
   1240            // display light level as we go
   1241            zclSampleLight_DisplayLight( );
   1242          
   1243            // keep ticking away
   1244            if ( zclSampleLight_LevelRemainingTime )
   1245            {
   1246              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1247            }
   1248          }
   1249          
   1250          /*********************************************************************
   1251           * @fn      zclSampleLight_LevelControlMoveToLevelCB
   1252           *
   1253           * @brief   Callback from the ZCL General Cluster Library when
   1254           *          it received a LevelControlMoveToLevel Command for this application.
   1255           *
   1256           * @param   pCmd - ZigBee command parameters
   1257           *
   1258           * @return  none
   1259           */
   1260          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   1261          {
   1262            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1263            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
   1264          }
   1265          
   1266          /*********************************************************************
   1267           * @fn      zclSampleLight_LevelControlMoveCB
   1268           *
   1269           * @brief   Callback from the ZCL General Cluster Library when
   1270           *          it received a LevelControlMove Command for this application.
   1271           *
   1272           * @param   pCmd - ZigBee command parameters
   1273           *
   1274           * @return  none
   1275           */
   1276          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
   1277          {
   1278            uint8 newLevel;
   1279            uint32 rate;
   1280          
   1281            // convert rate from units per second to units per tick (10ths of seconds)
   1282            // and move at that right up or down
   1283            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1284          
   1285            if ( pCmd->moveMode == LEVEL_MOVE_UP )
   1286            {
   1287              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
   1288            }
   1289            else
   1290            {
   1291              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   1292            }
   1293          
   1294            rate = (uint32)100 * pCmd->rate;
   1295            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1296          }
   1297          
   1298          /*********************************************************************
   1299           * @fn      zclSampleLight_LevelControlStepCB
   1300           *
   1301           * @brief   Callback from the ZCL General Cluster Library when
   1302           *          it received an On/Off Command for this application.
   1303           *
   1304           * @param   pCmd - ZigBee command parameters
   1305           *
   1306           * @return  none
   1307           */
   1308          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   1309          {
   1310            uint8 newLevel;
   1311          
   1312            // determine new level, but don't exceed boundaries
   1313            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   1314            {
   1315              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   1316              {
   1317                newLevel = ATTR_LEVEL_MAX_LEVEL;
   1318              }
   1319              else
   1320              {
   1321                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   1322              }
   1323            }
   1324            else
   1325            {
   1326              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   1327              {
   1328                newLevel = ATTR_LEVEL_MIN_LEVEL;
   1329              }
   1330              else
   1331              {
   1332                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   1333              }
   1334            }
   1335          
   1336            // move to the new level
   1337            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1338            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   1339          }
   1340          
   1341          /*********************************************************************
   1342           * @fn      zclSampleLight_LevelControlStopCB
   1343           *
   1344           * @brief   Callback from the ZCL General Cluster Library when
   1345           *          it received an Level Control Stop Command for this application.
   1346           *
   1347           * @param   pCmd - ZigBee command parameters
   1348           *
   1349           * @return  none
   1350           */
   1351          static void zclSampleLight_LevelControlStopCB( void )
   1352          {
   1353            // stop immediately
   1354            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   1355            zclSampleLight_LevelRemainingTime = 0;
   1356          }
   1357          #endif
   1358          
   1359          /******************************************************************************
   1360           *
   1361           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1362           *
   1363           *****************************************************************************/
   1364          
   1365          /*********************************************************************
   1366           * @fn      zclSampleLight_ProcessIncomingMsg
   1367           *
   1368           * @brief   Process ZCL Foundation incoming message
   1369           *
   1370           * @param   pInMsg - pointer to the received message
   1371           *
   1372           * @return  none
   1373           */
   1374          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1375          {
   1376            switch ( pInMsg->zclHdr.commandID )
   1377            {
   1378          #ifdef ZCL_READ
   1379              case ZCL_CMD_READ_RSP:
   1380                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   1381                break;
   1382          #endif
   1383          #ifdef ZCL_WRITE
   1384              case ZCL_CMD_WRITE_RSP:
   1385                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   1386                break;
   1387          #endif
   1388          #ifdef ZCL_REPORT
   1389              // Attribute Reporting implementation should be added here
   1390              case ZCL_CMD_CONFIG_REPORT:
   1391                // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
   1392                break;
   1393          
   1394              case ZCL_CMD_CONFIG_REPORT_RSP:
   1395                // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
   1396                break;
   1397          
   1398              case ZCL_CMD_READ_REPORT_CFG:
   1399                // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
   1400                break;
   1401          
   1402              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1403                // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
   1404                break;
   1405          
   1406              case ZCL_CMD_REPORT:
   1407                // zclSampleLight_ProcessInReportCmd( pInMsg );
   1408                break;
   1409          #endif
   1410              case ZCL_CMD_DEFAULT_RSP:
   1411                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1412                break;
   1413          #ifdef ZCL_DISCOVER
   1414              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1415                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1416                break;
   1417          
   1418              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1419                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1420                break;
   1421          
   1422              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1423                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   1424                break;
   1425          
   1426              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1427                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1428                break;
   1429          #endif
   1430              default:
   1431                break;
   1432            }
   1433          
   1434            if ( pInMsg->attrCmd )
   1435              osal_mem_free( pInMsg->attrCmd );
   1436          }
   1437          
   1438          #ifdef ZCL_READ
   1439          /*********************************************************************
   1440           * @fn      zclSampleLight_ProcessInReadRspCmd
   1441           *
   1442           * @brief   Process the "Profile" Read Response Command
   1443           *
   1444           * @param   pInMsg - incoming message to process
   1445           *
   1446           * @return  none
   1447           */
   1448          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1449          {
   1450            zclReadRspCmd_t *readRspCmd;
   1451            uint8 i;
   1452          
   1453            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1454            for (i = 0; i < readRspCmd->numAttr; i++)
   1455            {
   1456              // Notify the originator of the results of the original read attributes
   1457              // attempt and, for each successfull request, the value of the requested
   1458              // attribute
   1459            }
   1460          
   1461            return ( TRUE );
   1462          }
   1463          #endif // ZCL_READ
   1464          
   1465          #ifdef ZCL_WRITE
   1466          /*********************************************************************
   1467           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1468           *
   1469           * @brief   Process the "Profile" Write Response Command
   1470           *
   1471           * @param   pInMsg - incoming message to process
   1472           *
   1473           * @return  none
   1474           */
   1475          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1476          {
   1477            zclWriteRspCmd_t *writeRspCmd;
   1478            uint8 i;
   1479          
   1480            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1481            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1482            {
   1483              // Notify the device of the results of the its original write attributes
   1484              // command.
   1485            }
   1486          
   1487            return ( TRUE );
   1488          }
   1489          #endif // ZCL_WRITE
   1490          
   1491          /*********************************************************************
   1492           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1493           *
   1494           * @brief   Process the "Profile" Default Response Command
   1495           *
   1496           * @param   pInMsg - incoming message to process
   1497           *
   1498           * @return  none
   1499           */
   1500          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1501          {
   1502            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1503          
   1504            // Device is notified of the Default Response command.
   1505            (void)pInMsg;
   1506          
   1507            return ( TRUE );
   1508          }
   1509          
   1510          #ifdef ZCL_DISCOVER
   1511          /*********************************************************************
   1512           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1513           *
   1514           * @brief   Process the Discover Commands Response Command
   1515           *
   1516           * @param   pInMsg - incoming message to process
   1517           *
   1518           * @return  none
   1519           */
   1520          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1521          {
   1522            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1523            uint8 i;
   1524          
   1525            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1526            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1527            {
   1528              // Device is notified of the result of its attribute discovery command.
   1529            }
   1530          
   1531            return ( TRUE );
   1532          }
   1533          
   1534          /*********************************************************************
   1535           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1536           *
   1537           * @brief   Process the "Profile" Discover Attributes Response Command
   1538           *
   1539           * @param   pInMsg - incoming message to process
   1540           *
   1541           * @return  none
   1542           */
   1543          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1544          {
   1545            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1546            uint8 i;
   1547          
   1548            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1549            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1550            {
   1551              // Device is notified of the result of its attribute discovery command.
   1552            }
   1553          
   1554            return ( TRUE );
   1555          }
   1556          
   1557          /*********************************************************************
   1558           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1559           *
   1560           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1561           *
   1562           * @param   pInMsg - incoming message to process
   1563           *
   1564           * @return  none
   1565           */
   1566          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1567          {
   1568            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1569            uint8 i;
   1570          
   1571            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1572            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1573            {
   1574              // Device is notified of the result of its attribute discovery command.
   1575            }
   1576          
   1577            return ( TRUE );
   1578          }
   1579          #endif // ZCL_DISCOVER
   1580          
   1581          #if ZCL_EZMODE
   1582          /*********************************************************************
   1583           * @fn      zclSampleLight_ProcessZDOMsgs
   1584           *
   1585           * @brief   Called when this node receives a ZDO/ZDP response.
   1586           *
   1587           * @param   none
   1588           *
   1589           * @return  status
   1590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1591          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   \                     zclSampleLight_ProcessZDOMsgs:
   1592          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1593            zclEZMode_ActionData_t data;
   1594            
   1595            //char msgPrint[200];
   1596            char *msgPrint = osal_mem_alloc(255);
   \   00000E                ; Setup parameters for call to function osal_mem_alloc
   \   00000E   7AFF         MOV     R2,#-0x1
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000015   8A..         MOV     ?V2,R2
   \   000017   8B..         MOV     ?V3,R3
   \   000019   AE..         MOV     R6,?V2
   \   00001B   AF..         MOV     R7,?V3
   1597            
   1598            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1599            ZDO_DeviceAnnce_t *pDeviceAnnce;
   1600            //for ieee req
   1601            ZDO_NwkIEEEAddrResp_t *pNwkIEEEAddrResp;
   1602            ZDO_ActiveEndpointRsp_t *pActiveEndpointRsp;
   1603          
   1604            // Let EZ-Mode know of the Simple Descriptor Response
   1605            if ( pMsg->clusterID == Match_Desc_rsp )
   \   00001D   E5..         MOV     A,?V0
   \   00001F   240C         ADD     A,#0xc
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   35..         ADDC    A,?V1
   \   000026   F583         MOV     DPH,A
   \   000028   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00002B   7406         MOV     A,#0x6
   \   00002D   68           XRL     A,R0
   \   00002E   7003         JNZ     ??zclSampleLight_ProcessZDOMsgs_0
   \   000030   7480         MOV     A,#-0x80
   \   000032   69           XRL     A,R1
   \                     ??zclSampleLight_ProcessZDOMsgs_0:
   \   000033   7029         JNZ     ??zclSampleLight_ProcessZDOMsgs_1
   1606            {
   1607              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   \   000035                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000035   AA..         MOV     R2,?V0
   \   000037   AB..         MOV     R3,?V1
   \   000039   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00003C   8A..         MOV     ?V0,R2
   \   00003E   8B..         MOV     ?V1,R3
   1608              data.pMatchDescRsp = pMatchDescRsp;
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   EA           MOV     A,R2
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   EB           MOV     A,R3
   \   00004A   F0           MOVX    @DPTR,A
   1609              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   \   00004B                ; Setup parameters for call to function zcl_EZModeAction
   \   00004B   AA..         MOV     R2,?XSP + 0
   \   00004D   AB..         MOV     R3,?XSP + 1
   \   00004F   7905         MOV     R1,#0x5
   \   000051   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   1610              osal_mem_free( pMatchDescRsp );
   \   000054                ; Setup parameters for call to function osal_mem_free
   \   000054   AA..         MOV     R2,?V0
   \   000056   AB..         MOV     R3,?V1
   \   000058   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00005B   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
   1611            }
   1612            else if(pMsg->clusterID == Device_annce){
   \                     ??zclSampleLight_ProcessZDOMsgs_1:
   \   00005E   7413         MOV     A,#0x13
   \   000060   68           XRL     A,R0
   \   000061   49           ORL     A,R1
   \   000062   6003         JZ      $+5
   \   000064   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_3 & 0xFFFF
   1613              
   1614              pDeviceAnnce = osal_mem_alloc(sizeof(ZDO_DeviceAnnce_t));
   \   000067                ; Setup parameters for call to function osal_mem_alloc
   \   000067   7A0B         MOV     R2,#0xb
   \   000069   7B00         MOV     R3,#0x0
   \   00006B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006E   8A..         MOV     ?V2,R2
   \   000070   8B..         MOV     ?V3,R3
   1615              ZDO_ParseDeviceAnnce(pMsg,pDeviceAnnce);
   \   000072                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000072   AC..         MOV     R4,?V2
   \   000074   AD..         MOV     R5,?V3
   \   000076   AA..         MOV     R2,?V0
   \   000078   AB..         MOV     R3,?V1
   \   00007A   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1616              
   1617              sprintf(msgPrint, "CMD{\"CMD\":\"ANNCE\",\"IEEEADDR\":\"%x:%x:%x:%x:%x:%x:%x:%x\",\"SHORTADDR\":\"0x%x\",\"CAP\":\"0x%x\"}\r\n",pDeviceAnnce->extAddr[7],pDeviceAnnce->extAddr[6],pDeviceAnnce->extAddr[5],pDeviceAnnce->extAddr[4],pDeviceAnnce->extAddr[3],pDeviceAnnce->extAddr[2],pDeviceAnnce->extAddr[1],pDeviceAnnce->extAddr[0], pDeviceAnnce->nwkAddr,pDeviceAnnce->capabilities);
   \   00007D                ; Setup parameters for call to function sprintf
   \   00007D   85..82       MOV     DPL,?V2
   \   000080   85..83       MOV     DPH,?V3
   \   000083   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   85..82       MOV     DPL,?V2
   \   00008C   85..83       MOV     DPH,?V3
   \   00008F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000092   85..82       MOV     DPL,?V2
   \   000095   85..83       MOV     DPH,?V3
   \   000098   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   85..82       MOV     DPL,?V2
   \   0000A1   85..83       MOV     DPH,?V3
   \   0000A4   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AA   85..82       MOV     DPL,?V2
   \   0000AD   85..83       MOV     DPH,?V3
   \   0000B0   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   85..82       MOV     DPL,?V2
   \   0000B9   85..83       MOV     DPH,?V3
   \   0000BC   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   85..82       MOV     DPL,?V2
   \   0000C5   85..83       MOV     DPH,?V3
   \   0000C8   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CE   85..82       MOV     DPL,?V2
   \   0000D1   85..83       MOV     DPH,?V3
   \   0000D4   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   85..82       MOV     DPL,?V2
   \   0000DD   85..83       MOV     DPH,?V3
   \   0000E0   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   85..82       MOV     DPL,?V2
   \   0000E9   85..83       MOV     DPH,?V3
   \   0000EC   A3           INC     DPTR
   \   0000ED   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F3   7C..         MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">` & 0xff
   \   0000F5   7D..         MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">` >> 8) & 0xff
   \   0000F7   EE           MOV     A,R6
   \   0000F8   FA           MOV     R2,A
   \   0000F9   EF           MOV     A,R7
   \   0000FA   FB           MOV     R3,A
   \   0000FB   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0000FE   7414         MOV     A,#0x14
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   1618              HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
                                                        ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   000103                ; Setup parameters for call to function strlen
   \   000103   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_4 & 0xFFFF
   1619              //char sam[10] = "CMD ANNCE IEEE:\n";
   1620              
   1621              //HalUARTWrite(MT_UART_DEFAULT_PORT, sam, strlen(sam));
   1622              //uint8 *chldExtAddr;
   1623              //chldExtAddr = osal_mem_alloc(8);
   1624              //ZDO_DeviceAnnce_t msg;
   1625              //ZDO_ParseDeviceAnnce( pMsg, &msg);
   1626              //memcpy(&chldExtAddr, msg.extAddr, Z_EXTADDR_LEN);
   1627              //debug_str("Device_annce");
   1628            }
   1629            else if(pMsg->clusterID == IEEE_addr_rsp){
   \                     ??zclSampleLight_ProcessZDOMsgs_3:
   \   000106   7401         MOV     A,#0x1
   \   000108   68           XRL     A,R0
   \   000109   7003         JNZ     ??zclSampleLight_ProcessZDOMsgs_5
   \   00010B   7480         MOV     A,#-0x80
   \   00010D   69           XRL     A,R1
   \                     ??zclSampleLight_ProcessZDOMsgs_5:
   \   00010E   6003         JZ      $+5
   \   000110   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_6 & 0xFFFF
   1630              
   1631              pNwkIEEEAddrResp = ZDO_ParseAddrRsp( pMsg );
   \   000113                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000113   AA..         MOV     R2,?V0
   \   000115   AB..         MOV     R3,?V1
   \   000117   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00011A   8A..         MOV     ?V0,R2
   \   00011C   8B..         MOV     ?V1,R3
   1632              if( pNwkIEEEAddrResp->status == ZDO_SUCCESS ){
   \   00011E   8A82         MOV     DPL,R2
   \   000120   8B83         MOV     DPH,R3
   \   000122   E0           MOVX    A,@DPTR
   \   000123   6003         JZ      $+5
   \   000125   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
   1633                
   1634                if( pNwkIEEEAddrResp->numAssocDevs == 0 ){
   \   000128   A3           INC     DPTR
   \   000129   8582..       MOV     ?V6,DPL
   \   00012C   8583..       MOV     ?V7,DPH
   \   00012F   EA           MOV     A,R2
   \   000130   240B         ADD     A,#0xb
   \   000132   F5..         MOV     ?V2,A
   \   000134   E4           CLR     A
   \   000135   35..         ADDC    A,?V1
   \   000137   F5..         MOV     ?V3,A
   \   000139   85..82       MOV     DPL,?V2
   \   00013C   F583         MOV     DPH,A
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   7075         JNZ     ??zclSampleLight_ProcessZDOMsgs_7
   1635                  
   1636                  sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"STATUS\":0,\"SHORTADDR\":\"0x%x\",\"Type\":0,\"IEEEADDR\":\"%x:%x:%x:%x:%x:%x:%x:%x\"}\r\n", pNwkIEEEAddrResp->nwkAddr, pNwkIEEEAddrResp->extAddr[7], pNwkIEEEAddrResp->extAddr[6], pNwkIEEEAddrResp->extAddr[5], pNwkIEEEAddrResp->extAddr[4], pNwkIEEEAddrResp->extAddr[3], pNwkIEEEAddrResp->extAddr[2], pNwkIEEEAddrResp->extAddr[1], pNwkIEEEAddrResp->extAddr[0]);
   \   000141                ; Setup parameters for call to function sprintf
   \   000141   8A82         MOV     DPL,R2
   \   000143   8B83         MOV     DPH,R3
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F5..         MOV     ?V2,A
   \   00014B   75..00       MOV     ?V3,#0x0
   \   00014E   78..         MOV     R0,#?V2
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000153   8A82         MOV     DPL,R2
   \   000155   8B83         MOV     DPH,R3
   \   000157   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00015A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015D   8A82         MOV     DPL,R2
   \   00015F   8B83         MOV     DPH,R3
   \   000161   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000167   8A82         MOV     DPL,R2
   \   000169   8B83         MOV     DPH,R3
   \   00016B   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000171   8A82         MOV     DPL,R2
   \   000173   8B83         MOV     DPH,R3
   \   000175   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000178   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017B   8A82         MOV     DPL,R2
   \   00017D   8B83         MOV     DPH,R3
   \   00017F   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000182   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000185   8A82         MOV     DPL,R2
   \   000187   8B83         MOV     DPH,R3
   \   000189   A3           INC     DPTR
   \   00018A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00018D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000190   8A82         MOV     DPL,R2
   \   000192   8B83         MOV     DPH,R3
   \   000194   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000197   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019A   85..82       MOV     DPL,?V6
   \   00019D   85..83       MOV     DPH,?V7
   \   0001A0   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001A3   7C..         MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">` & 0xff
   \   0001A5   7D..         MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">` >> 8) & 0xff
   \   0001A7   EE           MOV     A,R6
   \   0001A8   FA           MOV     R2,A
   \   0001A9   EF           MOV     A,R7
   \   0001AA   FB           MOV     R3,A
   \   0001AB   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0001AE   7412         MOV     A,#0x12
   \   0001B0   12....       LCALL   ?DEALLOC_XSTACK8
   1637                  HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
                                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   0001B3                ; Setup parameters for call to function strlen
   \   0001B3   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_4 & 0xFFFF
   1638                  
   1639                }
   1640                else if( pNwkIEEEAddrResp->numAssocDevs > 0 ){
   1641                  
   1642                  
   1643                  
   1644                  for(uint8 i = 0 ; i < pNwkIEEEAddrResp->numAssocDevs ; i++){
   \                     ??zclSampleLight_ProcessZDOMsgs_7:
   \   0001B6   75..00       MOV     ?V4,#0x0
   \                     ??zclSampleLight_ProcessZDOMsgs_8:
   \   0001B9   85..82       MOV     DPL,?V2
   \   0001BC   85..83       MOV     DPH,?V3
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F8           MOV     R0,A
   \   0001C1   E5..         MOV     A,?V4
   \   0001C3   C3           CLR     C
   \   0001C4   98           SUBB    A,R0
   \   0001C5   4003         JC      $+5
   \   0001C7   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
   1645                    
   1646                    //sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"STATUS\":0,\"SRTADDR\":\"0x%x\",\"Type\":1,\"STID\":\"0x%x\",\"NumAsso\":\"0x%x\",\"TB\":\"0x%x\"}\r\n", pNwkIEEEAddrResp->nwkAddr, pNwkIEEEAddrResp->startIndex, pNwkIEEEAddrResp->numAssocDevs, pNwkIEEEAddrResp->devList[i]);
   1647                    sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"SRTADDR\":\"0x%x\",\"TB\":\"0x%x\"}\r\n",pNwkIEEEAddrResp->nwkAddr,pNwkIEEEAddrResp->devList[i]);
   \   0001CA                ; Setup parameters for call to function sprintf
   \   0001CA   A8..         MOV     R0,?V4
   \   0001CC   E8           MOV     A,R0
   \   0001CD   28           ADD     A,R0
   \   0001CE   F8           MOV     R0,A
   \   0001CF   E4           CLR     A
   \   0001D0   33           RLC     A
   \   0001D1   F9           MOV     R1,A
   \   0001D2   E5..         MOV     A,?V0
   \   0001D4   28           ADD     A,R0
   \   0001D5   F8           MOV     R0,A
   \   0001D6   E5..         MOV     A,?V1
   \   0001D8   39           ADDC    A,R1
   \   0001D9   F9           MOV     R1,A
   \   0001DA   E8           MOV     A,R0
   \   0001DB   240D         ADD     A,#0xd
   \   0001DD   F582         MOV     DPL,A
   \   0001DF   E4           CLR     A
   \   0001E0   39           ADDC    A,R1
   \   0001E1   F583         MOV     DPH,A
   \   0001E3   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001E6   85..82       MOV     DPL,?V6
   \   0001E9   85..83       MOV     DPH,?V7
   \   0001EC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001EF   7C..         MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1` & 0xff
   \   0001F1   7D..         MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1` >> 8) & 0xff
   \   0001F3   EE           MOV     A,R6
   \   0001F4   FA           MOV     R2,A
   \   0001F5   EF           MOV     A,R7
   \   0001F6   FB           MOV     R3,A
   \   0001F7   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0001FA   7404         MOV     A,#0x4
   \   0001FC   12....       LCALL   ?DEALLOC_XSTACK8
   1648                    HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
                                                              ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   0001FF                ; Setup parameters for call to function strlen
   \   0001FF   EE           MOV     A,R6
   \   000200   FA           MOV     R2,A
   \   000201   EF           MOV     A,R7
   \   000202   FB           MOV     R3,A
   \   000203   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   000206   8A..         MOV     ?V8,R2
   \   000208   8B..         MOV     ?V9,R3
   \   00020A   AC..         MOV     R4,?V8
   \   00020C   AD..         MOV     R5,?V9
   \   00020E                ; Setup parameters for call to function HalUARTWrite
   \   00020E   EE           MOV     A,R6
   \   00020F   FA           MOV     R2,A
   \   000210   EF           MOV     A,R7
   \   000211   FB           MOV     R3,A
   \   000212   7900         MOV     R1,#0x0
   \   000214   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   1649                    
   1650                  }
   \   000217   05..         INC     ?V4
   \   000219   809E         SJMP    ??zclSampleLight_ProcessZDOMsgs_8
   1651                  
   1652                }
   1653              }
   1654            
   1655            }
   1656            else if(pMsg->clusterID == Active_EP_rsp){
   \                     ??zclSampleLight_ProcessZDOMsgs_6:
   \   00021B   7405         MOV     A,#0x5
   \   00021D   68           XRL     A,R0
   \   00021E   7003         JNZ     ??zclSampleLight_ProcessZDOMsgs_9
   \   000220   7480         MOV     A,#-0x80
   \   000222   69           XRL     A,R1
   \                     ??zclSampleLight_ProcessZDOMsgs_9:
   \   000223   6003         JZ      $+5
   \   000225   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
   1657              
   1658              char temp[6];
   1659              pActiveEndpointRsp = ZDO_ParseEPListRsp(pMsg);
   \   000228                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000228   AA..         MOV     R2,?V0
   \   00022A   AB..         MOV     R3,?V1
   \   00022C   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00022F   8A..         MOV     ?V0,R2
   \   000231   8B..         MOV     ?V1,R3
   1660              sprintf(msgPrint, "CMD{\"CMD\":\"ACTIVEEP\",\"SRTADDR\":\"0x%x\",\"EP\":[", pActiveEndpointRsp->nwkAddr);
   \   000233                ; Setup parameters for call to function sprintf
   \   000233   8A82         MOV     DPL,R2
   \   000235   8B83         MOV     DPH,R3
   \   000237   A3           INC     DPTR
   \   000238   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00023B   7C..         MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"ACTIVEEP\\",...">` & 0xff
   \   00023D   7D..         MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"ACTIVEEP\\",...">` >> 8) & 0xff
   \   00023F   EE           MOV     A,R6
   \   000240   FA           MOV     R2,A
   \   000241   EF           MOV     A,R7
   \   000242   FB           MOV     R3,A
   \   000243   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   000246   7402         MOV     A,#0x2
   \   000248   12....       LCALL   ?DEALLOC_XSTACK8
   1661              
   1662              for(uint8 i=0; i<pActiveEndpointRsp->cnt; i++){
   \   00024B   75..00       MOV     ?V2,#0x0
   \   00024E   8022         SJMP    ??zclSampleLight_ProcessZDOMsgs_10
   1663                if(i!=pActiveEndpointRsp->cnt-1){
   1664                  sprintf(temp,"\"0x%x\",", pActiveEndpointRsp->epList[i]);
   1665                  strcat(msgPrint,temp);
   1666                }else{
   1667                  sprintf(temp,"\"0x%x\"]}", pActiveEndpointRsp->epList[i]);
   \                     ??zclSampleLight_ProcessZDOMsgs_11:
   \   000250                ; Setup parameters for call to function sprintf
   \   000250   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000253   7C..         MOV     R4,#`?<Constant "\\"0x%x\\"]}">` & 0xff
   \   000255   7D..         MOV     R5,#(`?<Constant "\\"0x%x\\"]}">` >> 8) & 0xff
   \                     ??zclSampleLight_ProcessZDOMsgs_12:
   \   000257   7404         MOV     A,#0x4
   \   000259   12....       LCALL   ?XSTACK_DISP101_8
   \   00025C   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   00025F   7402         MOV     A,#0x2
   \   000261   12....       LCALL   ?DEALLOC_XSTACK8
   1668                  strcat(msgPrint,temp);
   \   000264                ; Setup parameters for call to function strcat
   \   000264   7402         MOV     A,#0x2
   \   000266   12....       LCALL   ?XSTACK_DISP102_8
   \   000269   EE           MOV     A,R6
   \   00026A   FA           MOV     R2,A
   \   00026B   EF           MOV     A,R7
   \   00026C   FB           MOV     R3,A
   \   00026D   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
   1669                }
   \   000270   05..         INC     ?V2
   \                     ??zclSampleLight_ProcessZDOMsgs_10:
   \   000272   85..82       MOV     DPL,?V0
   \   000275   85..83       MOV     DPH,?V1
   \   000278   A3           INC     DPTR
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   FA           MOV     R2,A
   \   00027D   E5..         MOV     A,?V2
   \   00027F   C3           CLR     C
   \   000280   9A           SUBB    A,R2
   \   000281   5030         JNC     ??zclSampleLight_ProcessZDOMsgs_4
   \   000283   A8..         MOV     R0,?V2
   \   000285   E5..         MOV     A,?V0
   \   000287   28           ADD     A,R0
   \   000288   F582         MOV     DPL,A
   \   00028A   E4           CLR     A
   \   00028B   35..         ADDC    A,?V1
   \   00028D   F583         MOV     DPH,A
   \   00028F   A3           INC     DPTR
   \   000290   A3           INC     DPTR
   \   000291   A3           INC     DPTR
   \   000292   A3           INC     DPTR
   \   000293   E0           MOVX    A,@DPTR
   \   000294   F5..         MOV     ?V4,A
   \   000296   75..00       MOV     ?V5,#0x0
   \   000299   EA           MOV     A,R2
   \   00029A   24FF         ADD     A,#-0x1
   \   00029C   1A           DEC     R2
   \   00029D   E4           CLR     A
   \   00029E   34FF         ADDC    A,#-0x1
   \   0002A0   FB           MOV     R3,A
   \   0002A1   EA           MOV     A,R2
   \   0002A2   68           XRL     A,R0
   \   0002A3   7001         JNZ     ??zclSampleLight_ProcessZDOMsgs_13
   \   0002A5   EB           MOV     A,R3
   \                     ??zclSampleLight_ProcessZDOMsgs_13:
   \   0002A6   78..         MOV     R0,#?V4
   \   0002A8   60A6         JZ      ??zclSampleLight_ProcessZDOMsgs_11
   \   0002AA                ; Setup parameters for call to function sprintf
   \   0002AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002AD   7C..         MOV     R4,#`?<Constant "\\"0x%x\\",">` & 0xff
   \   0002AF   7D..         MOV     R5,#(`?<Constant "\\"0x%x\\",">` >> 8) & 0xff
   \   0002B1   80A4         SJMP    ??zclSampleLight_ProcessZDOMsgs_12
   1670              }
   1671              
   1672              //sprintf(msgPrint,"Im here !!\r\n");    
   1673              HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
                                                        ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \                     ??zclSampleLight_ProcessZDOMsgs_4:
   \   0002B3                ; Setup parameters for call to function strlen
   \   0002B3   EE           MOV     A,R6
   \   0002B4   FA           MOV     R2,A
   \   0002B5   EF           MOV     A,R7
   \   0002B6   FB           MOV     R3,A
   \   0002B7   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   0002BA   8A..         MOV     ?V0,R2
   \   0002BC   8B..         MOV     ?V1,R3
   \   0002BE   AC..         MOV     R4,?V0
   \   0002C0   AD..         MOV     R5,?V1
   \   0002C2                ; Setup parameters for call to function HalUARTWrite
   \   0002C2   EE           MOV     A,R6
   \   0002C3   FA           MOV     R2,A
   \   0002C4   EF           MOV     A,R7
   \   0002C5   FB           MOV     R3,A
   \   0002C6   7900         MOV     R1,#0x0
   \   0002C8   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   1674              
   1675              
   1676              
   1677            
   1678            }
   1679            
   1680            osal_mem_free(msgPrint);
   \                     ??zclSampleLight_ProcessZDOMsgs_2:
   \   0002CB                ; Setup parameters for call to function osal_mem_free
   \   0002CB   EE           MOV     A,R6
   \   0002CC   FA           MOV     R2,A
   \   0002CD   EF           MOV     A,R7
   \   0002CE   FB           MOV     R3,A
   \   0002CF   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1681            
   1682          }
   \   0002D2   7408         MOV     A,#0x8
   \   0002D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D7   7F0A         MOV     R7,#0xa
   \   0002D9   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   75..00       MOV     ?V1,#0x0
   \   000010   78..         MOV     R0,#?V0
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine9_0
   \   000001                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine10_0
   \   000001                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine11_0
   \   000001                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine12_0
   \   000001                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V2,A
   \   000007   78..         MOV     R0,#?V2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine13_0
   \   000001                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine14_0
   \   000001                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine15_0
   \   000001                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine16_0
   \   000001                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine17_0
   \   000001                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine18_0
   \   000001                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F5..         MOV     ?V0,A
   \   000005   78..         MOV     R0,#?V0
   \   000007   22           RET
   1683          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1684          void test(){
   \                     test:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1685          
   1686            for(int i =0;i<301;i++){
   \   00000A   7E2D         MOV     R6,#0x2d
   \   00000C   7F01         MOV     R7,#0x1
   1687              
   1688              char gg[] = "g";
   \                     ??test_0:
   \   00000E   90....       MOV     DPTR,#`?<Constant "g">`
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1689              HalUARTWrite(MT_UART_DEFAULT_PORT, gg, strlen(gg));
                                                        ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   00001A                ; Setup parameters for call to function strlen
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   000021   8A..         MOV     ?V0,R2
   \   000023   8B..         MOV     ?V1,R3
   \   000025   AC..         MOV     R4,?V0
   \   000027   AD..         MOV     R5,?V1
   \   000029                ; Setup parameters for call to function HalUARTWrite
   \   000029   AA..         MOV     R2,?XSP + 0
   \   00002B   AB..         MOV     R3,?XSP + 1
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   1690            
   1691            }
   \   000032   EE           MOV     A,R6
   \   000033   24FF         ADD     A,#-0x1
   \   000035   1E           DEC     R6
   \   000036   EF           MOV     A,R7
   \   000037   34FF         ADDC    A,#-0x1
   \   000039   FF           MOV     R7,A
   \   00003A   EE           MOV     A,R6
   \   00003B   4F           ORL     A,R7
   \   00003C   70D0         JNZ     ??test_0
   1692              
   1693          
   1694          }
   \   00003E   7402         MOV     A,#0x2
   \   000040                REQUIRE ?Subroutine1
   \   000040                ; // Fall through to label ?Subroutine1
   1695          
   1696          
   1697          /*********************************************************************
   1698           * @fn      zclSampleLight_EZModeCB
   1699           *
   1700           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1701          *           going on during EZ-Mode steering/finding/binding.
   1702           *
   1703           * @param   state - an
   1704           *
   1705           * @return  none
   1706           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1707          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   \                     zclSampleLight_EZModeCB:
   1708          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1709          #ifdef LCD_SUPPORTED
   1710            char *pStr;
   1711            uint8 err;
   1712          #endif
   1713          
   1714            // time to go into identify mode
   1715            if ( state == EZMODE_STATE_IDENTIFYING )
   \   000007   7404         MOV     A,#0x4
   \   000009   6E           XRL     A,R6
   \   00000A   700E         JNZ     ??zclSampleLight_EZModeCB_0
   1716            {
   1717          #ifdef LCD_SUPPORTED
   1718              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   1719          #endif
   1720          
   1721              zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   \   00000C   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   00000F   74B4         MOV     A,#-0x4c
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1722              zclSampleLight_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   \   000018   8026         SJMP    ??zclSampleLight_EZModeCB_1
   1723            }
   1724          
   1725            // autoclosing, show what happened (success, cancelled, etc...)
   1726            if( state == EZMODE_STATE_AUTOCLOSE )
   1727            {
   1728          #ifdef LCD_SUPPORTED
   1729              pStr = NULL;
   1730              err = pData->sAutoClose.err;
   1731              if ( err == EZMODE_ERR_SUCCESS )
   1732              {
   1733                pStr = "EZMode: Success";
   1734              }
   1735              else if ( err == EZMODE_ERR_NOMATCH )
   1736              {
   1737                pStr = "EZMode: NoMatch"; // not a match made in heaven
   1738              }
   1739              if ( pStr )
   1740              {
   1741                if ( giLightScreenMode == LIGHT_MAINMODE )
   1742                {
   1743                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1744                }
   1745              }
   1746          #endif
   1747            }
   1748          
   1749            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1750            if( state == EZMODE_STATE_FINISH )
   \                     ??zclSampleLight_EZModeCB_0:
   \   00001A   7463         MOV     A,#0x63
   \   00001C   6E           XRL     A,R6
   \   00001D   7021         JNZ     ??zclSampleLight_EZModeCB_1
   1751            {
   1752              // turn off identify mode
   1753              zclSampleLight_IdentifyTime = 0;
   \   00001F   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
   1754              zclSampleLight_ProcessIdentifyTimeChange();
   \   000026                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000026   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   1755          
   1756          #ifdef LCD_SUPPORTED
   1757              // if successful, inform user which nwkaddr/ep we bound to
   1758              pStr = NULL;
   1759              err = pData->sFinish.err;
   1760              if( err == EZMODE_ERR_SUCCESS )
   1761              {
   1762                // already stated on autoclose
   1763              }
   1764              else if ( err == EZMODE_ERR_CANCELLED )
   1765              {
   1766                pStr = "EZMode: Cancel";
   1767              }
   1768              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   1769              {
   1770                pStr = "EZMode: BadParm";
   1771              }
   1772              else if ( err == EZMODE_ERR_TIMEDOUT )
   1773              {
   1774                pStr = "EZMode: TimeOut";
   1775              }
   1776              if ( pStr )
   1777              {
   1778                if ( giLightScreenMode == LIGHT_MAINMODE )
   1779                {
   1780                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1781                }
   1782              }
   1783          #endif
   1784              // show main UI screen 3 seconds after binding
   1785              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   \   000029                ; Setup parameters for call to function osal_start_timerEx
   \   000029   90....       MOV     DPTR,#__Constant_bb8
   \   00002C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00002F   7A10         MOV     R2,#0x10
   \   000031   7B00         MOV     R3,#0x0
   \   000033   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   1786            }
   1787          }
   \                     ??zclSampleLight_EZModeCB_1:
   \   000040   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   08           DB 8
   \   000001   ....         DW zclSampleLight_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleLight_BasicResetCB::?relay`
   \   000002   ....         DW `??zclSampleLight_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
   \   00000C   ....         DW `??zclSampleLight_OnOffCB::?relay`
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_LcdDisplayUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_ProcessIdentifyTimeChange::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    test

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_EZModeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_EZModeCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD{\\"CMD\\":\\"IDENTIFYQ\\"...">`:
   \   000000   434D447B     DB "CMD{\"CMD\":\"IDENTIFYQ\",\"SRCADDR\":\"0x%x\"}\015\012"
   \            22434D44
   \            223A2249
   \            44454E54
   \            49465951
   \            222C2253
   \            52434144
   \            4452223A
   \            22307825
   \            78227D0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">`:
   \   000000   434D447B     DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
   \            22434D44
   \   000008   223A2241     DB 22H, 3AH, 22H, 41H, 4EH, 4EH, 43H, 45H
   \            4E4E4345
   \   000010   222C2249     DB 22H, 2CH, 22H, 49H, 45H, 45H, 45H, 41H
   \            45454541
   \   000018   44445222     DB 44H, 44H, 52H, 22H, 3AH, 22H, 25H, 78H
   \            3A222578
   \   000020   3A25783A     DB 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH, 25H
   \            25783A25
   \   000028   783A2578     DB 78H, 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH
   \            3A25783A
   \   000030   25783A25     DB 25H, 78H, 3AH, 25H, 78H, 22H, 2CH, 22H
   \            78222C22
   \   000038   53484F52     DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
   \            54414444
   \   000040   52223A22     DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
   \            30782578
   \   000048   222C2243     DB 22H, 2CH, 22H, 43H, 41H, 50H, 22H, 3AH
   \            4150223A
   \   000050   22307825     DB 22H, 30H, 78H, 25H, 78H, 22H, 7DH, 0DH
   \            78227D0D
   \   000058   0A00         DB 0AH, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">`:
   \   000000   434D447B     DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
   \            22434D44
   \   000008   223A2249     DB 22H, 3AH, 22H, 49H, 45H, 45H, 45H, 52H
   \            45454552
   \   000010   4551222C     DB 45H, 51H, 22H, 2CH, 22H, 53H, 54H, 41H
   \            22535441
   \   000018   54555322     DB 54H, 55H, 53H, 22H, 3AH, 30H, 2CH, 22H
   \            3A302C22
   \   000020   53484F52     DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
   \            54414444
   \   000028   52223A22     DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
   \            30782578
   \   000030   222C2254     DB 22H, 2CH, 22H, 54H, 79H, 70H, 65H, 22H
   \            79706522
   \   000038   3A302C22     DB 3AH, 30H, 2CH, 22H, 49H, 45H, 45H, 45H
   \            49454545
   \   000040   41444452     DB 41H, 44H, 44H, 52H, 22H, 3AH, 22H, 25H
   \            223A2225
   \   000048   783A2578     DB 78H, 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH
   \            3A25783A
   \   000050   25783A25     DB 25H, 78H, 3AH, 25H, 78H, 3AH, 25H, 78H
   \            783A2578
   \   000058   3A25783A     DB 3AH, 25H, 78H, 3AH, 25H, 78H, 22H, 7DH
   \            2578227D
   \   000060   0D0A00       DB 0DH, 0AH, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1`:
   \   000000   434D447B     DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
   \            22434D44
   \   000008   223A2249     DB 22H, 3AH, 22H, 49H, 45H, 45H, 45H, 52H
   \            45454552
   \   000010   4551222C     DB 45H, 51H, 22H, 2CH, 22H, 53H, 52H, 54H
   \            22535254
   \   000018   41444452     DB 41H, 44H, 44H, 52H, 22H, 3AH, 22H, 30H
   \            223A2230
   \   000020   78257822     DB 78H, 25H, 78H, 22H, 2CH, 22H, 54H, 42H
   \            2C225442
   \   000028   223A2230     DB 22H, 3AH, 22H, 30H, 78H, 25H, 78H, 22H
   \            78257822
   \   000030   7D0D0A00     DB 7DH, 0DH, 0AH, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD{\\"CMD\\":\\"ACTIVEEP\\",...">`:
   \   000000   434D447B     DB "CMD{\"CMD\":\"ACTIVEEP\",\"SRTADDR\":\"0x%x\",\"EP\":["
   \            22434D44
   \            223A2241
   \            43544956
   \            45455022
   \            2C225352
   \            54414444
   \            52223A22
   \            30782578
   \            222C2245
   \            50223A5B
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"0x%x\\",">`:
   \   000000   22307825     DB "\"0x%x\","
   \            78222C00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"0x%x\\"]}">`:
   \   000000   22307825     DB "\"0x%x\"]}"
   \            78225D7D
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "g">`:
   \   000000   6700         DB "g"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000
   1788          #endif // ZCL_EZMODE
   1789          
   1790          /****************************************************************************
   1791          ****************************************************************************/
   1792          
   1793          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     12   test
        0     12   -> HalUARTWrite
        0     12   -> strlen
      2     24   zclSampleLight_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      0     13   zclSampleLight_EZModeCB
        0     13   -> osal_start_timerEx
        0      9   -> zclSampleLight_ProcessIdentifyTimeChange
      0     32   zclSampleLight_HandleKeys
        0     19   -> NLME_GetShortAddr
        0     20   -> NLME_SendNetworkStatus
        0     19   -> ZDP_MgmtPermitJoinReq
        0     19   -> zclSampleLight_BasicResetCB
        0     19   -> zclSampleLight_LcdDisplayUpdate
        0     19   -> zcl_InvokeEZMode
      2      0   zclSampleLight_IdentifyCB
        2      0   -> zclSampleLight_ProcessIdentifyTimeChange
      0     64   zclSampleLight_IdentifyQueryRspCB
        0     62   -> HalUARTWrite
        0     64   -> sprintf
        0     62   -> strlen
        0     62   -> zcl_EZModeAction
      0      9   zclSampleLight_Init
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> zclDiagnostic_InitStats
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_RegisterEZMode
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
        0      9   -> zcl_registerReadWriteCB
      2     19   zclSampleLight_LcdDisplayUpdate
        2      0   -> HalLedSet
      0     10   zclSampleLight_OnOffCB
        0     10   -> zclSampleLight_LcdDisplayUpdate
        0     10   -> zcl_getRawAFMsg
      2     16   zclSampleLight_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      0     58   zclSampleLight_ProcessZDOMsgs
        0     26   -> HalUARTWrite
        0     26   -> ZDO_ParseAddrRsp
        0     26   -> ZDO_ParseDeviceAnnce
        0     26   -> ZDO_ParseEPListRsp
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     28   -> sprintf
        0     30   -> sprintf
        0     44   -> sprintf
        0     46   -> sprintf
        0     26   -> strcat
        0     26   -> strlen
        0     26   -> zcl_EZModeAction
      0     12   zclSampleLight_event_loop
        0     12   -> osal_mem_free
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclSampleLight_HandleKeys
        0     12   -> zclSampleLight_LcdDisplayUpdate
        0     12   -> zclSampleLight_ProcessIdentifyTimeChange
        0     12   -> zclSampleLight_ProcessZDOMsgs
        0     12   -> zcl_EZModeAction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      45  ?<Constant "CMD{\"CMD\":\"ACTIVEEP\",...">
      90  ?<Constant "CMD{\"CMD\":\"ANNCE\",\"IE...">
      42  ?<Constant "CMD{\"CMD\":\"IDENTIFYQ\"...">
      99  ?<Constant "CMD{\"CMD\":\"IEEEREQ\",\"...">
      52  ?<Constant "CMD{\"CMD\":\"IEEEREQ\",\"...">_1
       8  ?<Constant "\"0x%x\",">
       9  ?<Constant "\"0x%x\"]}">
       2  ?<Constant "g">
       6  ?<Initializer for sampleLight_TestEp>
      32  ?<Initializer for zclSampleLight_CmdCallbacks>
       1  ?<Initializer for zclSampleLight_NwkState>
       1  ??Subroutine10_0
       1  ??Subroutine11_0
      10  ??Subroutine12_0
       1  ??Subroutine13_0
       1  ??Subroutine14_0
       1  ??Subroutine15_0
       1  ??Subroutine16_0
       1  ??Subroutine17_0
       8  ??Subroutine18_0
       5  ??Subroutine19_0
       6  ??Subroutine8_0
       1  ??Subroutine9_0
       5  ?Subroutine0
       3  ?Subroutine1
       7  ?Subroutine2
       1  ?Subroutine3
       1  ?Subroutine4
      16  ?Subroutine5
       3  ?Subroutine6
      19  ?Subroutine7
       4  __Constant_3e8
       4  __Constant_bb8
       1  gPermitDuration
       1  giLightScreenMode
       6  sampleLight_TestEp
      64  test
       6  test::?relay
       1  zclSampleLightSeqNum
      57  zclSampleLight_BasicResetCB
       6  zclSampleLight_BasicResetCB::?relay
      32  zclSampleLight_CmdCallbacks
      12  zclSampleLight_DstAddr
      67  zclSampleLight_EZModeCB
       6  zclSampleLight_EZModeCB::?relay
     284  zclSampleLight_HandleKeys
       6  zclSampleLight_HandleKeys::?relay
      26  zclSampleLight_IdentifyCB
       6  zclSampleLight_IdentifyCB::?relay
      97  zclSampleLight_IdentifyQueryRspCB
       6  zclSampleLight_IdentifyQueryRspCB::?relay
     137  zclSampleLight_Init
       6  zclSampleLight_Init::?relay
      26  zclSampleLight_LcdDisplayUpdate
       6  zclSampleLight_LcdDisplayUpdate::?relay
       1  zclSampleLight_NwkState
      68  zclSampleLight_OnOffCB
       6  zclSampleLight_OnOffCB::?relay
      82  zclSampleLight_ProcessIdentifyTimeChange
       6  zclSampleLight_ProcessIdentifyTimeChange::?relay
     732  zclSampleLight_ProcessZDOMsgs
       6  zclSampleLight_ProcessZDOMsgs::?relay
      10  zclSampleLight_RegisterEZModeData
       1  zclSampleLight_TaskID
     295  zclSampleLight_event_loop
       6  zclSampleLight_event_loop::?relay

 
 2 027 bytes in segment BANKED_CODE
    72 bytes in segment BANK_RELAYS
    39 bytes in segment XDATA_I
    39 bytes in segment XDATA_ID
   365 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
 2 138 bytes of CODE  memory
   357 bytes of CONST memory (+ 8 bytes shared)
    55 bytes of XDATA memory

Errors: none
Warnings: 7
