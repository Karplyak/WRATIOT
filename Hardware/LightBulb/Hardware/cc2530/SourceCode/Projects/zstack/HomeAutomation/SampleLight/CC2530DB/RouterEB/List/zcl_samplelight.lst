###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                13/Jun/2016  16:05:00
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#    Command line       =  
#        -f
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
#        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List
#        -lA
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List\zcl_samplelight.lst
#    Object file        =  
#        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj\zcl_samplelight.r51
#
###############################################################################

H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "nwk_util.h"
     75          
     76          #include "zcl.h"
     77          #include "zcl_general.h"
     78          #include "zcl_ha.h"
     79          #include "zcl_ezmode.h"
     80          #include "zcl_diagnostic.h"
     81          
     82          #include "zcl_samplelight.h"
     83          
     84          #include "onboard.h"
     85          
     86          /* HAL */
     87          #include "hal_lcd.h"
     88          #include "hal_led.h"
     89          #include "hal_key.h"
     90          
     91          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     92                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     93          #include "zgp_translationtable.h"
     94            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
     95              #define ZGP_AUTO_TT
     96            #endif
     97          #endif
     98          
     99          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    100          #include "math.h"
    101          #include "hal_timer.h"
    102          #endif
    103          
    104          #include "NLMEDE.h"
    105          
    106          #include "DebugTrace.h"
    107          #include "string.h"
    108          #include "MT_UART.h"
    109          
    110          /*********************************************************************
    111           * MACROS
    112           */
    113          
    114          /*********************************************************************
    115           * CONSTANTS
    116           */
    117          #if (defined HAL_BOARD_ZLIGHT)
    118          #define LEVEL_MAX                 0xFE
    119          #define LEVEL_MIN                 0x0
    120          #define GAMMA_VALUE               2
    121          #define PWM_FULL_DUTY_CYCLE       1000
    122          #elif (defined HAL_PWM)
    123          #define LEVEL_MAX                 0xFE
    124          #define LEVEL_MIN                 0x0
    125          #define GAMMA_VALUE               2
    126          #define PWM_FULL_DUTY_CYCLE       100
    127          #endif
    128          
    129          /*********************************************************************
    130           * TYPEDEFS
    131           */
    132          
    133          /*********************************************************************
    134           * GLOBAL VARIABLES
    135           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          
    139          
    140          /*********************************************************************
    141           * GLOBAL FUNCTIONS
    142           */
    143          
    144          /*********************************************************************
    145           * LOCAL VARIABLES
    146           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          
    149          #ifdef ZCL_EZMODE
    150          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    151          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    152          
    153          
    154          // register EZ-Mode with task information (timeout events, callback, etc...)

   \                                 In  segment XDATA_ROM_C, align 1
    155          static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
   \                     zclSampleLight_RegisterEZModeData:
   \   000000   ....         DW zclSampleLight_TaskID
   \   000002   0800         DW 8
   \   000004   0400         DW 4
   \   000006   ....         DW zclSampleLightSeqNum
   \   000008   ....         DW `??zclSampleLight_EZModeCB::?relay`
    156          {
    157            &zclSampleLight_TaskID,
    158            SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    159            SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    160            &zclSampleLightSeqNum,
    161            zclSampleLight_EZModeCB
    162          };
    163          
    164          #else
    165          uint16 bindingInClusters[] =
    166          {
    167            ZCL_CLUSTER_ID_GEN_ON_OFF
    168          #ifdef ZCL_LEVEL_CTRL
    169            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    170          #endif
    171          };
    172          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    173          
    174          #endif  // ZCL_EZMODE
    175          
    176          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    178          {
    179            SAMPLELIGHT_ENDPOINT,
    180            &zclSampleLight_TaskID,
    181            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    182            (afNetworkLatencyReq_t)0            // No Network Latency req
    183          };
    184          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    186          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    188          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    189          devStates_t zclSampleLight_NwkState = DEV_INIT;
   \                     zclSampleLight_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleLight_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    190          
    191          #if ZCL_LEVEL_CTRL
    192          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
    193          uint8 zclSampleLight_NewLevel;        // new level when done moving
    194          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
    195          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
    196          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
    197          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
    198          #endif
    199          
    200          /*********************************************************************
    201           * LOCAL FUNCTIONS
    202           */
    203          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    204          static void zclSampleLight_BasicResetCB( void );
    205          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
    206          static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    207          static void zclSampleLight_OnOffCB( uint8 cmd );
    208          static void zclSampleLight_ProcessIdentifyTimeChange( void );
    209          #ifdef ZCL_LEVEL_CTRL
    210          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    211          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    212          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    213          static void zclSampleLight_LevelControlStopCB( void );
    214          static void zclSampleLight_DefaultMove( void );
    215          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    216          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    217          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    218          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    219          static void zclSampleLight_AdjustLightLevel( void );
    220          #endif
    221          
    222          // app display functions
    223          static void zclSampleLight_LcdDisplayUpdate( void );
    224          #ifdef LCD_SUPPORTED
    225          static void zclSampleLight_LcdDisplayMainMode( void );
    226          static void zclSampleLight_LcdDisplayHelpMode( void );
    227          #endif
    228          static void zclSampleLight_DisplayLight( void );
    229          
    230          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    231          void zclSampleLight_UpdateLampLevel( uint8 level );
    232          #endif
    233          
    234          // Functions to process ZCL Foundation incoming Command/Response messages
    235          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    236          #ifdef ZCL_READ
    237          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    238          #endif
    239          #ifdef ZCL_WRITE
    240          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    241          #endif
    242          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    243          #ifdef ZCL_DISCOVER
    244          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    245          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    246          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    247          #endif
    248          
    249          /*********************************************************************
    250           * STATUS STRINGS
    251           */
    252          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    253          const char sDeviceName[]   = "  Sample Light";
   \                     sDeviceName:
   \   000000   20205361     DB "  Sample Light"
   \            6D706C65
   \            204C6967
   \            687400  

   \                                 In  segment XDATA_ROM_C, align 1
    254          const char sClearLine[]    = " ";
   \                     sClearLine:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
    255          const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
   \                     sSwLight:
   \   000000   5357313A     DB "SW1: ToggleLight"
   \            20546F67
   \            676C654C
   \            69676874
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    256          const char sSwEZMode[]     = "SW2: EZ-Mode";
   \                     sSwEZMode:
   \   000000   5357323A     DB "SW2: EZ-Mode"
   \            20455A2D
   \            4D6F6465
   \            00      

   \                                 In  segment XDATA_I, align 1, keep-with-next
    257          char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
   \                     sSwHelp:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for sSwHelp>`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ROM_C, align 1
    258          const char sLightOn[]      = "    LIGHT ON ";
   \                     sLightOn:
   \   000000   20202020     DB "    LIGHT ON "
   \            4C494748
   \            54204F4E
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
    259          const char sLightOff[]     = "    LIGHT OFF";
   \                     sLightOff:
   \   000000   20202020     DB "    LIGHT OFF"
   \            4C494748
   \            54204F46
   \            4600    
    260           #if ZCL_LEVEL_CTRL
    261           char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
    262           #endif
    263          #endif
    264          
    265          /*********************************************************************
    266           * ZCL General Profile Callback table
    267           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    268          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   000020                REQUIRE __INIT_XDATA_I
    269          {
    270            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    271            zclSampleLight_IdentifyCB,              // Identify command
    272          #ifdef ZCL_EZMODE
    273            NULL,                                   // Identify EZ-Mode Invoke command
    274            NULL,                                   // Identify Update Commission State command
    275          #endif
    276            NULL,                                   // Identify Trigger Effect command
    277            zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
    278            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    279            NULL,                                   // On/Off cluster enhanced command Off with Effect
    280            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    281            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    282          #ifdef ZCL_LEVEL_CTRL
    283            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    284            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    285            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    286            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    287          #endif
    288          #ifdef ZCL_GROUPS
    289            NULL,                                   // Group Response commands
    290          #endif
    291          #ifdef ZCL_SCENES
    292            NULL,                                  // Scene Store Request command
    293            NULL,                                  // Scene Recall Request command
    294            NULL,                                  // Scene Response command
    295          #endif
    296          #ifdef ZCL_ALARMS
    297            NULL,                                  // Alarm (Response) commands
    298          #endif
    299          #ifdef SE_UK_EXT
    300            NULL,                                  // Get Event Log command
    301            NULL,                                  // Publish Event Log command
    302          #endif
    303            NULL,                                  // RSSI Location command
    304            NULL                                   // RSSI Location Response command
    305          };
    306          
    307          /*********************************************************************
    308           * @fn          zclSampleLight_Init
    309           *
    310           * @brief       Initialization function for the zclGeneral layer.
    311           *
    312           * @param       none
    313           *
    314           * @return      none
    315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    317          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    318            zclSampleLight_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    319          
    320            // Set destination address to indirect
    321            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    322            zclSampleLight_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    323            zclSampleLight_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    324          
    325            // This app is part of the Home Automation Profile
    326            zclHA_Init( &zclSampleLight_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zclSampleLight_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    327          
    328            // Register the ZCL General Cluster Library callback functions
    329            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
   \   00001F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001F   7A..         MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000021   7B..         MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000023   7908         MOV     R1,#0x8
   \   000025   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    330          
    331            // Register the application's attribute list
    332            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
   \   000028                ; Setup parameters for call to function zcl_registerAttrList
   \   000028   7C..         MOV     R4,#zclSampleLight_Attrs & 0xff
   \   00002A   7D..         MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   00002C   90....       MOV     DPTR,#zclSampleLight_NumAttributes
   \   00002F   E4           CLR     A
   \   000030   93           MOVC    A,@A+DPTR
   \   000031   FA           MOV     R2,A
   \   000032   7908         MOV     R1,#0x8
   \   000034   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    333          
    334            // Register the Application to receive the unprocessed Foundation command/response messages
    335            zcl_registerForMsg( zclSampleLight_TaskID );
   \   000037                ; Setup parameters for call to function zcl_registerForMsg
   \   000037   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    336          
    337          #ifdef ZCL_DISCOVER
    338            // Register the application's command list
    339            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
    340          #endif
    341          
    342            // Register for all key events - This app will handle all key events
    343            RegisterForKeys( zclSampleLight_TaskID );
   \   00003F                ; Setup parameters for call to function RegisterForKeys
   \   00003F   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    344          
    345            // Register for a test endpoint
    346            afRegister( &sampleLight_TestEp );
   \   000047                ; Setup parameters for call to function afRegister
   \   000047   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   000049   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   00004B   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    347          
    348          #ifdef ZCL_EZMODE
    349            // Register EZ-Mode
    350            zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
   \   00004E                ; Setup parameters for call to function zcl_RegisterEZMode
   \   00004E   7A..         MOV     R2,#zclSampleLight_RegisterEZModeData & 0xff
   \   000050   7B..         MOV     R3,#(zclSampleLight_RegisterEZModeData >> 8) & 0xff
   \   000052   12....       LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
    351          
    352            // Register with the ZDO to receive Match Descriptor Responses
    353            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
   \   000055                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000055   7A06         MOV     R2,#0x6
   \   000057   7B80         MOV     R3,#-0x80
   \   000059   EE           MOV     A,R6
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    354          #endif
    355          
    356          
    357          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    358            HalTimer1Init( 0 );
    359            halTimer1SetChannelDuty( WHITE_LED, 0 );
    360            halTimer1SetChannelDuty( RED_LED, 0 );
    361            halTimer1SetChannelDuty( BLUE_LED, 0 );
    362            halTimer1SetChannelDuty( GREEN_LED, 0 );
    363          
    364            // find if we are already on a network from NV_RESTORE
    365            uint8 state;
    366            NLME_GetRequest( nwkNwkState, 0, &state );
    367          
    368            if ( state < NWK_ENDDEVICE )
    369            {
    370              // Start EZMode on Start up to avoid button press
    371              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
    372            }
    373          #if ZCL_LEVEL_CTRL
    374            zclSampleLight_DefaultMove();
    375          #endif
    376          #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    377          
    378          #ifdef ZCL_DIAGNOSTIC
    379            // Register the application's callback function to read/write attribute data.
    380            // This is only required when the attribute data format is unknown to ZCL.
    381            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   00005E                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   00005E   7C00         MOV     R4,#0x0
   \   000060   7D00         MOV     R5,#0x0
   \   000062   7A..         MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
   \   000064   7B..         MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   000066   7908         MOV     R1,#0x8
   \   000068   12....       LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    382          
    383            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   00006B                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   00006B   12....       LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
    384            {
    385              // Here the user could start the timer to save Diagnostics to NV
    386            }
    387          #endif
    388          
    389          #ifdef LCD_SUPPORTED
    390            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
   \   00006E                ; Setup parameters for call to function HalLcdWriteString
   \   00006E   7903         MOV     R1,#0x3
   \   000070   7A..         MOV     R2,#sDeviceName & 0xff
   \   000072   7B..         MOV     R3,#(sDeviceName >> 8) & 0xff
   \   000074   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    391          #endif  // LCD_SUPPORTED
    392          
    393          #ifdef ZGP_AUTO_TT
    394            zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
    395          #endif
    396          }
   \   000077                REQUIRE ?Subroutine0
   \   000077                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    397          
    398          /*********************************************************************
    399           * @fn          zclSample_event_loop
    400           *
    401           * @brief       Event Loop Processor for zclGeneral.
    402           *
    403           * @param       none
    404           *
    405           * @return      none
    406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    409            afIncomingMSGPacket_t *MSGpkt;
    410          
    411            (void)task_id;  // Intentionally unreferenced parameter
    412          
    413            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7050         JNZ     ??zclSampleLight_event_loop_0
    414            {
    415              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    416              {
    417                switch ( MSGpkt->hdr.event )
    418                {
    419          #ifdef ZCL_EZMODE
    420                  case ZDO_CB_MSG:
    421                    zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    422                    break;
    423          #endif
    424                  case ZCL_INCOMING_MSG:
    425                    // Incoming ZCL Foundation command/response messages
    426                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    427                    break;
    428          
    429                  case KEY_CHANGE:
    430                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    431                    break;
    432          
    433                  case ZDO_STATE_CHANGE:
    434                    zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
    435          
    436                    // now on the network
    437                    if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    438                         (zclSampleLight_NwkState == DEV_ROUTER)   ||
    439                         (zclSampleLight_NwkState == DEV_END_DEVICE) )
    440                    {
    441                      giLightScreenMode = LIGHT_MAINMODE;
    442                      zclSampleLight_LcdDisplayUpdate();
    443          #ifdef ZCL_EZMODE
    444                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    445          #endif // ZCL_EZMODE
    446                    }
    447                    break;
    448          
    449                  default:
    450                    break;
    451                }
    452          
    453                // Release the memory
    454                osal_msg_deallocate( (uint8 *)MSGpkt );
    455              }
    456          
    457              // return unprocessed events
    458              return (events ^ SYS_EVENT_MSG);
    459            }
    460          
    461            if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
   \   000012   EE           MOV     A,R6
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   4003         JC      $+5
   \   000017   02....       LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
    462            {
    463              if ( zclSampleLight_IdentifyTime > 0 )
   \   00001A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   600C         JZ      ??zclSampleLight_event_loop_2
    464                zclSampleLight_IdentifyTime--;
   \   000021   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000024   E0           MOVX    A,@DPTR
   \   000025   24FF         ADD     A,#-0x1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   34FF         ADDC    A,#-0x1
   \   00002C   F0           MOVX    @DPTR,A
    465              zclSampleLight_ProcessIdentifyTimeChange();
   \                     ??zclSampleLight_event_loop_2:
   \   00002D                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   00002D   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    466          
    467              return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000030   EE           MOV     A,R6
   \   000031   6401         XRL     A,#0x1
   \   000033   02....       LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
    468            }
   \                     ??zclSampleLight_event_loop_4:
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   6409         XRL     A,#0x9
   \   00003E   600A         JZ      ??zclSampleLight_event_loop_5
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6407         XRL     A,#0x7
   \   000043   6005         JZ      ??zclSampleLight_event_loop_5
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6406         XRL     A,#0x6
   \   000048   7011         JNZ     ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_5:
   \   00004A   90....       MOV     DPTR,#giLightScreenMode
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00004F   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
   \   000052                ; Setup parameters for call to function zcl_EZModeAction
   \   000052   7A00         MOV     R2,#0x0
   \   000054   7B00         MOV     R3,#0x0
   \   000056   7902         MOV     R1,#0x2
   \   000058   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \                     ??zclSampleLight_event_loop_6:
   \   00005B                ; Setup parameters for call to function osal_msg_deallocate
   \   00005B   AA..         MOV     R2,?V0
   \   00005D   AB..         MOV     R3,?V1
   \   00005F   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   000062                ; Setup parameters for call to function osal_msg_receive
   \   000062   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00006A   8A..         MOV     ?V0,R2
   \   00006C   8B..         MOV     ?V1,R3
   \   00006E   EA           MOV     A,R2
   \   00006F   45..         ORL     A,?V1
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??zclSampleLight_event_loop_7 & 0xFFFF
   \   000076   8A82         MOV     DPL,R2
   \   000078   8B83         MOV     DPH,R3
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   24CC         ADD     A,#-0x34
   \   00007D   6039         JZ      ??zclSampleLight_event_loop_8
   \   00007F   2474         ADD     A,#0x74
   \   000081   607C         JZ      ??zclSampleLight_event_loop_9
   \   000083   24EF         ADD     A,#-0x11
   \   000085   60AF         JZ      ??zclSampleLight_event_loop_4
   \   000087   24FE         ADD     A,#-0x2
   \   000089   70D0         JNZ     ??zclSampleLight_event_loop_6
   \   00008B   EA           MOV     A,R2
   \   00008C   240C         ADD     A,#0xc
   \   00008E   F582         MOV     DPL,A
   \   000090   E4           CLR     A
   \   000091   35..         ADDC    A,?V1
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   6406         XRL     A,#0x6
   \   000098   7004         JNZ     ??zclSampleLight_event_loop_10
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6480         XRL     A,#0x80
   \                     ??zclSampleLight_event_loop_10:
   \   00009E   70BB         JNZ     ??zclSampleLight_event_loop_6
   \   0000A0                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000A0   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   0000A3   8A..         MOV     ?V2,R2
   \   0000A5   8B..         MOV     ?V3,R3
   \   0000A7   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000AA   7905         MOV     R1,#0x5
   \   0000AC   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \   0000AF                ; Setup parameters for call to function osal_mem_free
   \   0000AF   AA..         MOV     R2,?V2
   \   0000B1   AB..         MOV     R3,?V3
   \                     ??zclSampleLight_event_loop_11:
   \   0000B3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B6   80A3         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_8:
   \   0000B8   EA           MOV     A,R2
   \   0000B9   2417         ADD     A,#0x17
   \   0000BB   F8           MOV     R0,A
   \   0000BC   E4           CLR     A
   \   0000BD   35..         ADDC    A,?V1
   \   0000BF   F9           MOV     R1,A
   \   0000C0   E8           MOV     A,R0
   \   0000C1   FA           MOV     R2,A
   \   0000C2   E9           MOV     A,R1
   \   0000C3   FB           MOV     R3,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   14           DEC     A
   \   0000CD   6011         JZ      ??zclSampleLight_event_loop_12
   \   0000CF   24FD         ADD     A,#-0x3
   \   0000D1   701A         JNZ     ??zclSampleLight_event_loop_13
   \   0000D3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F9           MOV     R1,A
   \   0000D8   E8           MOV     A,R0
   \   0000D9   C3           CLR     C
   \   0000DA   99           SUBB    A,R1
   \   0000DB   5010         JNC     ??zclSampleLight_event_loop_13
   \   0000DD   08           INC     R0
   \   0000DE   80F6         SJMP    ??CrossCallReturnLabel_2
   \                     ??zclSampleLight_event_loop_12:
   \   0000E0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000E3   8001         SJMP    ??zclSampleLight_event_loop_14
   \                     ??zclSampleLight_event_loop_15:
   \   0000E5   08           INC     R0
   \                     ??zclSampleLight_event_loop_14:
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   E8           MOV     A,R0
   \   0000E9   C3           CLR     C
   \   0000EA   99           SUBB    A,R1
   \   0000EB   40F8         JC      ??zclSampleLight_event_loop_15
   \                     ??zclSampleLight_event_loop_13:
   \   0000ED   8A82         MOV     DPL,R2
   \   0000EF   8B83         MOV     DPH,R3
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FA           MOV     R2,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   FB           MOV     R3,A
   \   0000F6   EA           MOV     A,R2
   \   0000F7   4B           ORL     A,R3
   \   0000F8   7003         JNZ     $+5
   \   0000FA   02....       LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
   \   0000FD                ; Setup parameters for call to function osal_mem_free
   \   0000FD   80B4         SJMP    ??zclSampleLight_event_loop_11
   \                     ??zclSampleLight_event_loop_9:
   \   0000FF                ; Setup parameters for call to function zclSampleLight_HandleKeys
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   FA           MOV     R2,A
   \   000104   85..82       MOV     DPL,?V0
   \   000107   8B83         MOV     DPH,R3
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F9           MOV     R1,A
   \   00010D   12....       LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
   \   000110   02....       LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
   \                     ??zclSampleLight_event_loop_7:
   \   000113   EE           MOV     A,R6
   \   000114   FA           MOV     R2,A
   \   000115   EF           MOV     A,R7
   \   000116   6480         XRL     A,#0x80
   \   000118   8037         SJMP    ??zclSampleLight_event_loop_16
    469          
    470            if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   00011A   5410         ANL     A,#0x10
   \   00011C   600D         JZ      ??zclSampleLight_event_loop_17
    471            {
    472              giLightScreenMode = LIGHT_MAINMODE;
   \   00011E   90....       MOV     DPTR,#giLightScreenMode
   \   000121   E4           CLR     A
   \   000122   F0           MOVX    @DPTR,A
    473              zclSampleLight_LcdDisplayUpdate();
   \   000123                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   000123   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    474          
    475              return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
   \   000126   EE           MOV     A,R6
   \   000127   6410         XRL     A,#0x10
   \   000129   8024         SJMP    ??zclSampleLight_event_loop_3
    476            }
    477          
    478          #ifdef ZCL_EZMODE
    479          #if (defined HAL_BOARD_ZLIGHT)
    480            // event to start EZMode on startup with a delay
    481            if ( events & SAMPLELIGHT_START_EZMODE_EVT )
    482            {
    483              // Invoke EZ-Mode
    484              zclEZMode_InvokeData_t ezModeData;
    485          
    486              // Invoke EZ-Mode
    487              ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    488              if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    489                   (zclSampleLight_NwkState == DEV_ROUTER)   ||
    490                   (zclSampleLight_NwkState == DEV_END_DEVICE) )
    491              {
    492                ezModeData.onNetwork = TRUE;      // node is already on the network
    493              }
    494              else
    495              {
    496                ezModeData.onNetwork = FALSE;     // node is not yet on the network
    497              }
    498              ezModeData.initiator = FALSE;          // OnOffLight is a target
    499              ezModeData.numActiveOutClusters = 0;
    500              ezModeData.pActiveOutClusterIDs = NULL;
    501              ezModeData.numActiveInClusters = 0;
    502              ezModeData.pActiveOutClusterIDs = NULL;
    503              zcl_InvokeEZMode( &ezModeData );
    504          
    505              return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
    506            }
    507          #endif // #if (defined HAL_BOARD_ZLIGHT)
    508          
    509            // going on to next state
    510            if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
   \                     ??zclSampleLight_event_loop_17:
   \   00012B   EE           MOV     A,R6
   \   00012C   5408         ANL     A,#0x8
   \   00012E   600E         JZ      ??zclSampleLight_event_loop_18
    511            {
    512              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
   \   000130                ; Setup parameters for call to function zcl_EZModeAction
   \   000130   7A00         MOV     R2,#0x0
   \   000132   7B00         MOV     R3,#0x0
   \   000134   7901         MOV     R1,#0x1
   \   000136   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    513              return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
   \   000139   EE           MOV     A,R6
   \   00013A   6408         XRL     A,#0x8
   \   00013C   8011         SJMP    ??zclSampleLight_event_loop_3
    514            }
    515          
    516            // the overall EZMode timer expired, so we timed out
    517            if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
   \                     ??zclSampleLight_event_loop_18:
   \   00013E   EE           MOV     A,R6
   \   00013F   5404         ANL     A,#0x4
   \   000141   7A00         MOV     R2,#0x0
   \   000143   7B00         MOV     R3,#0x0
   \   000145   600B         JZ      ??zclSampleLight_event_loop_19
    518            {
    519              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
   \   000147                ; Setup parameters for call to function zcl_EZModeAction
   \   000147   7963         MOV     R1,#0x63
   \   000149   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    520              return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
   \   00014C   EE           MOV     A,R6
   \   00014D   6404         XRL     A,#0x4
   \                     ??zclSampleLight_event_loop_3:
   \   00014F   FA           MOV     R2,A
   \   000150   EF           MOV     A,R7
   \                     ??zclSampleLight_event_loop_16:
   \   000151   FB           MOV     R3,A
    521            }
    522          #endif // ZLC_EZMODE
    523          
    524          #ifdef ZCL_LEVEL_CTRL
    525            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
    526            {
    527              zclSampleLight_AdjustLightLevel();
    528              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
    529            }
    530          #endif
    531          
    532            // Discard unknown events
    533            return 0;
   \                     ??zclSampleLight_event_loop_19:
   \   000152   7402         MOV     A,#0x2
   \   000154   12....       LCALL   ?DEALLOC_XSTACK8
   \   000157   7F06         MOV     R7,#0x6
   \   000159   02....       LJMP    ?BANKED_LEAVE_XDATA
    534          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000003                REQUIRE ??Subroutine6_0
   \   000003                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B                ; Setup parameters for call to function zcl_EZModeAction
   \   00000B                ; Setup parameters for call to function zcl_EZModeAction
   \   00000B   AA..         MOV     R2,?XSP + 0
   \   00000D   AB..         MOV     R3,?XSP + 1
   \   00000F   22           RET
    535          
    536          /*********************************************************************
    537           * @fn      zclSampleLight_HandleKeys
    538           *
    539           * @brief   Handles all key events for this device.
    540           *
    541           * @param   shift - true if in shift/alt.
    542           * @param   keys - bit field for key events. Valid entries:
    543           *                 HAL_KEY_SW_5
    544           *                 HAL_KEY_SW_4
    545           *                 HAL_KEY_SW_2
    546           *                 HAL_KEY_SW_1
    547           *
    548           * @return  none
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          static void zclSampleLight_HandleKeys( byte shift, byte keys )
   \                     zclSampleLight_HandleKeys:
    551          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    552            if ( keys & HAL_KEY_SW_1 )
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5011         JNC     ??zclSampleLight_HandleKeys_0
    553            {
    554              giLightScreenMode = LIGHT_MAINMODE;
   \   000012   90....       MOV     DPTR,#giLightScreenMode
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    555          
    556              // toggle local light immediately
    557              zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
   \   000017   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6003         JZ      ??zclSampleLight_HandleKeys_1
   \   00001D   E4           CLR     A
   \   00001E   8002         SJMP    ??zclSampleLight_HandleKeys_2
   \                     ??zclSampleLight_HandleKeys_1:
   \   000020   7401         MOV     A,#0x1
   \                     ??zclSampleLight_HandleKeys_2:
   \   000022   F0           MOVX    @DPTR,A
    558          #ifdef ZCL_LEVEL_CTRL
    559              zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    560          #endif
    561            }
    562          
    563            if ( keys & HAL_KEY_SW_2 )
   \                     ??zclSampleLight_HandleKeys_0:
   \   000023   EF           MOV     A,R7
   \   000024   A2E1         MOV     C,0xE0 /* A   */.1
   \   000026   505E         JNC     ??zclSampleLight_HandleKeys_3
    564            {
    565          #if (defined HAL_BOARD_ZLIGHT)
    566          
    567              zclSampleLight_BasicResetCB();
    568          
    569          #else
    570          
    571              giLightScreenMode = LIGHT_MAINMODE;
   \   000028   90....       MOV     DPTR,#giLightScreenMode
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    572          
    573          #ifdef ZCL_EZMODE
    574              {
    575                // Invoke EZ-Mode
    576                zclEZMode_InvokeData_t ezModeData;
    577          
    578                // Invoke EZ-Mode
    579                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   7408         MOV     A,#0x8
   \   000035   F0           MOVX    @DPTR,A
    580                if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    581                    (zclSampleLight_NwkState == DEV_ROUTER)   ||
    582                      (zclSampleLight_NwkState == DEV_END_DEVICE) )
   \   000036   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6409         XRL     A,#0x9
   \   00003C   600A         JZ      ??zclSampleLight_HandleKeys_4
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6407         XRL     A,#0x7
   \   000041   6005         JZ      ??zclSampleLight_HandleKeys_4
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6406         XRL     A,#0x6
   \   000046   7009         JNZ     ??zclSampleLight_HandleKeys_5
    583                {
    584                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zclSampleLight_HandleKeys_4:
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   8006         SJMP    ??zclSampleLight_HandleKeys_6
    585                }
    586                else
    587                {
    588                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zclSampleLight_HandleKeys_5:
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E4           CLR     A
   \                     ??zclSampleLight_HandleKeys_6:
   \   000057   F0           MOVX    @DPTR,A
    589                }
    590                ezModeData.initiator = FALSE;          // OnOffLight is a target
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    591                ezModeData.numActiveOutClusters = 0;
   \   00005F   7406         MOV     A,#0x6
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    592                ezModeData.pActiveOutClusterIDs = NULL;
   \   000066   7407         MOV     A,#0x7
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   F0           MOVX    @DPTR,A
    593                ezModeData.numActiveInClusters = 0;
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
    594                ezModeData.pActiveOutClusterIDs = NULL;
   \   000076   7407         MOV     A,#0x7
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   F0           MOVX    @DPTR,A
    595                zcl_InvokeEZMode( &ezModeData );
   \   00007F                ; Setup parameters for call to function zcl_InvokeEZMode
   \   00007F   AA..         MOV     R2,?XSP + 0
   \   000081   AB..         MOV     R3,?XSP + 1
   \   000083   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    596              }
    597          
    598          #else // NOT EZ-Mode
    599              {
    600                zAddrType_t dstAddr;
    601                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    602          
    603                // Initiate an End Device Bind Request, this bind request will
    604                // only use a cluster list that is important to binding.
    605                dstAddr.addrMode = afAddr16Bit;
    606                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    607                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    608                                     SAMPLELIGHT_ENDPOINT,
    609                                     ZCL_HA_PROFILE_ID,
    610                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    611                                     0, NULL,   // No Outgoing clusters to bind
    612                                     TRUE );
    613              }
    614          #endif // ZCL_EZMODE
    615          #endif // HAL_BOARD_ZLIGHT
    616            }
    617          
    618            if ( keys & HAL_KEY_SW_3 )
   \                     ??zclSampleLight_HandleKeys_3:
   \   000086   EF           MOV     A,R7
   \   000087   A2E4         MOV     C,0xE0 /* A   */.4
   \   000089   5025         JNC     ??zclSampleLight_HandleKeys_7
    619            {
    620              NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
    621                                 NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
   \   00008B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00008E   8A..         MOV     ?V0,R2
   \   000090   8B..         MOV     ?V1,R3
   \   000092   AC..         MOV     R4,?V0
   \   000094   AD..         MOV     R5,?V1
   \   000096                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   000096   75..00       MOV     ?V0,#0x0
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   7902         MOV     R1,#0x2
   \   0000A0   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000AB   7401         MOV     A,#0x1
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
    622            }
    623          
    624            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclSampleLight_HandleKeys_7:
   \   0000B0   EF           MOV     A,R7
   \   0000B1   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000B3   5041         JNC     ??zclSampleLight_HandleKeys_8
    625            {
    626              giLightScreenMode = LIGHT_MAINMODE;
   \   0000B5   90....       MOV     DPTR,#giLightScreenMode
   \   0000B8   E4           CLR     A
   \   0000B9   F0           MOVX    @DPTR,A
    627          
    628              if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
    629                    ( zclSampleLight_NwkState == DEV_ROUTER ) )
   \   0000BA   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   6409         XRL     A,#0x9
   \   0000C0   6005         JZ      ??zclSampleLight_HandleKeys_9
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   6407         XRL     A,#0x7
   \   0000C5   702F         JNZ     ??zclSampleLight_HandleKeys_8
    630              {
    631                zAddrType_t tmpAddr;
    632          
    633                tmpAddr.addrMode = Addr16Bit;
   \                     ??zclSampleLight_HandleKeys_9:
   \   0000C7   7408         MOV     A,#0x8
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   F0           MOVX    @DPTR,A
    634                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0000CF                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000CF   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   EA           MOV     A,R2
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   EB           MOV     A,R3
   \   0000DC   F0           MOVX    @DPTR,A
    635          
    636                // toggle permit join
    637                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   0000DD   90....       MOV     DPTR,#gPermitDuration
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6003         JZ      ??zclSampleLight_HandleKeys_10
   \   0000E3   E4           CLR     A
   \   0000E4   8002         SJMP    ??zclSampleLight_HandleKeys_11
   \                     ??zclSampleLight_HandleKeys_10:
   \   0000E6   74FF         MOV     A,#-0x1
   \                     ??zclSampleLight_HandleKeys_11:
   \   0000E8   F0           MOVX    @DPTR,A
    638          
    639                // Trust Center significance is always true
    640                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   0000E9                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   0000E9   7D00         MOV     R5,#0x0
   \   0000EB   7C01         MOV     R4,#0x1
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   AA..         MOV     R2,?XSP + 0
   \   0000F1   AB..         MOV     R3,?XSP + 1
   \   0000F3   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    641              }
    642            }
    643          
    644            // Shift F5 does a Basic Reset (factory defaults)
    645            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zclSampleLight_HandleKeys_8:
   \   0000F6   EE           MOV     A,R6
   \   0000F7   600A         JZ      ??zclSampleLight_HandleKeys_12
   \   0000F9   EF           MOV     A,R7
   \   0000FA   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000FC   5016         JNC     ??zclSampleLight_HandleKeys_13
    646            {
    647              zclSampleLight_BasicResetCB();
   \   0000FE                ; Setup parameters for call to function zclSampleLight_BasicResetCB
   \   0000FE   12....       LCALL   `??zclSampleLight_BasicResetCB::?relay`; Banked call to: zclSampleLight_BasicResetCB
   \   000101   8011         SJMP    ??zclSampleLight_HandleKeys_13
    648            }
    649            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zclSampleLight_HandleKeys_12:
   \   000103   EF           MOV     A,R7
   \   000104   A2E2         MOV     C,0xE0 /* A   */.2
   \   000106   500C         JNC     ??zclSampleLight_HandleKeys_13
    650            {
    651              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
   \   000108   90....       MOV     DPTR,#giLightScreenMode
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   6003         JZ      ??zclSampleLight_HandleKeys_14
   \   00010E   E4           CLR     A
   \   00010F   8002         SJMP    ??zclSampleLight_HandleKeys_15
   \                     ??zclSampleLight_HandleKeys_14:
   \   000111   7401         MOV     A,#0x1
   \                     ??zclSampleLight_HandleKeys_15:
   \   000113   F0           MOVX    @DPTR,A
    652            }
    653          
    654            // update the display, including the light
    655            zclSampleLight_LcdDisplayUpdate();
   \                     ??zclSampleLight_HandleKeys_13:
   \   000114                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   000114   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    656          }
   \   000117   7409         MOV     A,#0x9
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011C                REQUIRE ?Subroutine1
   \   00011C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    657          
    658          /*********************************************************************
    659           * @fn      zclSampleLight_LcdDisplayUpdate
    660           *
    661           * @brief   Called to update the LCD display.
    662           *
    663           * @param   none
    664           *
    665           * @return  none
    666           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    667          void zclSampleLight_LcdDisplayUpdate( void )
   \                     zclSampleLight_LcdDisplayUpdate:
    668          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    669          #ifdef LCD_SUPPORTED
    670            if ( giLightScreenMode == LIGHT_HELPMODE )
   \   000004   90....       MOV     DPTR,#giLightScreenMode
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7014         JNZ     ??zclSampleLight_LcdDisplayUpdate_0
    671            {
    672              zclSampleLight_LcdDisplayHelpMode();
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   7A..         MOV     R2,#sSwLight & 0xff
   \   000010   7B..         MOV     R3,#(sSwLight >> 8) & 0xff
   \   000012   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000015                ; Setup parameters for call to function HalLcdWriteString
   \   000015   7902         MOV     R1,#0x2
   \   000017   7A..         MOV     R2,#sSwEZMode & 0xff
   \   000019   7B..         MOV     R3,#(sSwEZMode >> 8) & 0xff
   \   00001B   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00001E                ; Setup parameters for call to function HalLcdWriteString
   \   00001E   802F         SJMP    ??zclSampleLight_LcdDisplayUpdate_1
    673            }
    674            else
    675            {
    676              zclSampleLight_LcdDisplayMainMode();
   \                     ??zclSampleLight_LcdDisplayUpdate_0:
   \   000020   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6409         XRL     A,#0x9
   \   000026   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_2
   \   000028                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000028   7900         MOV     R1,#0x0
   \   00002A   8010         SJMP    ??zclSampleLight_LcdDisplayUpdate_3
   \                     ??zclSampleLight_LcdDisplayUpdate_2:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6407         XRL     A,#0x7
   \   00002F   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_4
   \   000031                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000031   7901         MOV     R1,#0x1
   \   000033   8007         SJMP    ??zclSampleLight_LcdDisplayUpdate_3
   \                     ??zclSampleLight_LcdDisplayUpdate_4:
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6406         XRL     A,#0x6
   \   000038   7005         JNZ     ??zclSampleLight_LcdDisplayUpdate_5
   \   00003A                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   00003A   7902         MOV     R1,#0x2
   \                     ??zclSampleLight_LcdDisplayUpdate_3:
   \   00003C   12....       LCALL   `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
   \                     ??zclSampleLight_LcdDisplayUpdate_5:
   \   00003F   90....       MOV     DPTR,#gPermitDuration
   \   000042   E0           MOVX    A,@DPTR
   \   000043   90....       MOV     DPTR,#sSwHelp + 15
   \   000046   6004         JZ      ??zclSampleLight_LcdDisplayUpdate_6
   \   000048   742A         MOV     A,#0x2a
   \   00004A   8002         SJMP    ??zclSampleLight_LcdDisplayUpdate_7
   \                     ??zclSampleLight_LcdDisplayUpdate_6:
   \   00004C   7420         MOV     A,#0x20
   \                     ??zclSampleLight_LcdDisplayUpdate_7:
   \   00004E   F0           MOVX    @DPTR,A
   \                     ??zclSampleLight_LcdDisplayUpdate_1:
   \   00004F                ; Setup parameters for call to function HalLcdWriteString
   \   00004F   7903         MOV     R1,#0x3
   \   000051   7A..         MOV     R2,#sSwHelp & 0xff
   \   000053   7B..         MOV     R3,#(sSwHelp >> 8) & 0xff
   \   000055   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    677            }
    678          #endif
    679          
    680            zclSampleLight_DisplayLight();
   \   000058   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6401         XRL     A,#0x1
   \   00005E   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_8
   \   000060                ; Setup parameters for call to function HalLedSet
   \   000060   7A01         MOV     R2,#0x1
   \   000062   8002         SJMP    ??zclSampleLight_LcdDisplayUpdate_9
   \                     ??zclSampleLight_LcdDisplayUpdate_8:
   \   000064                ; Setup parameters for call to function HalLedSet
   \   000064   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_LcdDisplayUpdate_9:
   \   000066   7901         MOV     R1,#0x1
   \   000068   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00006B   90....       MOV     DPTR,#giLightScreenMode
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   7015         JNZ     ??zclSampleLight_LcdDisplayUpdate_10
   \   000071   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000074   E0           MOVX    A,@DPTR
   \   000075   7902         MOV     R1,#0x2
   \   000077   6006         JZ      ??zclSampleLight_LcdDisplayUpdate_11
   \   000079                ; Setup parameters for call to function HalLcdWriteString
   \   000079   7A..         MOV     R2,#sLightOn & 0xff
   \   00007B   7B..         MOV     R3,#(sLightOn >> 8) & 0xff
   \   00007D   8004         SJMP    ??zclSampleLight_LcdDisplayUpdate_12
   \                     ??zclSampleLight_LcdDisplayUpdate_11:
   \   00007F                ; Setup parameters for call to function HalLcdWriteString
   \   00007F   7A..         MOV     R2,#sLightOff & 0xff
   \   000081   7B..         MOV     R3,#(sLightOff >> 8) & 0xff
   \                     ??zclSampleLight_LcdDisplayUpdate_12:
   \   000083   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    681          }
   \                     ??zclSampleLight_LcdDisplayUpdate_10:
   \   000086   80..         SJMP    ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    682          
    683          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    684          /*********************************************************************
    685           * @fn      zclSampleLight_UpdateLampLevel
    686           *
    687           * @brief   Update lamp level output with gamma compensation
    688           *
    689           * @param   level
    690           *
    691           * @return  none
    692           */
    693          void zclSampleLight_UpdateLampLevel( uint8 level )
    694          
    695          {
    696            uint16 gammaCorrectedLevel;
    697          
    698            // gamma correct the level
    699            gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
    700          
    701            halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
    702          }
    703          #endif
    704          
    705          /*********************************************************************
    706           * @fn      zclSampleLight_DisplayLight
    707           *
    708           * @brief   Displays current state of light on LED and also on main display if supported.
    709           *
    710           * @param   none
    711           *
    712           * @return  none
    713           */
    714          static void zclSampleLight_DisplayLight( void )
    715          {
    716            // set the LED1 based on light (on or off)
    717            if ( zclSampleLight_OnOff == LIGHT_ON )
    718            {
    719              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    720            }
    721            else
    722            {
    723              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    724            }
    725          
    726          #ifdef LCD_SUPPORTED
    727            if (giLightScreenMode == LIGHT_MAINMODE)
    728            {
    729          #ifdef ZCL_LEVEL_CTRL
    730              // display current light level
    731              if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    732                   ( zclSampleLight_OnOff == LIGHT_OFF ) )
    733              {
    734                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    735              }
    736              else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    737                        ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
    738                         ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    739                           ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
    740              {
    741                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    742              }
    743              else    // "    LEVEL ###"
    744              {
    745                zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
    746                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
    747              }
    748          #else
    749              if ( zclSampleLight_OnOff )
    750              {
    751                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    752              }
    753              else
    754              {
    755                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    756              }
    757          #endif // ZCL_LEVEL_CTRL
    758            }
    759          #endif // LCD_SUPPORTED
    760          }
    761          
    762          #ifdef LCD_SUPPORTED
    763          /*********************************************************************
    764           * @fn      zclSampleLight_LcdDisplayMainMode
    765           *
    766           * @brief   Called to display the main screen on the LCD.
    767           *
    768           * @param   none
    769           *
    770           * @return  none
    771           */
    772          static void zclSampleLight_LcdDisplayMainMode( void )
    773          {
    774            // display line 1 to indicate NWK status
    775            if ( zclSampleLight_NwkState == DEV_ZB_COORD )
    776            {
    777              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
    778            }
    779            else if ( zclSampleLight_NwkState == DEV_ROUTER )
    780            {
    781              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
    782            }
    783            else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
    784            {
    785              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
    786            }
    787          
    788            // end of line 3 displays permit join status (*)
    789            if ( gPermitDuration )
    790            {
    791              sSwHelp[15] = '*';
    792            }
    793            else
    794            {
    795              sSwHelp[15] = ' ';
    796            }
    797            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    798          }
    799          
    800          /*********************************************************************
    801           * @fn      zclSampleLight_LcdDisplayHelpMode
    802           *
    803           * @brief   Called to display the SW options on the LCD.
    804           *
    805           * @param   none
    806           *
    807           * @return  none
    808           */
    809          static void zclSampleLight_LcdDisplayHelpMode( void )
    810          {
    811            HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
    812            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
    813            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    814          }
    815          #endif  // LCD_SUPPORTED
    816          
    817          /*********************************************************************
    818           * @fn      zclSampleLight_ProcessIdentifyTimeChange
    819           *
    820           * @brief   Called to process any change to the IdentifyTime attribute.
    821           *
    822           * @param   none
    823           *
    824           * @return  none
    825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    826          static void zclSampleLight_ProcessIdentifyTimeChange( void )
   \                     zclSampleLight_ProcessIdentifyTimeChange:
    827          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    828            if ( zclSampleLight_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   6026         JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
    829            {
    830              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000B                ; Setup parameters for call to function osal_start_timerEx
   \   00000B   90....       MOV     DPTR,#__Constant_3e8
   \   00000E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
    831              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000022                ; Setup parameters for call to function HalLedBlink
   \   000022   7CE8         MOV     R4,#-0x18
   \   000024   7D03         MOV     R5,#0x3
   \   000026   7B05         MOV     R3,#0x5
   \   000028   7AFF         MOV     R2,#-0x1
   \   00002A   7908         MOV     R1,#0x8
   \   00002C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00002F   801F         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
    832            }
    833            else
    834            {
    835          #ifdef ZCL_EZMODE
    836              if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_0:
   \   000031   90....       MOV     DPTR,#zclSampleLight_IdentifyCommissionState
   \   000034   E0           MOVX    A,@DPTR
   \   000035   A2E1         MOV     C,0xE0 /* A   */.1
   \   000037   5004         JNC     ??zclSampleLight_ProcessIdentifyTimeChange_2
    837              {
    838                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   000039                ; Setup parameters for call to function HalLedSet
   \   000039   7A01         MOV     R2,#0x1
   \   00003B   8002         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_3
    839              }
    840              else
    841              {
    842                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_2:
   \   00003D                ; Setup parameters for call to function HalLedSet
   \   00003D   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_3:
   \   00003F   7908         MOV     R1,#0x8
   \   000041   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    843              }
    844          #endif
    845          
    846              osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000044                ; Setup parameters for call to function osal_stop_timerEx
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    847            }
    848          }
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_1:
   \   000050   80..         SJMP    ??Subroutine7_0
    849          
    850          /*********************************************************************
    851           * @fn      zclSampleLight_BasicResetCB
    852           *
    853           * @brief   Callback from the ZCL General Cluster Library
    854           *          to set all the Basic Cluster attributes to default values.
    855           *
    856           * @param   none
    857           *
    858           * @return  none
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine7_0
   \   000003                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
    861          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    862            NLME_LeaveReq_t leaveReq;
    863            // Set every field to 0
    864            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    865          
    866            // This will enable the device to rejoin the network after reset.
    867            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    868          
    869            // Set the NV startup option to force a "new" join.
    870            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    871          
    872            // Leave the network, and reset afterwards
    873            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zclSampleLight_BasicResetCB_0
    874            {
    875              // Couldn't send out leave; prepare to reset anyway
    876              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
    877            }
    878          }
   \                     ??zclSampleLight_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   02....       LJMP    ?Subroutine2 & 0xFFFF
    879          
    880          /*********************************************************************
    881           * @fn      zclSampleLight_IdentifyCB
    882           *
    883           * @brief   Callback from the ZCL General Cluster Library when
    884           *          it received an Identity Command for this application.
    885           *
    886           * @param   srcAddr - source address and endpoint of the response message
    887           * @param   identifyTime - the number of seconds to identify yourself
    888           *
    889           * @return  none
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleLight_IdentifyCB:
    892          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    893            zclSampleLight_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00000D   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
    894            zclSampleLight_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    895          }
   \   000018   02....       LJMP    ??Subroutine7_0 & 0xFFFF
    896          
    897          /*********************************************************************
    898           * @fn      zclSampleLight_IdentifyQueryRspCB
    899           *
    900           * @brief   Callback from the ZCL General Cluster Library when
    901           *          it received an Identity Query Response Command for this application.
    902           *
    903           * @param   srcAddr - requestor's address
    904           * @param   timeout - number of seconds to identify yourself (valid for query response)
    905           *
    906           * @return  none
    907           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    908          static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleLight_IdentifyQueryRspCB:
    909          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    910            (void)pRsp;
    911          #ifdef ZCL_EZMODE
    912            {
    913              zclEZMode_ActionData_t data;
    914              data.pIdentifyQueryRsp = pRsp;
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
    915              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
    916            }
   \                     ??CrossCallReturnLabel_0:
   \   00000C   7904         MOV     R1,#0x4
   \   00000E   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    917          #endif
    918          }
   \   000011   7402         MOV     A,#0x2
   \   000013   02....       LJMP    ?Subroutine2 & 0xFFFF
    919          
    920          /*********************************************************************
    921           * @fn      zclSampleLight_OnOffCB
    922           *
    923           * @brief   Callback from the ZCL General Cluster Library when
    924           *          it received an On/Off Command for this application.
    925           *
    926           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    927           *
    928           * @return  none
    929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    930          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
    931          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    932            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
    933          
    934            zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000017   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   00001A   E8           MOV     A,R0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   E9           MOV     A,R1
   \   00001E   F0           MOVX    @DPTR,A
    935          
    936          
    937            // Turn on the light
    938            if ( cmd == COMMAND_ON )
   \   00001F   7401         MOV     A,#0x1
   \   000021   6E           XRL     A,R6
   \   000022   600E         JZ      ??zclSampleLight_OnOffCB_0
    939            {
    940              zclSampleLight_OnOff = LIGHT_ON;
    941            }
    942            // Turn off the light
    943            else if ( cmd == COMMAND_OFF )
   \   000024   EE           MOV     A,R6
   \   000025   6012         JZ      ??zclSampleLight_OnOffCB_1
    944            {
    945              zclSampleLight_OnOff = LIGHT_OFF;
    946            }
    947            // Toggle the light
    948            else if ( cmd == COMMAND_TOGGLE )
   \   000027   7402         MOV     A,#0x2
   \   000029   6E           XRL     A,R6
   \   00002A   7012         JNZ     ??zclSampleLight_OnOffCB_2
    949            {
    950              if ( zclSampleLight_OnOff == LIGHT_OFF )
   \   00002C   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   7007         JNZ     ??zclSampleLight_OnOffCB_1
    951              {
    952                zclSampleLight_OnOff = LIGHT_ON;
   \                     ??zclSampleLight_OnOffCB_0:
   \   000032   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000035   7401         MOV     A,#0x1
   \   000037   8004         SJMP    ??zclSampleLight_OnOffCB_3
    953              }
    954              else
    955              {
    956                zclSampleLight_OnOff = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_1:
   \   000039   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00003C   E4           CLR     A
   \                     ??zclSampleLight_OnOffCB_3:
   \   00003D   F0           MOVX    @DPTR,A
    957              }
    958            }
    959          
    960          #if ZCL_LEVEL_CTRL
    961            zclSampleLight_DefaultMove( );
    962          #endif
    963          
    964            // update the display
    965            zclSampleLight_LcdDisplayUpdate( );
   \                     ??zclSampleLight_OnOffCB_2:
   \   00003E                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00003E   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    966          }
   \   000041   02....       LJMP    ?Subroutine1 & 0xFFFF
    967          
    968          #ifdef ZCL_LEVEL_CTRL
    969          /*********************************************************************
    970           * @fn      zclSampleLight_TimeRateHelper
    971           *
    972           * @brief   Calculate time based on rate, and startup level state machine
    973           *
    974           * @param   newLevel - new level for current level
    975           *
    976           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
    977           */
    978          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
    979          {
    980            uint32 diff;
    981            uint32 newLevel32;
    982          
    983            // remember current and new level
    984            zclSampleLight_NewLevel = newLevel;
    985            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
    986          
    987            // calculate diff
    988            newLevel32 = (uint32)1000 * newLevel;
    989            if ( zclSampleLight_LevelCurrentLevel > newLevel )
    990            {
    991              diff = zclSampleLight_CurrentLevel32 - newLevel32;
    992              zclSampleLight_NewLevelUp = FALSE;  // moving down
    993            }
    994            else
    995            {
    996              diff = newLevel32 - zclSampleLight_CurrentLevel32;
    997              zclSampleLight_NewLevelUp = TRUE;   // moving up
    998            }
    999          
   1000            return ( diff );
   1001          }
   1002          
   1003          /*********************************************************************
   1004           * @fn      zclSampleLight_MoveBasedOnRate
   1005           *
   1006           * @brief   Calculate time based on rate, and startup level state machine
   1007           *
   1008           * @param   newLevel - new level for current level
   1009           * @param   rate16   - fixed point rate (e.g. 16.123)
   1010           *
   1011           * @return  none
   1012           */
   1013          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
   1014          {
   1015            uint32 diff;
   1016          
   1017            // determine how much time (in 10ths of seconds) based on the difference and rate
   1018            zclSampleLight_Rate32 = rate;
   1019            diff = zclSampleLight_TimeRateHelper( newLevel );
   1020            zclSampleLight_LevelRemainingTime = diff / rate;
   1021            if ( !zclSampleLight_LevelRemainingTime )
   1022            {
   1023              zclSampleLight_LevelRemainingTime = 1;
   1024            }
   1025          
   1026            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1027          }
   1028          
   1029          /*********************************************************************
   1030           * @fn      zclSampleLight_MoveBasedOnTime
   1031           *
   1032           * @brief   Calculate rate based on time, and startup level state machine
   1033           *
   1034           * @param   newLevel  - new level for current level
   1035           * @param   time      - in 10ths of seconds
   1036           *
   1037           * @return  none
   1038           */
   1039          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
   1040          {
   1041            uint16 diff;
   1042          
   1043            // determine rate (in units) based on difference and time
   1044            diff = zclSampleLight_TimeRateHelper( newLevel );
   1045            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
   1046            zclSampleLight_Rate32 = diff / time;
   1047          
   1048            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1049          }
   1050          
   1051          /*********************************************************************
   1052           * @fn      zclSampleLight_GetTime
   1053           *
   1054           * @brief   Determine amount of time that MoveXXX will take to complete.
   1055           *
   1056           * @param   level = new level to move to
   1057           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
   1058           *
   1059           * @return  none
   1060           */
   1061          static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
   1062          {
   1063            // there is a hiearchy of the amount of time to use for transistioning
   1064            // check each one in turn. If none of defaults are set, then use fastest
   1065            // time possible.
   1066            if ( time == 0xFFFF )
   1067            {
   1068              // use On or Off Transition Time if set (not 0xffff)
   1069              if ( zclSampleLight_OnOff == LIGHT_ON )
   1070              {
   1071                time = zclSampleLight_LevelOffTransitionTime;
   1072              }
   1073              else
   1074              {
   1075                time = zclSampleLight_LevelOnTransitionTime;
   1076              }
   1077          
   1078              // else use OnOffTransitionTime if set (not 0xffff)
   1079              if ( time == 0xFFFF )
   1080              {
   1081                time = zclSampleLight_LevelOnOffTransitionTime;
   1082              }
   1083          
   1084              // else as fast as possible
   1085              if ( time == 0xFFFF )
   1086              {
   1087                time = 1;
   1088              }
   1089            }
   1090          
   1091            if ( !time )
   1092            {
   1093              time = 1; // as fast as possible
   1094            }
   1095          
   1096            return ( time );
   1097          }
   1098          
   1099          /*********************************************************************
   1100           * @fn      zclSampleLight_DefaultMove
   1101           *
   1102           * @brief   We were turned on/off. Use default time to move to on or off.
   1103           *
   1104           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
   1105           *
   1106           * @return  none
   1107           */
   1108          static void zclSampleLight_DefaultMove( void )
   1109          {
   1110            uint8  newLevel;
   1111            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
   1112            uint16 time;
   1113          
   1114            // if moving to on position, move to on level
   1115            if ( zclSampleLight_OnOff )
   1116            {
   1117              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1118              {
   1119                // The last Level (before going OFF) should be used)
   1120                newLevel = zclSampleLight_LevelLastLevel;
   1121              }
   1122              else
   1123              {
   1124                newLevel = zclSampleLight_LevelOnLevel;
   1125              }
   1126          
   1127              time = zclSampleLight_LevelOnTransitionTime;
   1128            }
   1129            else
   1130            {
   1131              newLevel = ATTR_LEVEL_MIN_LEVEL;
   1132          
   1133              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1134              {
   1135                // Save the current Level before going OFF to use it when the light turns ON
   1136                // it should be back to this level
   1137                zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   1138              }
   1139          
   1140              time = zclSampleLight_LevelOffTransitionTime;
   1141            }
   1142          
   1143            // else use OnOffTransitionTime if set (not 0xffff)
   1144            if ( time == 0xFFFF )
   1145            {
   1146              time = zclSampleLight_LevelOnOffTransitionTime;
   1147            }
   1148          
   1149            // else as fast as possible
   1150            if ( time == 0xFFFF )
   1151            {
   1152              time = 1;
   1153            }
   1154          
   1155            // calculate rate based on time (int 10ths) for full transition (1-254)
   1156            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
   1157          
   1158            // start up state machine.
   1159            zclSampleLight_WithOnOff = TRUE;
   1160            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1161          }
   1162          
   1163          /*********************************************************************
   1164           * @fn      zclSampleLight_AdjustLightLevel
   1165           *
   1166           * @brief   Called each 10th of a second while state machine running
   1167           *
   1168           * @param   none
   1169           *
   1170           * @return  none
   1171           */
   1172          static void zclSampleLight_AdjustLightLevel( void )
   1173          {
   1174            // one tick (10th of a second) less
   1175            if ( zclSampleLight_LevelRemainingTime )
   1176            {
   1177              --zclSampleLight_LevelRemainingTime;
   1178            }
   1179          
   1180            // no time left, done
   1181            if ( zclSampleLight_LevelRemainingTime == 0)
   1182            {
   1183              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
   1184            }
   1185          
   1186            // still time left, keep increment/decrementing
   1187            else
   1188            {
   1189              if ( zclSampleLight_NewLevelUp )
   1190              {
   1191                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
   1192              }
   1193              else
   1194              {
   1195                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
   1196              }
   1197              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
   1198            }
   1199          
   1200          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1201            zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
   1202          #endif
   1203          
   1204            // also affect on/off
   1205            if ( zclSampleLight_WithOnOff )
   1206            {
   1207              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
   1208              {
   1209                zclSampleLight_OnOff = LIGHT_ON;
   1210          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1211                ENABLE_LAMP;
   1212          #endif
   1213              }
   1214              else
   1215              {
   1216                zclSampleLight_OnOff = LIGHT_OFF;
   1217          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1218                DISABLE_LAMP;
   1219          #endif
   1220              }
   1221            }
   1222          
   1223            // display light level as we go
   1224            zclSampleLight_DisplayLight( );
   1225          
   1226            // keep ticking away
   1227            if ( zclSampleLight_LevelRemainingTime )
   1228            {
   1229              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1230            }
   1231          }
   1232          
   1233          /*********************************************************************
   1234           * @fn      zclSampleLight_LevelControlMoveToLevelCB
   1235           *
   1236           * @brief   Callback from the ZCL General Cluster Library when
   1237           *          it received a LevelControlMoveToLevel Command for this application.
   1238           *
   1239           * @param   pCmd - ZigBee command parameters
   1240           *
   1241           * @return  none
   1242           */
   1243          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   1244          {
   1245            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1246            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
   1247          }
   1248          
   1249          /*********************************************************************
   1250           * @fn      zclSampleLight_LevelControlMoveCB
   1251           *
   1252           * @brief   Callback from the ZCL General Cluster Library when
   1253           *          it received a LevelControlMove Command for this application.
   1254           *
   1255           * @param   pCmd - ZigBee command parameters
   1256           *
   1257           * @return  none
   1258           */
   1259          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
   1260          {
   1261            uint8 newLevel;
   1262            uint32 rate;
   1263          
   1264            // convert rate from units per second to units per tick (10ths of seconds)
   1265            // and move at that right up or down
   1266            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1267          
   1268            if ( pCmd->moveMode == LEVEL_MOVE_UP )
   1269            {
   1270              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
   1271            }
   1272            else
   1273            {
   1274              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   1275            }
   1276          
   1277            rate = (uint32)100 * pCmd->rate;
   1278            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1279          }
   1280          
   1281          /*********************************************************************
   1282           * @fn      zclSampleLight_LevelControlStepCB
   1283           *
   1284           * @brief   Callback from the ZCL General Cluster Library when
   1285           *          it received an On/Off Command for this application.
   1286           *
   1287           * @param   pCmd - ZigBee command parameters
   1288           *
   1289           * @return  none
   1290           */
   1291          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   1292          {
   1293            uint8 newLevel;
   1294          
   1295            // determine new level, but don't exceed boundaries
   1296            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   1297            {
   1298              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   1299              {
   1300                newLevel = ATTR_LEVEL_MAX_LEVEL;
   1301              }
   1302              else
   1303              {
   1304                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   1305              }
   1306            }
   1307            else
   1308            {
   1309              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   1310              {
   1311                newLevel = ATTR_LEVEL_MIN_LEVEL;
   1312              }
   1313              else
   1314              {
   1315                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   1316              }
   1317            }
   1318          
   1319            // move to the new level
   1320            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1321            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   1322          }
   1323          
   1324          /*********************************************************************
   1325           * @fn      zclSampleLight_LevelControlStopCB
   1326           *
   1327           * @brief   Callback from the ZCL General Cluster Library when
   1328           *          it received an Level Control Stop Command for this application.
   1329           *
   1330           * @param   pCmd - ZigBee command parameters
   1331           *
   1332           * @return  none
   1333           */
   1334          static void zclSampleLight_LevelControlStopCB( void )
   1335          {
   1336            // stop immediately
   1337            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   1338            zclSampleLight_LevelRemainingTime = 0;
   1339          }
   1340          #endif
   1341          
   1342          /******************************************************************************
   1343           *
   1344           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1345           *
   1346           *****************************************************************************/
   1347          
   1348          /*********************************************************************
   1349           * @fn      zclSampleLight_ProcessIncomingMsg
   1350           *
   1351           * @brief   Process ZCL Foundation incoming message
   1352           *
   1353           * @param   pInMsg - pointer to the received message
   1354           *
   1355           * @return  none
   1356           */
   1357          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1358          {
   1359            switch ( pInMsg->zclHdr.commandID )
   1360            {
   1361          #ifdef ZCL_READ
   1362              case ZCL_CMD_READ_RSP:
   1363                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   1364                break;
   1365          #endif
   1366          #ifdef ZCL_WRITE
   1367              case ZCL_CMD_WRITE_RSP:
   1368                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   1369                break;
   1370          #endif
   1371          #ifdef ZCL_REPORT
   1372              // Attribute Reporting implementation should be added here
   1373              case ZCL_CMD_CONFIG_REPORT:
   1374                // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
   1375                break;
   1376          
   1377              case ZCL_CMD_CONFIG_REPORT_RSP:
   1378                // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
   1379                break;
   1380          
   1381              case ZCL_CMD_READ_REPORT_CFG:
   1382                // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
   1383                break;
   1384          
   1385              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1386                // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
   1387                break;
   1388          
   1389              case ZCL_CMD_REPORT:
   1390                // zclSampleLight_ProcessInReportCmd( pInMsg );
   1391                break;
   1392          #endif
   1393              case ZCL_CMD_DEFAULT_RSP:
   1394                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1395                break;
   1396          #ifdef ZCL_DISCOVER
   1397              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1398                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1399                break;
   1400          
   1401              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1402                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1403                break;
   1404          
   1405              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1406                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   1407                break;
   1408          
   1409              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1410                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1411                break;
   1412          #endif
   1413              default:
   1414                break;
   1415            }
   1416          
   1417            if ( pInMsg->attrCmd )
   1418              osal_mem_free( pInMsg->attrCmd );
   1419          }
   1420          
   1421          #ifdef ZCL_READ
   1422          /*********************************************************************
   1423           * @fn      zclSampleLight_ProcessInReadRspCmd
   1424           *
   1425           * @brief   Process the "Profile" Read Response Command
   1426           *
   1427           * @param   pInMsg - incoming message to process
   1428           *
   1429           * @return  none
   1430           */
   1431          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1432          {
   1433            zclReadRspCmd_t *readRspCmd;
   1434            uint8 i;
   1435          
   1436            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1437            for (i = 0; i < readRspCmd->numAttr; i++)
   1438            {
   1439              // Notify the originator of the results of the original read attributes
   1440              // attempt and, for each successfull request, the value of the requested
   1441              // attribute
   1442            }
   1443          
   1444            return ( TRUE );
   1445          }
   1446          #endif // ZCL_READ
   1447          
   1448          #ifdef ZCL_WRITE
   1449          /*********************************************************************
   1450           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1451           *
   1452           * @brief   Process the "Profile" Write Response Command
   1453           *
   1454           * @param   pInMsg - incoming message to process
   1455           *
   1456           * @return  none
   1457           */
   1458          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1459          {
   1460            zclWriteRspCmd_t *writeRspCmd;
   1461            uint8 i;
   1462          
   1463            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1464            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1465            {
   1466              // Notify the device of the results of the its original write attributes
   1467              // command.
   1468            }
   1469          
   1470            return ( TRUE );
   1471          }
   1472          #endif // ZCL_WRITE
   1473          
   1474          /*********************************************************************
   1475           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1476           *
   1477           * @brief   Process the "Profile" Default Response Command
   1478           *
   1479           * @param   pInMsg - incoming message to process
   1480           *
   1481           * @return  none
   1482           */
   1483          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1484          {
   1485            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1486          
   1487            // Device is notified of the Default Response command.
   1488            (void)pInMsg;
   1489          
   1490            return ( TRUE );
   1491          }
   1492          
   1493          #ifdef ZCL_DISCOVER
   1494          /*********************************************************************
   1495           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1496           *
   1497           * @brief   Process the Discover Commands Response Command
   1498           *
   1499           * @param   pInMsg - incoming message to process
   1500           *
   1501           * @return  none
   1502           */
   1503          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1504          {
   1505            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1506            uint8 i;
   1507          
   1508            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1509            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1510            {
   1511              // Device is notified of the result of its attribute discovery command.
   1512            }
   1513          
   1514            return ( TRUE );
   1515          }
   1516          
   1517          /*********************************************************************
   1518           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1519           *
   1520           * @brief   Process the "Profile" Discover Attributes Response Command
   1521           *
   1522           * @param   pInMsg - incoming message to process
   1523           *
   1524           * @return  none
   1525           */
   1526          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1527          {
   1528            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1529            uint8 i;
   1530          
   1531            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1532            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1533            {
   1534              // Device is notified of the result of its attribute discovery command.
   1535            }
   1536          
   1537            return ( TRUE );
   1538          }
   1539          
   1540          /*********************************************************************
   1541           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1542           *
   1543           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1544           *
   1545           * @param   pInMsg - incoming message to process
   1546           *
   1547           * @return  none
   1548           */
   1549          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1550          {
   1551            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1552            uint8 i;
   1553          
   1554            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1555            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1556            {
   1557              // Device is notified of the result of its attribute discovery command.
   1558            }
   1559          
   1560            return ( TRUE );
   1561          }
   1562          #endif // ZCL_DISCOVER
   1563          
   1564          #if ZCL_EZMODE
   1565          /*********************************************************************
   1566           * @fn      zclSampleLight_ProcessZDOMsgs
   1567           *
   1568           * @brief   Called when this node receives a ZDO/ZDP response.
   1569           *
   1570           * @param   none
   1571           *
   1572           * @return  status
   1573           */
   1574          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   1575          {
   1576            zclEZMode_ActionData_t data;
   1577            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1578          
   1579            // Let EZ-Mode know of the Simple Descriptor Response
   1580            if ( pMsg->clusterID == Match_Desc_rsp )
   1581            {
   1582              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   1583              data.pMatchDescRsp = pMatchDescRsp;
   1584              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   1585              osal_mem_free( pMatchDescRsp );
   1586            }
   1587          }
   1588          
   1589          /*********************************************************************
   1590           * @fn      zclSampleLight_EZModeCB
   1591           *
   1592           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1593          *           going on during EZ-Mode steering/finding/binding.
   1594           *
   1595           * @param   state - an
   1596           *
   1597           * @return  none
   1598           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1599          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   \                     zclSampleLight_EZModeCB:
   1600          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1601          #ifdef LCD_SUPPORTED
   1602            char *pStr;
   1603            uint8 err;
   1604          #endif
   1605          
   1606            // time to go into identify mode
   1607            if ( state == EZMODE_STATE_IDENTIFYING )
   \   00000B   7404         MOV     A,#0x4
   \   00000D   65..         XRL     A,?V0
   \   00000F   7018         JNZ     ??zclSampleLight_EZModeCB_0
   1608            {
   1609          #ifdef LCD_SUPPORTED
   1610              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   \   000011                ; Setup parameters for call to function HalLcdWriteString
   \   000011   7902         MOV     R1,#0x2
   \   000013   7A..         MOV     R2,#`?<Constant "EZMode">` & 0xff
   \   000015   7B..         MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
   \   000017   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1611          #endif
   1612          
   1613              zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   \   00001A   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   00001D   74B4         MOV     A,#-0x4c
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
   1614              zclSampleLight_ProcessIdentifyTimeChange();
   \   000023                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000023   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   \   000026   02....       LJMP    ??zclSampleLight_EZModeCB_1 & 0xFFFF
   1615            }
   1616          
   1617            // autoclosing, show what happened (success, cancelled, etc...)
   1618            if( state == EZMODE_STATE_AUTOCLOSE )
   \                     ??zclSampleLight_EZModeCB_0:
   \   000029   7407         MOV     A,#0x7
   \   00002B   65..         XRL     A,?V0
   \   00002D   7028         JNZ     ??zclSampleLight_EZModeCB_2
   1619            {
   1620          #ifdef LCD_SUPPORTED
   1621              pStr = NULL;
   1622              err = pData->sAutoClose.err;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   1623              if ( err == EZMODE_ERR_SUCCESS )
   \   000035   7006         JNZ     ??zclSampleLight_EZModeCB_3
   1624              {
   1625                pStr = "EZMode: Success";
   \   000037   7A..         MOV     R2,#`?<Constant "EZMode: Success">` & 0xff
   \   000039   7B..         MOV     R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
   \   00003B   8009         SJMP    ??zclSampleLight_EZModeCB_4
   1626              }
   1627              else if ( err == EZMODE_ERR_NOMATCH )
   \                     ??zclSampleLight_EZModeCB_3:
   \   00003D   7404         MOV     A,#0x4
   \   00003F   68           XRL     A,R0
   \   000040   7072         JNZ     ??zclSampleLight_EZModeCB_1
   1628              {
   1629                pStr = "EZMode: NoMatch"; // not a match made in heaven
   \   000042   7A..         MOV     R2,#`?<Constant "EZMode: NoMatch">` & 0xff
   \   000044   7B..         MOV     R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
   1630              }
   1631              if ( pStr )
   \                     ??zclSampleLight_EZModeCB_4:
   \   000046   EA           MOV     A,R2
   \   000047   4B           ORL     A,R3
   \   000048   606A         JZ      ??zclSampleLight_EZModeCB_1
   1632              {
   1633                if ( giLightScreenMode == LIGHT_MAINMODE )
   \   00004A   90....       MOV     DPTR,#giLightScreenMode
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   7064         JNZ     ??zclSampleLight_EZModeCB_1
   1634                {
   1635                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   000050                ; Setup parameters for call to function HalLcdWriteString
   \   000050   7902         MOV     R1,#0x2
   \   000052   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000055   805D         SJMP    ??zclSampleLight_EZModeCB_1
   1636                }
   1637              }
   1638          #endif
   1639            }
   1640          
   1641            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1642            if( state == EZMODE_STATE_FINISH )
   \                     ??zclSampleLight_EZModeCB_2:
   \   000057   7463         MOV     A,#0x63
   \   000059   65..         XRL     A,?V0
   \   00005B   7057         JNZ     ??zclSampleLight_EZModeCB_1
   1643            {
   1644              // turn off identify mode
   1645              zclSampleLight_IdentifyTime = 0;
   \   00005D   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   F0           MOVX    @DPTR,A
   1646              zclSampleLight_ProcessIdentifyTimeChange();
   \   000064                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000064   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   1647          
   1648          #ifdef LCD_SUPPORTED
   1649              // if successful, inform user which nwkaddr/ep we bound to
   1650              pStr = NULL;
   1651              err = pData->sFinish.err;
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F8           MOV     R0,A
   1652              if( err == EZMODE_ERR_SUCCESS )
   \   00006D   602E         JZ      ??zclSampleLight_EZModeCB_5
   1653              {
   1654                // already stated on autoclose
   1655              }
   1656              else if ( err == EZMODE_ERR_CANCELLED )
   \   00006F   7402         MOV     A,#0x2
   \   000071   68           XRL     A,R0
   \   000072   7006         JNZ     ??zclSampleLight_EZModeCB_6
   1657              {
   1658                pStr = "EZMode: Cancel";
   \   000074   7A..         MOV     R2,#`?<Constant "EZMode: Cancel">` & 0xff
   \   000076   7B..         MOV     R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
   \   000078   8014         SJMP    ??zclSampleLight_EZModeCB_7
   1659              }
   1660              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   \                     ??zclSampleLight_EZModeCB_6:
   \   00007A   7401         MOV     A,#0x1
   \   00007C   68           XRL     A,R0
   \   00007D   7006         JNZ     ??zclSampleLight_EZModeCB_8
   1661              {
   1662                pStr = "EZMode: BadParm";
   \   00007F   7A..         MOV     R2,#`?<Constant "EZMode: BadParm">` & 0xff
   \   000081   7B..         MOV     R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
   \   000083   8009         SJMP    ??zclSampleLight_EZModeCB_7
   1663              }
   1664              else if ( err == EZMODE_ERR_TIMEDOUT )
   \                     ??zclSampleLight_EZModeCB_8:
   \   000085   7403         MOV     A,#0x3
   \   000087   68           XRL     A,R0
   \   000088   7013         JNZ     ??zclSampleLight_EZModeCB_5
   1665              {
   1666                pStr = "EZMode: TimeOut";
   \   00008A   7A..         MOV     R2,#`?<Constant "EZMode: TimeOut">` & 0xff
   \   00008C   7B..         MOV     R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
   1667              }
   1668              if ( pStr )
   \                     ??zclSampleLight_EZModeCB_7:
   \   00008E   EA           MOV     A,R2
   \   00008F   4B           ORL     A,R3
   \   000090   600B         JZ      ??zclSampleLight_EZModeCB_5
   1669              {
   1670                if ( giLightScreenMode == LIGHT_MAINMODE )
   \   000092   90....       MOV     DPTR,#giLightScreenMode
   \   000095   E0           MOVX    A,@DPTR
   \   000096   7005         JNZ     ??zclSampleLight_EZModeCB_5
   1671                {
   1672                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   000098                ; Setup parameters for call to function HalLcdWriteString
   \   000098   7902         MOV     R1,#0x2
   \   00009A   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1673                }
   1674              }
   1675          #endif
   1676              // show main UI screen 3 seconds after binding
   1677              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   \                     ??zclSampleLight_EZModeCB_5:
   \   00009D                ; Setup parameters for call to function osal_start_timerEx
   \   00009D   90....       MOV     DPTR,#__Constant_bb8
   \   0000A0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000A3   7A10         MOV     R2,#0x10
   \   0000A5   7B00         MOV     R3,#0x0
   \   0000A7   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000AF   7404         MOV     A,#0x4
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
   1678            }
   1679          }
   \                     ??zclSampleLight_EZModeCB_1:
   \   0000B4   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   08           DB 8
   \   000001   ....         DW zclSampleLight_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sSwHelp>`:
   \   000000   5357353A     DB "SW5: Help       "
   \            2048656C
   \            70202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleLight_BasicResetCB::?relay`
   \   000002   ....         DW `??zclSampleLight_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
   \   00000C   ....         DW `??zclSampleLight_OnOffCB::?relay`
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_LcdDisplayUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_ProcessIdentifyTimeChange::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_EZModeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_EZModeCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode">`:
   \   000000   455A4D6F     DB "EZMode"
   \            646500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Success">`:
   \   000000   455A4D6F     DB "EZMode: Success"
   \            64653A20
   \            53756363
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: NoMatch">`:
   \   000000   455A4D6F     DB "EZMode: NoMatch"
   \            64653A20
   \            4E6F4D61
   \            74636800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Cancel">`:
   \   000000   455A4D6F     DB "EZMode: Cancel"
   \            64653A20
   \            43616E63
   \            656C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: BadParm">`:
   \   000000   455A4D6F     DB "EZMode: BadParm"
   \            64653A20
   \            42616450
   \            61726D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: TimeOut">`:
   \   000000   455A4D6F     DB "EZMode: TimeOut"
   \            64653A20
   \            54696D65
   \            4F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000
   1680          #endif // ZCL_EZMODE
   1681          
   1682          /****************************************************************************
   1683          ****************************************************************************/
   1684          
   1685          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   zclSampleLight_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      0     13   zclSampleLight_EZModeCB
        0      9   -> HalLcdWriteString
        0     13   -> osal_start_timerEx
        0      9   -> zclSampleLight_ProcessIdentifyTimeChange
      0     36   zclSampleLight_HandleKeys
        0     19   -> NLME_GetShortAddr
        0     20   -> NLME_SendNetworkStatus
        0     19   -> ZDP_MgmtPermitJoinReq
        0     19   -> zclSampleLight_BasicResetCB
        0     19   -> zclSampleLight_LcdDisplayUpdate
        0     19   -> zcl_InvokeEZMode
      2      0   zclSampleLight_IdentifyCB
        2      0   -> zclSampleLight_ProcessIdentifyTimeChange
      2      2   zclSampleLight_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0      9   zclSampleLight_Init
        0      9   -> HalLcdWriteString
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> zclDiagnostic_InitStats
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_RegisterEZMode
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
        0      9   -> zcl_registerReadWriteCB
      2     19   zclSampleLight_LcdDisplayUpdate
        2      0   -> HalLcdWriteString
        2      0   -> HalLedSet
        2      0   -> zclHA_LcdStatusLine1
      0     10   zclSampleLight_OnOffCB
        0     10   -> zclSampleLight_LcdDisplayUpdate
        0     10   -> zcl_getRawAFMsg
      2     20   zclSampleLight_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      0     16   zclSampleLight_event_loop
        0     16   -> ZDO_ParseEPListRsp
        0     16   -> osal_mem_free
        0     16   -> osal_msg_deallocate
        0     16   -> osal_msg_receive
        0     16   -> zclSampleLight_HandleKeys
        0     16   -> zclSampleLight_LcdDisplayUpdate
        0     16   -> zclSampleLight_ProcessIdentifyTimeChange
        0     16   -> zcl_EZModeAction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "EZMode">
      16  ?<Constant "EZMode: BadParm">
      15  ?<Constant "EZMode: Cancel">
      16  ?<Constant "EZMode: NoMatch">
      16  ?<Constant "EZMode: Success">
      16  ?<Constant "EZMode: TimeOut">
      17  ?<Initializer for sSwHelp>
       6  ?<Initializer for sampleLight_TestEp>
      32  ?<Initializer for zclSampleLight_CmdCallbacks>
       1  ?<Initializer for zclSampleLight_NwkState>
       6  ??Subroutine6_0
       7  ??Subroutine7_0
       5  ?Subroutine0
       5  ?Subroutine1
       3  ?Subroutine2
      16  ?Subroutine3
      16  ?Subroutine4
       3  ?Subroutine5
       4  __Constant_3e8
       4  __Constant_bb8
       1  gPermitDuration
       1  giLightScreenMode
       2  sClearLine
      15  sDeviceName
      14  sLightOff
      14  sLightOn
      13  sSwEZMode
      17  sSwHelp
      17  sSwLight
       6  sampleLight_TestEp
       1  zclSampleLightSeqNum
      57  zclSampleLight_BasicResetCB
       6  zclSampleLight_BasicResetCB::?relay
      32  zclSampleLight_CmdCallbacks
      12  zclSampleLight_DstAddr
     183  zclSampleLight_EZModeCB
       6  zclSampleLight_EZModeCB::?relay
     284  zclSampleLight_HandleKeys
       6  zclSampleLight_HandleKeys::?relay
      27  zclSampleLight_IdentifyCB
       6  zclSampleLight_IdentifyCB::?relay
      22  zclSampleLight_IdentifyQueryRspCB
       6  zclSampleLight_IdentifyQueryRspCB::?relay
     119  zclSampleLight_Init
       6  zclSampleLight_Init::?relay
     136  zclSampleLight_LcdDisplayUpdate
       6  zclSampleLight_LcdDisplayUpdate::?relay
       1  zclSampleLight_NwkState
      68  zclSampleLight_OnOffCB
       6  zclSampleLight_OnOffCB::?relay
      82  zclSampleLight_ProcessIdentifyTimeChange
       6  zclSampleLight_ProcessIdentifyTimeChange::?relay
      10  zclSampleLight_RegisterEZModeData
       1  zclSampleLight_TaskID
     348  zclSampleLight_event_loop
       6  zclSampleLight_event_loop::?relay

 
 1 387 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    56 bytes in segment XDATA_I
    56 bytes in segment XDATA_ID
   179 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
 1 503 bytes of CODE  memory
   171 bytes of CONST memory (+ 8 bytes shared)
    72 bytes of XDATA memory

Errors: none
Warnings: none
