###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                20/Jun/2016  21:04:21
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#    Command line       =  
#        -f
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
#        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
#        -lA
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_samplelight.lst
#    Object file        =  
#        H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\zcl_samplelight.r51
#
###############################################################################

H:\WRAT\Project\IotProject\Hardware\IoTGateway\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee HA 1.2 Light. It can be configured as an
     43            On/Off light, or as a dimmable light. The following flags must be defined in
     44            the compiler's pre-defined symbols.
     45          
     46            ZCL_ON_OFF
     47            ZCL_LEVEL_CTRL    (only if dimming functionality desired)
     48            HOLD_AUTO_START
     49            ZCL_EZMODE
     50          
     51            This device supports all mandatory and optional commands/attributes for the
     52            OnOff (0x0006) and LevelControl (0x0008) clusters.
     53          
     54            SCREEN MODES
     55            ----------------------------------------
     56            Main:
     57              - SW1: Toggle local light
     58              - SW2: Invoke EZMode
     59              - SW4: Enable/Disable local permit join
     60              - SW5: Go to Help screen
     61            ----------------------------------------
     62          *********************************************************************/
     63          
     64          /*********************************************************************
     65           * INCLUDES
     66           */
     67          #include "ZComDef.h"
     68          #include "OSAL.h"
     69          #include "AF.h"
     70          #include "ZDApp.h"
     71          #include "ZDObject.h"
     72          #include "MT_SYS.h"
     73          
     74          #include "nwk_util.h"
     75          
     76          #include "zcl.h"
     77          #include "zcl_general.h"
     78          #include "zcl_ha.h"
     79          #include "zcl_ezmode.h"
     80          #include "zcl_diagnostic.h"
     81          
     82          #include "zcl_samplelight.h"
     83          
     84          #include "onboard.h"
     85          
     86          /* HAL */
     87          #include "hal_lcd.h"
     88          #include "hal_led.h"
     89          #include "hal_key.h"
     90          
     91          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     92                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     93          #include "zgp_translationtable.h"
     94            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
     95              #define ZGP_AUTO_TT
     96            #endif
     97          #endif
     98          
     99          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    100          #include "math.h"
    101          #include "hal_timer.h"
    102          #endif
    103          
    104          #include "NLMEDE.h"
    105          
    106          #include "DebugTrace.h"
    107          #include "string.h"
    108          #include "MT_UART.h"
    109          #include "stdio.h"
    110          
    111          /*********************************************************************
    112           * MACROS
    113           */
    114          
    115          /*********************************************************************
    116           * CONSTANTS
    117           */
    118          #if (defined HAL_BOARD_ZLIGHT)
    119          #define LEVEL_MAX                 0xFE
    120          #define LEVEL_MIN                 0x0
    121          #define GAMMA_VALUE               2
    122          #define PWM_FULL_DUTY_CYCLE       1000
    123          #elif (defined HAL_PWM)
    124          #define LEVEL_MAX                 0xFE
    125          #define LEVEL_MIN                 0x0
    126          #define GAMMA_VALUE               2
    127          #define PWM_FULL_DUTY_CYCLE       100
    128          #endif
    129          
    130          /*********************************************************************
    131           * TYPEDEFS
    132           */
    133          
    134          /*********************************************************************
    135           * GLOBAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          
    140          
    141          /*********************************************************************
    142           * GLOBAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL VARIABLES
    147           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    149          
    150          #ifdef ZCL_EZMODE
    151          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    152          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    153          
    154          
    155          // register EZ-Mode with task information (timeout events, callback, etc...)

   \                                 In  segment XDATA_ROM_C, align 1
    156          static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
   \                     zclSampleLight_RegisterEZModeData:
   \   000000   ....         DW zclSampleLight_TaskID
   \   000002   0800         DW 8
   \   000004   0400         DW 4
   \   000006   ....         DW zclSampleLightSeqNum
   \   000008   ....         DW `??zclSampleLight_EZModeCB::?relay`
    157          {
    158            &zclSampleLight_TaskID,
    159            SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
    160            SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
    161            &zclSampleLightSeqNum,
    162            zclSampleLight_EZModeCB
    163          };
    164          
    165          #else
    166          uint16 bindingInClusters[] =
    167          {
    168            ZCL_CLUSTER_ID_GEN_ON_OFF
    169          #ifdef ZCL_LEVEL_CTRL
    170            , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    171          #endif
    172          };
    173          #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    174          
    175          #endif  // ZCL_EZMODE
    176          
    177          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    178          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    179          {
    180            SAMPLELIGHT_ENDPOINT,
    181            &zclSampleLight_TaskID,
    182            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    183            (afNetworkLatencyReq_t)0            // No Network Latency req
    184          };
    185          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
   \                     giLightScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    187          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    190          devStates_t zclSampleLight_NwkState = DEV_INIT;
   \                     zclSampleLight_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleLight_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    191          
    192          #if ZCL_LEVEL_CTRL
    193          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
    194          uint8 zclSampleLight_NewLevel;        // new level when done moving
    195          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
    196          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
    197          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
    198          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
    199          #endif
    200          
    201          /*********************************************************************
    202           * LOCAL FUNCTIONS
    203           */
    204          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    205          static void zclSampleLight_BasicResetCB( void );
    206          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
    207          static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    208          static void zclSampleLight_OnOffCB( uint8 cmd );
    209          static void zclSampleLight_ProcessIdentifyTimeChange( void );
    210          #ifdef ZCL_LEVEL_CTRL
    211          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    212          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    213          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    214          static void zclSampleLight_LevelControlStopCB( void );
    215          static void zclSampleLight_DefaultMove( void );
    216          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    217          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    218          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    219          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    220          static void zclSampleLight_AdjustLightLevel( void );
    221          #endif
    222          
    223          // app display functions
    224          static void zclSampleLight_LcdDisplayUpdate( void );
    225          #ifdef LCD_SUPPORTED
    226          static void zclSampleLight_LcdDisplayMainMode( void );
    227          static void zclSampleLight_LcdDisplayHelpMode( void );
    228          #endif
    229          static void zclSampleLight_DisplayLight( void );
    230          
    231          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    232          void zclSampleLight_UpdateLampLevel( uint8 level );
    233          #endif
    234          
    235          // Functions to process ZCL Foundation incoming Command/Response messages
    236          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    237          #ifdef ZCL_READ
    238          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    239          #endif
    240          #ifdef ZCL_WRITE
    241          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    242          #endif
    243          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    244          #ifdef ZCL_DISCOVER
    245          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    246          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    247          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    248          #endif
    249          
    250          /*********************************************************************
    251           * STATUS STRINGS
    252           */
    253          #ifdef LCD_SUPPORTED
    254          const char sDeviceName[]   = "  Sample Light";
    255          const char sClearLine[]    = " ";
    256          const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
    257          const char sSwEZMode[]     = "SW2: EZ-Mode";
    258          char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
    259          const char sLightOn[]      = "    LIGHT ON ";
    260          const char sLightOff[]     = "    LIGHT OFF";
    261           #if ZCL_LEVEL_CTRL
    262           char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
    263           #endif
    264          #endif
    265          
    266          /*********************************************************************
    267           * ZCL General Profile Callback table
    268           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    269          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   000020                REQUIRE __INIT_XDATA_I
    270          {
    271            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    272            zclSampleLight_IdentifyCB,              // Identify command
    273          #ifdef ZCL_EZMODE
    274            NULL,                                   // Identify EZ-Mode Invoke command
    275            NULL,                                   // Identify Update Commission State command
    276          #endif
    277            NULL,                                   // Identify Trigger Effect command
    278            zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
    279            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    280            NULL,                                   // On/Off cluster enhanced command Off with Effect
    281            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    282            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    283          #ifdef ZCL_LEVEL_CTRL
    284            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    285            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    286            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    287            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    288          #endif
    289          #ifdef ZCL_GROUPS
    290            NULL,                                   // Group Response commands
    291          #endif
    292          #ifdef ZCL_SCENES
    293            NULL,                                  // Scene Store Request command
    294            NULL,                                  // Scene Recall Request command
    295            NULL,                                  // Scene Response command
    296          #endif
    297          #ifdef ZCL_ALARMS
    298            NULL,                                  // Alarm (Response) commands
    299          #endif
    300          #ifdef SE_UK_EXT
    301            NULL,                                  // Get Event Log command
    302            NULL,                                  // Publish Event Log command
    303          #endif
    304            NULL,                                  // RSSI Location command
    305            NULL                                   // RSSI Location Response command
    306          };
    307          
    308          /*********************************************************************
    309           * @fn          zclSampleLight_Init
    310           *
    311           * @brief       Initialization function for the zclGeneral layer.
    312           *
    313           * @param       none
    314           *
    315           * @return      none
    316           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    318          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    319            zclSampleLight_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    320          
    321            // Set destination address to indirect
    322            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    323            zclSampleLight_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    324            zclSampleLight_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    325          
    326            // This app is part of the Home Automation Profile
    327            zclHA_Init( &zclSampleLight_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zclSampleLight_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    328          
    329            // Register the ZCL General Cluster Library callback functions
    330            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
   \   00001F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001F   7A..         MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000021   7B..         MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000023   7908         MOV     R1,#0x8
   \   000025   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    331          
    332            // Register the application's attribute list
    333            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
   \   000028                ; Setup parameters for call to function zcl_registerAttrList
   \   000028   7C..         MOV     R4,#zclSampleLight_Attrs & 0xff
   \   00002A   7D..         MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   00002C   90....       MOV     DPTR,#zclSampleLight_NumAttributes
   \   00002F   E4           CLR     A
   \   000030   93           MOVC    A,@A+DPTR
   \   000031   FA           MOV     R2,A
   \   000032   7908         MOV     R1,#0x8
   \   000034   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    334          
    335            // Register the Application to receive the unprocessed Foundation command/response messages
    336            zcl_registerForMsg( zclSampleLight_TaskID );
   \   000037                ; Setup parameters for call to function zcl_registerForMsg
   \   000037   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    337          
    338          #ifdef ZCL_DISCOVER
    339            // Register the application's command list
    340            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
    341          #endif
    342          
    343            // Register for all key events - This app will handle all key events
    344            RegisterForKeys( zclSampleLight_TaskID );
   \   00003F                ; Setup parameters for call to function RegisterForKeys
   \   00003F   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    345          
    346            // Register for a test endpoint
    347            afRegister( &sampleLight_TestEp );
   \   000047                ; Setup parameters for call to function afRegister
   \   000047   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   000049   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   00004B   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    348          
    349          #ifdef ZCL_EZMODE
    350            // Register EZ-Mode
    351            zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
   \   00004E                ; Setup parameters for call to function zcl_RegisterEZMode
   \   00004E   7A..         MOV     R2,#zclSampleLight_RegisterEZModeData & 0xff
   \   000050   7B..         MOV     R3,#(zclSampleLight_RegisterEZModeData >> 8) & 0xff
   \   000052   12....       LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
    352          
    353            // Register with the ZDO to receive Match Descriptor Responses
    354            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
   \   000055                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000055   7A06         MOV     R2,#0x6
   \   000057   7B80         MOV     R3,#-0x80
   \   000059   EE           MOV     A,R6
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    355          #endif
    356            
    357            ZDO_RegisterForZDOMsg(task_id, Device_annce );
   \   00005E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00005E   7A13         MOV     R2,#0x13
   \   000060   7B00         MOV     R3,#0x0
   \   000062   EE           MOV     A,R6
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    358            
    359            ZDO_RegisterForZDOMsg(task_id, IEEE_addr_rsp );
   \   000067                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000067   7A01         MOV     R2,#0x1
   \   000069   7B80         MOV     R3,#-0x80
   \   00006B   EE           MOV     A,R6
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    360          
    361          
    362          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    363            HalTimer1Init( 0 );
    364            halTimer1SetChannelDuty( WHITE_LED, 0 );
    365            halTimer1SetChannelDuty( RED_LED, 0 );
    366            halTimer1SetChannelDuty( BLUE_LED, 0 );
    367            halTimer1SetChannelDuty( GREEN_LED, 0 );
    368          
    369            // find if we are already on a network from NV_RESTORE
    370            uint8 state;
    371            NLME_GetRequest( nwkNwkState, 0, &state );
    372          
    373            if ( state < NWK_ENDDEVICE )
    374            {
    375              // Start EZMode on Start up to avoid button press
    376              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
    377            }
    378          #if ZCL_LEVEL_CTRL
    379            zclSampleLight_DefaultMove();
    380          #endif
    381          #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    382          
    383          #ifdef ZCL_DIAGNOSTIC
    384            // Register the application's callback function to read/write attribute data.
    385            // This is only required when the attribute data format is unknown to ZCL.
    386            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   000070                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   000070   7C00         MOV     R4,#0x0
   \   000072   7D00         MOV     R5,#0x0
   \   000074   7A..         MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
   \   000076   7B..         MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   000078   7908         MOV     R1,#0x8
   \   00007A   12....       LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    387          
    388            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   00007D                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   00007D   12....       LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
    389            {
    390              // Here the user could start the timer to save Diagnostics to NV
    391            }
    392          #endif
    393          
    394          #ifdef LCD_SUPPORTED
    395            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    396          #endif  // LCD_SUPPORTED
    397          
    398          #ifdef ZGP_AUTO_TT
    399            zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
    400          #endif
    401          }
   \   000080                REQUIRE ?Subroutine0
   \   000080                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    402          
    403          /*********************************************************************
    404           * @fn          zclSample_event_loop
    405           *
    406           * @brief       Event Loop Processor for zclGeneral.
    407           *
    408           * @param       none
    409           *
    410           * @return      none
    411           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    413          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    414            afIncomingMSGPacket_t *MSGpkt;
    415          
    416            (void)task_id;  // Intentionally unreferenced parameter
    417          
    418            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7050         JNZ     ??zclSampleLight_event_loop_0
    419            {
    420              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    421              {
    422                switch ( MSGpkt->hdr.event )
    423                {
    424          #ifdef ZCL_EZMODE
    425                  case ZDO_CB_MSG:
    426                    zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    427                    break;
    428          #endif
    429                  case ZCL_INCOMING_MSG:
    430                    // Incoming ZCL Foundation command/response messages
    431                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    432                    break;
    433          
    434                  case KEY_CHANGE:
    435                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    436                    break;
    437          
    438                  case ZDO_STATE_CHANGE:
    439                    zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
    440          
    441                    // now on the network
    442                    if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    443                         (zclSampleLight_NwkState == DEV_ROUTER)   ||
    444                         (zclSampleLight_NwkState == DEV_END_DEVICE) )
    445                    {
    446                      giLightScreenMode = LIGHT_MAINMODE;
    447                      zclSampleLight_LcdDisplayUpdate();
    448          #ifdef ZCL_EZMODE
    449                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    450          #endif // ZCL_EZMODE
    451                    }
    452                    break;
    453          
    454                  default:
    455                    break;
    456                }
    457          
    458                // Release the memory
    459                osal_msg_deallocate( (uint8 *)MSGpkt );
    460              }
    461          
    462              // return unprocessed events
    463              return (events ^ SYS_EVENT_MSG);
    464            }
    465          
    466            if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   4003         JC      $+5
   \   000012   02....       LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
    467            {
    468              if ( zclSampleLight_IdentifyTime > 0 )
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   600C         JZ      ??zclSampleLight_event_loop_2
    469                zclSampleLight_IdentifyTime--;
   \   00001C   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   24FF         ADD     A,#-0x1
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   34FF         ADDC    A,#-0x1
   \   000027   F0           MOVX    @DPTR,A
    470              zclSampleLight_ProcessIdentifyTimeChange();
   \                     ??zclSampleLight_event_loop_2:
   \   000028                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000028   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    471          
    472              return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   00002B   EE           MOV     A,R6
   \   00002C   6401         XRL     A,#0x1
   \   00002E   02....       LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
    473            }
   \                     ??zclSampleLight_event_loop_4:
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000036   F0           MOVX    @DPTR,A
   \   000037   6409         XRL     A,#0x9
   \   000039   600A         JZ      ??zclSampleLight_event_loop_5
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6407         XRL     A,#0x7
   \   00003E   6005         JZ      ??zclSampleLight_event_loop_5
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6406         XRL     A,#0x6
   \   000043   7011         JNZ     ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_5:
   \   000045   90....       MOV     DPTR,#giLightScreenMode
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00004A   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
   \   00004D                ; Setup parameters for call to function zcl_EZModeAction
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   7902         MOV     R1,#0x2
   \   000053   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \                     ??zclSampleLight_event_loop_6:
   \   000056                ; Setup parameters for call to function osal_msg_deallocate
   \   000056   AA..         MOV     R2,?V0
   \   000058   AB..         MOV     R3,?V1
   \   00005A   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   00005D                ; Setup parameters for call to function osal_msg_receive
   \   00005D   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000065   8A..         MOV     ?V0,R2
   \   000067   8B..         MOV     ?V1,R3
   \   000069   EA           MOV     A,R2
   \   00006A   45..         ORL     A,?V1
   \   00006C   6075         JZ      ??zclSampleLight_event_loop_7
   \   00006E   8A82         MOV     DPL,R2
   \   000070   8B83         MOV     DPH,R3
   \   000072   E0           MOVX    A,@DPTR
   \   000073   24CC         ADD     A,#-0x34
   \   000075   6011         JZ      ??zclSampleLight_event_loop_8
   \   000077   2474         ADD     A,#0x74
   \   000079   6054         JZ      ??zclSampleLight_event_loop_9
   \   00007B   24EF         ADD     A,#-0x11
   \   00007D   60B2         JZ      ??zclSampleLight_event_loop_4
   \   00007F   24FE         ADD     A,#-0x2
   \   000081   70D3         JNZ     ??zclSampleLight_event_loop_6
   \   000083                ; Setup parameters for call to function zclSampleLight_ProcessZDOMsgs
   \   000083   12....       LCALL   `??zclSampleLight_ProcessZDOMsgs::?relay`; Banked call to: zclSampleLight_ProcessZDOMsgs
   \   000086   80CE         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_8:
   \   000088   EA           MOV     A,R2
   \   000089   2417         ADD     A,#0x17
   \   00008B   F8           MOV     R0,A
   \   00008C   E4           CLR     A
   \   00008D   35..         ADDC    A,?V1
   \   00008F   F9           MOV     R1,A
   \   000090   E8           MOV     A,R0
   \   000091   FA           MOV     R2,A
   \   000092   E9           MOV     A,R1
   \   000093   FB           MOV     R3,A
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   14           DEC     A
   \   00009D   6011         JZ      ??zclSampleLight_event_loop_10
   \   00009F   24FD         ADD     A,#-0x3
   \   0000A1   701A         JNZ     ??zclSampleLight_event_loop_11
   \   0000A3   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   C3           CLR     C
   \   0000AA   99           SUBB    A,R1
   \   0000AB   5010         JNC     ??zclSampleLight_event_loop_11
   \   0000AD   08           INC     R0
   \   0000AE   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclSampleLight_event_loop_10:
   \   0000B0   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000B3   8001         SJMP    ??zclSampleLight_event_loop_12
   \                     ??zclSampleLight_event_loop_13:
   \   0000B5   08           INC     R0
   \                     ??zclSampleLight_event_loop_12:
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   E8           MOV     A,R0
   \   0000B9   C3           CLR     C
   \   0000BA   99           SUBB    A,R1
   \   0000BB   40F8         JC      ??zclSampleLight_event_loop_13
   \                     ??zclSampleLight_event_loop_11:
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   FA           MOV     R2,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FB           MOV     R3,A
   \   0000C6   EA           MOV     A,R2
   \   0000C7   4B           ORL     A,R3
   \   0000C8   608C         JZ      ??zclSampleLight_event_loop_6
   \   0000CA                ; Setup parameters for call to function osal_mem_free
   \   0000CA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000CD   8087         SJMP    ??zclSampleLight_event_loop_6
   \                     ??zclSampleLight_event_loop_9:
   \   0000CF                ; Setup parameters for call to function zclSampleLight_HandleKeys
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   85..82       MOV     DPL,?V0
   \   0000D7   8B83         MOV     DPH,R3
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F9           MOV     R1,A
   \   0000DD   12....       LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
   \   0000E0   02....       LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
   \                     ??zclSampleLight_event_loop_7:
   \   0000E3   EE           MOV     A,R6
   \   0000E4   FA           MOV     R2,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   6480         XRL     A,#0x80
   \   0000E8   8037         SJMP    ??zclSampleLight_event_loop_14
    474          
    475            if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   0000EA   5410         ANL     A,#0x10
   \   0000EC   600D         JZ      ??zclSampleLight_event_loop_15
    476            {
    477              giLightScreenMode = LIGHT_MAINMODE;
   \   0000EE   90....       MOV     DPTR,#giLightScreenMode
   \   0000F1   E4           CLR     A
   \   0000F2   F0           MOVX    @DPTR,A
    478              zclSampleLight_LcdDisplayUpdate();
   \   0000F3                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   0000F3   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    479          
    480              return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
   \   0000F6   EE           MOV     A,R6
   \   0000F7   6410         XRL     A,#0x10
   \   0000F9   8024         SJMP    ??zclSampleLight_event_loop_3
    481            }
    482          
    483          #ifdef ZCL_EZMODE
    484          #if (defined HAL_BOARD_ZLIGHT)
    485            // event to start EZMode on startup with a delay
    486            if ( events & SAMPLELIGHT_START_EZMODE_EVT )
    487            {
    488              // Invoke EZ-Mode
    489              zclEZMode_InvokeData_t ezModeData;
    490          
    491              // Invoke EZ-Mode
    492              ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    493              if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    494                   (zclSampleLight_NwkState == DEV_ROUTER)   ||
    495                   (zclSampleLight_NwkState == DEV_END_DEVICE) )
    496              {
    497                ezModeData.onNetwork = TRUE;      // node is already on the network
    498              }
    499              else
    500              {
    501                ezModeData.onNetwork = FALSE;     // node is not yet on the network
    502              }
    503              ezModeData.initiator = FALSE;          // OnOffLight is a target
    504              ezModeData.numActiveOutClusters = 0;
    505              ezModeData.pActiveOutClusterIDs = NULL;
    506              ezModeData.numActiveInClusters = 0;
    507              ezModeData.pActiveOutClusterIDs = NULL;
    508              zcl_InvokeEZMode( &ezModeData );
    509          
    510              return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
    511            }
    512          #endif // #if (defined HAL_BOARD_ZLIGHT)
    513          
    514            // going on to next state
    515            if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
   \                     ??zclSampleLight_event_loop_15:
   \   0000FB   EE           MOV     A,R6
   \   0000FC   5408         ANL     A,#0x8
   \   0000FE   600E         JZ      ??zclSampleLight_event_loop_16
    516            {
    517              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
   \   000100                ; Setup parameters for call to function zcl_EZModeAction
   \   000100   7A00         MOV     R2,#0x0
   \   000102   7B00         MOV     R3,#0x0
   \   000104   7901         MOV     R1,#0x1
   \   000106   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    518              return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
   \   000109   EE           MOV     A,R6
   \   00010A   6408         XRL     A,#0x8
   \   00010C   8011         SJMP    ??zclSampleLight_event_loop_3
    519            }
    520          
    521            // the overall EZMode timer expired, so we timed out
    522            if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
   \                     ??zclSampleLight_event_loop_16:
   \   00010E   EE           MOV     A,R6
   \   00010F   5404         ANL     A,#0x4
   \   000111   7A00         MOV     R2,#0x0
   \   000113   7B00         MOV     R3,#0x0
   \   000115   600B         JZ      ??zclSampleLight_event_loop_17
    523            {
    524              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
   \   000117                ; Setup parameters for call to function zcl_EZModeAction
   \   000117   7963         MOV     R1,#0x63
   \   000119   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    525              return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
   \   00011C   EE           MOV     A,R6
   \   00011D   6404         XRL     A,#0x4
   \                     ??zclSampleLight_event_loop_3:
   \   00011F   FA           MOV     R2,A
   \   000120   EF           MOV     A,R7
   \                     ??zclSampleLight_event_loop_14:
   \   000121   FB           MOV     R3,A
    526            }
    527          #endif // ZLC_EZMODE
    528          
    529          #ifdef ZCL_LEVEL_CTRL
    530            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
    531            {
    532              zclSampleLight_AdjustLightLevel();
    533              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
    534            }
    535          #endif
    536          
    537            // Discard unknown events
    538            return 0;
   \                     ??zclSampleLight_event_loop_17:
   \   000122   7F04         MOV     R7,#0x4
   \   000124   02....       LJMP    ?BANKED_LEAVE_XDATA
    539          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000003                REQUIRE ??Subroutine10_0
   \   000003                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    540          
    541          /*********************************************************************
    542           * @fn      zclSampleLight_HandleKeys
    543           *
    544           * @brief   Handles all key events for this device.
    545           *
    546           * @param   shift - true if in shift/alt.
    547           * @param   keys - bit field for key events. Valid entries:
    548           *                 HAL_KEY_SW_5
    549           *                 HAL_KEY_SW_4
    550           *                 HAL_KEY_SW_2
    551           *                 HAL_KEY_SW_1
    552           *
    553           * @return  none
    554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    555          static void zclSampleLight_HandleKeys( byte shift, byte keys )
   \                     zclSampleLight_HandleKeys:
    556          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    557            if ( keys & HAL_KEY_SW_1 )
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5011         JNC     ??zclSampleLight_HandleKeys_0
    558            {
    559              giLightScreenMode = LIGHT_MAINMODE;
   \   000012   90....       MOV     DPTR,#giLightScreenMode
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    560          
    561              // toggle local light immediately
    562              zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
   \   000017   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6003         JZ      ??zclSampleLight_HandleKeys_1
   \   00001D   E4           CLR     A
   \   00001E   8002         SJMP    ??zclSampleLight_HandleKeys_2
   \                     ??zclSampleLight_HandleKeys_1:
   \   000020   7401         MOV     A,#0x1
   \                     ??zclSampleLight_HandleKeys_2:
   \   000022   F0           MOVX    @DPTR,A
    563          #ifdef ZCL_LEVEL_CTRL
    564              zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
    565          #endif
    566            }
    567          
    568            if ( keys & HAL_KEY_SW_2 )
   \                     ??zclSampleLight_HandleKeys_0:
   \   000023   EF           MOV     A,R7
   \   000024   A2E1         MOV     C,0xE0 /* A   */.1
   \   000026   505E         JNC     ??zclSampleLight_HandleKeys_3
    569            {
    570          #if (defined HAL_BOARD_ZLIGHT)
    571          
    572              zclSampleLight_BasicResetCB();
    573          
    574          #else
    575          
    576              giLightScreenMode = LIGHT_MAINMODE;
   \   000028   90....       MOV     DPTR,#giLightScreenMode
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    577          
    578          #ifdef ZCL_EZMODE
    579              {
    580                // Invoke EZ-Mode
    581                zclEZMode_InvokeData_t ezModeData;
    582          
    583                // Invoke EZ-Mode
    584                ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   7408         MOV     A,#0x8
   \   000035   F0           MOVX    @DPTR,A
    585                if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
    586                    (zclSampleLight_NwkState == DEV_ROUTER)   ||
    587                      (zclSampleLight_NwkState == DEV_END_DEVICE) )
   \   000036   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6409         XRL     A,#0x9
   \   00003C   600A         JZ      ??zclSampleLight_HandleKeys_4
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6407         XRL     A,#0x7
   \   000041   6005         JZ      ??zclSampleLight_HandleKeys_4
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6406         XRL     A,#0x6
   \   000046   7009         JNZ     ??zclSampleLight_HandleKeys_5
    588                {
    589                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zclSampleLight_HandleKeys_4:
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   8006         SJMP    ??zclSampleLight_HandleKeys_6
    590                }
    591                else
    592                {
    593                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zclSampleLight_HandleKeys_5:
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E4           CLR     A
   \                     ??zclSampleLight_HandleKeys_6:
   \   000057   F0           MOVX    @DPTR,A
    594                }
    595                ezModeData.initiator = FALSE;          // OnOffLight is a target
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    596                ezModeData.numActiveOutClusters = 0;
   \   00005F   7406         MOV     A,#0x6
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    597                ezModeData.pActiveOutClusterIDs = NULL;
   \   000066   7407         MOV     A,#0x7
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   F0           MOVX    @DPTR,A
    598                ezModeData.numActiveInClusters = 0;
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
    599                ezModeData.pActiveOutClusterIDs = NULL;
   \   000076   7407         MOV     A,#0x7
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   F0           MOVX    @DPTR,A
    600                zcl_InvokeEZMode( &ezModeData );
   \   00007F                ; Setup parameters for call to function zcl_InvokeEZMode
   \   00007F   AA..         MOV     R2,?XSP + 0
   \   000081   AB..         MOV     R3,?XSP + 1
   \   000083   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    601              }
    602          
    603          #else // NOT EZ-Mode
    604              {
    605                zAddrType_t dstAddr;
    606                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    607          
    608                // Initiate an End Device Bind Request, this bind request will
    609                // only use a cluster list that is important to binding.
    610                dstAddr.addrMode = afAddr16Bit;
    611                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    612                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    613                                     SAMPLELIGHT_ENDPOINT,
    614                                     ZCL_HA_PROFILE_ID,
    615                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    616                                     0, NULL,   // No Outgoing clusters to bind
    617                                     TRUE );
    618              }
    619          #endif // ZCL_EZMODE
    620          #endif // HAL_BOARD_ZLIGHT
    621            }
    622          
    623            if ( keys & HAL_KEY_SW_3 )
   \                     ??zclSampleLight_HandleKeys_3:
   \   000086   EF           MOV     A,R7
   \   000087   A2E4         MOV     C,0xE0 /* A   */.4
   \   000089   5025         JNC     ??zclSampleLight_HandleKeys_7
    624            {
    625              NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
    626                                 NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
   \   00008B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00008E   8A..         MOV     ?V0,R2
   \   000090   8B..         MOV     ?V1,R3
   \   000092   AC..         MOV     R4,?V0
   \   000094   AD..         MOV     R5,?V1
   \   000096                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   000096   75..00       MOV     ?V0,#0x0
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   7902         MOV     R1,#0x2
   \   0000A0   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000AB   7401         MOV     A,#0x1
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
    627            }
    628          
    629            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclSampleLight_HandleKeys_7:
   \   0000B0   EF           MOV     A,R7
   \   0000B1   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000B3   5041         JNC     ??zclSampleLight_HandleKeys_8
    630            {
    631              giLightScreenMode = LIGHT_MAINMODE;
   \   0000B5   90....       MOV     DPTR,#giLightScreenMode
   \   0000B8   E4           CLR     A
   \   0000B9   F0           MOVX    @DPTR,A
    632          
    633              if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
    634                    ( zclSampleLight_NwkState == DEV_ROUTER ) )
   \   0000BA   90....       MOV     DPTR,#zclSampleLight_NwkState
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   6409         XRL     A,#0x9
   \   0000C0   6005         JZ      ??zclSampleLight_HandleKeys_9
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   6407         XRL     A,#0x7
   \   0000C5   702F         JNZ     ??zclSampleLight_HandleKeys_8
    635              {
    636                zAddrType_t tmpAddr;
    637          
    638                tmpAddr.addrMode = Addr16Bit;
   \                     ??zclSampleLight_HandleKeys_9:
   \   0000C7   7408         MOV     A,#0x8
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   F0           MOVX    @DPTR,A
    639                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0000CF                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000CF   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   EA           MOV     A,R2
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   EB           MOV     A,R3
   \   0000DC   F0           MOVX    @DPTR,A
    640          
    641                // toggle permit join
    642                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   0000DD   90....       MOV     DPTR,#gPermitDuration
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6003         JZ      ??zclSampleLight_HandleKeys_10
   \   0000E3   E4           CLR     A
   \   0000E4   8002         SJMP    ??zclSampleLight_HandleKeys_11
   \                     ??zclSampleLight_HandleKeys_10:
   \   0000E6   74FF         MOV     A,#-0x1
   \                     ??zclSampleLight_HandleKeys_11:
   \   0000E8   F0           MOVX    @DPTR,A
    643          
    644                // Trust Center significance is always true
    645                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   0000E9                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   0000E9   7D00         MOV     R5,#0x0
   \   0000EB   7C01         MOV     R4,#0x1
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   AA..         MOV     R2,?XSP + 0
   \   0000F1   AB..         MOV     R3,?XSP + 1
   \   0000F3   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    646              }
    647            }
    648          
    649            // Shift F5 does a Basic Reset (factory defaults)
    650            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zclSampleLight_HandleKeys_8:
   \   0000F6   EE           MOV     A,R6
   \   0000F7   600A         JZ      ??zclSampleLight_HandleKeys_12
   \   0000F9   EF           MOV     A,R7
   \   0000FA   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000FC   5016         JNC     ??zclSampleLight_HandleKeys_13
    651            {
    652              zclSampleLight_BasicResetCB();
   \   0000FE                ; Setup parameters for call to function zclSampleLight_BasicResetCB
   \   0000FE   12....       LCALL   `??zclSampleLight_BasicResetCB::?relay`; Banked call to: zclSampleLight_BasicResetCB
   \   000101   8011         SJMP    ??zclSampleLight_HandleKeys_13
    653            }
    654            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zclSampleLight_HandleKeys_12:
   \   000103   EF           MOV     A,R7
   \   000104   A2E2         MOV     C,0xE0 /* A   */.2
   \   000106   500C         JNC     ??zclSampleLight_HandleKeys_13
    655            {
    656              giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
   \   000108   90....       MOV     DPTR,#giLightScreenMode
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   6003         JZ      ??zclSampleLight_HandleKeys_14
   \   00010E   E4           CLR     A
   \   00010F   8002         SJMP    ??zclSampleLight_HandleKeys_15
   \                     ??zclSampleLight_HandleKeys_14:
   \   000111   7401         MOV     A,#0x1
   \                     ??zclSampleLight_HandleKeys_15:
   \   000113   F0           MOVX    @DPTR,A
    657            }
    658          
    659            // update the display, including the light
    660            zclSampleLight_LcdDisplayUpdate();
   \                     ??zclSampleLight_HandleKeys_13:
   \   000114                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   000114   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    661          }
   \   000117   7409         MOV     A,#0x9
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011C                REQUIRE ?Subroutine1
   \   00011C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    662          
    663          /*********************************************************************
    664           * @fn      zclSampleLight_LcdDisplayUpdate
    665           *
    666           * @brief   Called to update the LCD display.
    667           *
    668           * @param   none
    669           *
    670           * @return  none
    671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    672          void zclSampleLight_LcdDisplayUpdate( void )
   \                     zclSampleLight_LcdDisplayUpdate:
    673          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    674          #ifdef LCD_SUPPORTED
    675            if ( giLightScreenMode == LIGHT_HELPMODE )
    676            {
    677              zclSampleLight_LcdDisplayHelpMode();
    678            }
    679            else
    680            {
    681              zclSampleLight_LcdDisplayMainMode();
    682            }
    683          #endif
    684          
    685            zclSampleLight_DisplayLight();
   \   000004   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7004         JNZ     ??zclSampleLight_LcdDisplayUpdate_0
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   8002         SJMP    ??zclSampleLight_LcdDisplayUpdate_1
   \                     ??zclSampleLight_LcdDisplayUpdate_0:
   \   000010                ; Setup parameters for call to function HalLedSet
   \   000010   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_LcdDisplayUpdate_1:
   \   000012   7901         MOV     R1,#0x1
   \   000014   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    686          }
   \   000017   80..         SJMP    ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    687          
    688          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
    689          /*********************************************************************
    690           * @fn      zclSampleLight_UpdateLampLevel
    691           *
    692           * @brief   Update lamp level output with gamma compensation
    693           *
    694           * @param   level
    695           *
    696           * @return  none
    697           */
    698          void zclSampleLight_UpdateLampLevel( uint8 level )
    699          
    700          {
    701            uint16 gammaCorrectedLevel;
    702          
    703            // gamma correct the level
    704            gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
    705          
    706            halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
    707          }
    708          #endif
    709          
    710          /*********************************************************************
    711           * @fn      zclSampleLight_DisplayLight
    712           *
    713           * @brief   Displays current state of light on LED and also on main display if supported.
    714           *
    715           * @param   none
    716           *
    717           * @return  none
    718           */
    719          static void zclSampleLight_DisplayLight( void )
    720          {
    721            // set the LED1 based on light (on or off)
    722            if ( zclSampleLight_OnOff == LIGHT_ON )
    723            {
    724              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    725            }
    726            else
    727            {
    728              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    729            }
    730          
    731          #ifdef LCD_SUPPORTED
    732            if (giLightScreenMode == LIGHT_MAINMODE)
    733            {
    734          #ifdef ZCL_LEVEL_CTRL
    735              // display current light level
    736              if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
    737                   ( zclSampleLight_OnOff == LIGHT_OFF ) )
    738              {
    739                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    740              }
    741              else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
    742                        ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
    743                         ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
    744                           ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
    745              {
    746                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    747              }
    748              else    // "    LEVEL ###"
    749              {
    750                zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
    751                HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
    752              }
    753          #else
    754              if ( zclSampleLight_OnOff )
    755              {
    756                HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
    757              }
    758              else
    759              {
    760                HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
    761              }
    762          #endif // ZCL_LEVEL_CTRL
    763            }
    764          #endif // LCD_SUPPORTED
    765          }
    766          
    767          #ifdef LCD_SUPPORTED
    768          /*********************************************************************
    769           * @fn      zclSampleLight_LcdDisplayMainMode
    770           *
    771           * @brief   Called to display the main screen on the LCD.
    772           *
    773           * @param   none
    774           *
    775           * @return  none
    776           */
    777          static void zclSampleLight_LcdDisplayMainMode( void )
    778          {
    779            // display line 1 to indicate NWK status
    780            if ( zclSampleLight_NwkState == DEV_ZB_COORD )
    781            {
    782              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
    783            }
    784            else if ( zclSampleLight_NwkState == DEV_ROUTER )
    785            {
    786              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
    787            }
    788            else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
    789            {
    790              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
    791            }
    792          
    793            // end of line 3 displays permit join status (*)
    794            if ( gPermitDuration )
    795            {
    796              sSwHelp[15] = '*';
    797            }
    798            else
    799            {
    800              sSwHelp[15] = ' ';
    801            }
    802            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    803          }
    804          
    805          /*********************************************************************
    806           * @fn      zclSampleLight_LcdDisplayHelpMode
    807           *
    808           * @brief   Called to display the SW options on the LCD.
    809           *
    810           * @param   none
    811           *
    812           * @return  none
    813           */
    814          static void zclSampleLight_LcdDisplayHelpMode( void )
    815          {
    816            HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
    817            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
    818            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    819          }
    820          #endif  // LCD_SUPPORTED
    821          
    822          /*********************************************************************
    823           * @fn      zclSampleLight_ProcessIdentifyTimeChange
    824           *
    825           * @brief   Called to process any change to the IdentifyTime attribute.
    826           *
    827           * @param   none
    828           *
    829           * @return  none
    830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    831          static void zclSampleLight_ProcessIdentifyTimeChange( void )
   \                     zclSampleLight_ProcessIdentifyTimeChange:
    832          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    833            if ( zclSampleLight_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   6026         JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
    834            {
    835              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000B                ; Setup parameters for call to function osal_start_timerEx
   \   00000B   90....       MOV     DPTR,#__Constant_3e8
   \   00000E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
    836              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000022                ; Setup parameters for call to function HalLedBlink
   \   000022   7CE8         MOV     R4,#-0x18
   \   000024   7D03         MOV     R5,#0x3
   \   000026   7B05         MOV     R3,#0x5
   \   000028   7AFF         MOV     R2,#-0x1
   \   00002A   7908         MOV     R1,#0x8
   \   00002C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00002F   801F         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
    837            }
    838            else
    839            {
    840          #ifdef ZCL_EZMODE
    841              if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_0:
   \   000031   90....       MOV     DPTR,#zclSampleLight_IdentifyCommissionState
   \   000034   E0           MOVX    A,@DPTR
   \   000035   A2E1         MOV     C,0xE0 /* A   */.1
   \   000037   5004         JNC     ??zclSampleLight_ProcessIdentifyTimeChange_2
    842              {
    843                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   000039                ; Setup parameters for call to function HalLedSet
   \   000039   7A01         MOV     R2,#0x1
   \   00003B   8002         SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_3
    844              }
    845              else
    846              {
    847                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_2:
   \   00003D                ; Setup parameters for call to function HalLedSet
   \   00003D   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_3:
   \   00003F   7908         MOV     R1,#0x8
   \   000041   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    848              }
    849          #endif
    850          
    851              osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000044                ; Setup parameters for call to function osal_stop_timerEx
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    852            }
    853          }
   \                     ??zclSampleLight_ProcessIdentifyTimeChange_1:
   \   000050   80..         SJMP    ??Subroutine9_0
    854          
    855          /*********************************************************************
    856           * @fn      zclSampleLight_BasicResetCB
    857           *
    858           * @brief   Callback from the ZCL General Cluster Library
    859           *          to set all the Basic Cluster attributes to default values.
    860           *
    861           * @param   none
    862           *
    863           * @return  none
    864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine9_0
   \   000003                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    865          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
    866          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    867            NLME_LeaveReq_t leaveReq;
    868            // Set every field to 0
    869            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    870          
    871            // This will enable the device to rejoin the network after reset.
    872            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    873          
    874            // Set the NV startup option to force a "new" join.
    875            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    876          
    877            // Leave the network, and reset afterwards
    878            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zclSampleLight_BasicResetCB_0
    879            {
    880              // Couldn't send out leave; prepare to reset anyway
    881              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
    882            }
    883          }
   \                     ??zclSampleLight_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   02....       LJMP    ?Subroutine2 & 0xFFFF
    884          
    885          /*********************************************************************
    886           * @fn      zclSampleLight_IdentifyCB
    887           *
    888           * @brief   Callback from the ZCL General Cluster Library when
    889           *          it received an Identity Command for this application.
    890           *
    891           * @param   srcAddr - source address and endpoint of the response message
    892           * @param   identifyTime - the number of seconds to identify yourself
    893           *
    894           * @return  none
    895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    896          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleLight_IdentifyCB:
    897          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    898            zclSampleLight_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00000D   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
    899            zclSampleLight_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
    900          }
   \   000018   02....       LJMP    ??Subroutine9_0 & 0xFFFF
    901          
    902          /*********************************************************************
    903           * @fn      zclSampleLight_IdentifyQueryRspCB
    904           *
    905           * @brief   Callback from the ZCL General Cluster Library when
    906           *          it received an Identity Query Response Command for this application.
    907           *
    908           * @param   srcAddr - requestor's address
    909           * @param   timeout - number of seconds to identify yourself (valid for query response)
    910           *
    911           * @return  none
    912           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    913          static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleLight_IdentifyQueryRspCB:
    914          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    915            (void)pRsp;
    916          #ifdef ZCL_EZMODE
    917            {
    918              zclEZMode_ActionData_t data;
    919              data.pIdentifyQueryRsp = pRsp;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
    920              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
   \   000014                ; Setup parameters for call to function zcl_EZModeAction
   \   000014   AA..         MOV     R2,?XSP + 0
   \   000016   AB..         MOV     R3,?XSP + 1
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    921            }
    922          #endif
    923          }
   \   00001D   7402         MOV     A,#0x2
   \   00001F   02....       LJMP    ?Subroutine2 & 0xFFFF
    924          
    925          /*********************************************************************
    926           * @fn      zclSampleLight_OnOffCB
    927           *
    928           * @brief   Callback from the ZCL General Cluster Library when
    929           *          it received an On/Off Command for this application.
    930           *
    931           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    932           *
    933           * @return  none
    934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    937            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
    938          
    939            zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000017   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   00001A   E8           MOV     A,R0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   E9           MOV     A,R1
   \   00001E   F0           MOVX    @DPTR,A
    940          
    941          
    942            // Turn on the light
    943            if ( cmd == COMMAND_ON )
   \   00001F   7401         MOV     A,#0x1
   \   000021   6E           XRL     A,R6
   \   000022   600E         JZ      ??zclSampleLight_OnOffCB_0
    944            {
    945              zclSampleLight_OnOff = LIGHT_ON;
    946            }
    947            // Turn off the light
    948            else if ( cmd == COMMAND_OFF )
   \   000024   EE           MOV     A,R6
   \   000025   6012         JZ      ??zclSampleLight_OnOffCB_1
    949            {
    950              zclSampleLight_OnOff = LIGHT_OFF;
    951            }
    952            // Toggle the light
    953            else if ( cmd == COMMAND_TOGGLE )
   \   000027   7402         MOV     A,#0x2
   \   000029   6E           XRL     A,R6
   \   00002A   7012         JNZ     ??zclSampleLight_OnOffCB_2
    954            {
    955              if ( zclSampleLight_OnOff == LIGHT_OFF )
   \   00002C   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   7007         JNZ     ??zclSampleLight_OnOffCB_1
    956              {
    957                zclSampleLight_OnOff = LIGHT_ON;
   \                     ??zclSampleLight_OnOffCB_0:
   \   000032   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000035   7401         MOV     A,#0x1
   \   000037   8004         SJMP    ??zclSampleLight_OnOffCB_3
    958              }
    959              else
    960              {
    961                zclSampleLight_OnOff = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_1:
   \   000039   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   00003C   E4           CLR     A
   \                     ??zclSampleLight_OnOffCB_3:
   \   00003D   F0           MOVX    @DPTR,A
    962              }
    963            }
    964          
    965          #if ZCL_LEVEL_CTRL
    966            zclSampleLight_DefaultMove( );
    967          #endif
    968          
    969            // update the display
    970            zclSampleLight_LcdDisplayUpdate( );
   \                     ??zclSampleLight_OnOffCB_2:
   \   00003E                ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
   \   00003E   12....       LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
    971          }
   \   000041   02....       LJMP    ?Subroutine1 & 0xFFFF
    972          
    973          #ifdef ZCL_LEVEL_CTRL
    974          /*********************************************************************
    975           * @fn      zclSampleLight_TimeRateHelper
    976           *
    977           * @brief   Calculate time based on rate, and startup level state machine
    978           *
    979           * @param   newLevel - new level for current level
    980           *
    981           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
    982           */
    983          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
    984          {
    985            uint32 diff;
    986            uint32 newLevel32;
    987          
    988            // remember current and new level
    989            zclSampleLight_NewLevel = newLevel;
    990            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
    991          
    992            // calculate diff
    993            newLevel32 = (uint32)1000 * newLevel;
    994            if ( zclSampleLight_LevelCurrentLevel > newLevel )
    995            {
    996              diff = zclSampleLight_CurrentLevel32 - newLevel32;
    997              zclSampleLight_NewLevelUp = FALSE;  // moving down
    998            }
    999            else
   1000            {
   1001              diff = newLevel32 - zclSampleLight_CurrentLevel32;
   1002              zclSampleLight_NewLevelUp = TRUE;   // moving up
   1003            }
   1004          
   1005            return ( diff );
   1006          }
   1007          
   1008          /*********************************************************************
   1009           * @fn      zclSampleLight_MoveBasedOnRate
   1010           *
   1011           * @brief   Calculate time based on rate, and startup level state machine
   1012           *
   1013           * @param   newLevel - new level for current level
   1014           * @param   rate16   - fixed point rate (e.g. 16.123)
   1015           *
   1016           * @return  none
   1017           */
   1018          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
   1019          {
   1020            uint32 diff;
   1021          
   1022            // determine how much time (in 10ths of seconds) based on the difference and rate
   1023            zclSampleLight_Rate32 = rate;
   1024            diff = zclSampleLight_TimeRateHelper( newLevel );
   1025            zclSampleLight_LevelRemainingTime = diff / rate;
   1026            if ( !zclSampleLight_LevelRemainingTime )
   1027            {
   1028              zclSampleLight_LevelRemainingTime = 1;
   1029            }
   1030          
   1031            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1032          }
   1033          
   1034          /*********************************************************************
   1035           * @fn      zclSampleLight_MoveBasedOnTime
   1036           *
   1037           * @brief   Calculate rate based on time, and startup level state machine
   1038           *
   1039           * @param   newLevel  - new level for current level
   1040           * @param   time      - in 10ths of seconds
   1041           *
   1042           * @return  none
   1043           */
   1044          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
   1045          {
   1046            uint16 diff;
   1047          
   1048            // determine rate (in units) based on difference and time
   1049            diff = zclSampleLight_TimeRateHelper( newLevel );
   1050            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
   1051            zclSampleLight_Rate32 = diff / time;
   1052          
   1053            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1054          }
   1055          
   1056          /*********************************************************************
   1057           * @fn      zclSampleLight_GetTime
   1058           *
   1059           * @brief   Determine amount of time that MoveXXX will take to complete.
   1060           *
   1061           * @param   level = new level to move to
   1062           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
   1063           *
   1064           * @return  none
   1065           */
   1066          static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
   1067          {
   1068            // there is a hiearchy of the amount of time to use for transistioning
   1069            // check each one in turn. If none of defaults are set, then use fastest
   1070            // time possible.
   1071            if ( time == 0xFFFF )
   1072            {
   1073              // use On or Off Transition Time if set (not 0xffff)
   1074              if ( zclSampleLight_OnOff == LIGHT_ON )
   1075              {
   1076                time = zclSampleLight_LevelOffTransitionTime;
   1077              }
   1078              else
   1079              {
   1080                time = zclSampleLight_LevelOnTransitionTime;
   1081              }
   1082          
   1083              // else use OnOffTransitionTime if set (not 0xffff)
   1084              if ( time == 0xFFFF )
   1085              {
   1086                time = zclSampleLight_LevelOnOffTransitionTime;
   1087              }
   1088          
   1089              // else as fast as possible
   1090              if ( time == 0xFFFF )
   1091              {
   1092                time = 1;
   1093              }
   1094            }
   1095          
   1096            if ( !time )
   1097            {
   1098              time = 1; // as fast as possible
   1099            }
   1100          
   1101            return ( time );
   1102          }
   1103          
   1104          /*********************************************************************
   1105           * @fn      zclSampleLight_DefaultMove
   1106           *
   1107           * @brief   We were turned on/off. Use default time to move to on or off.
   1108           *
   1109           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
   1110           *
   1111           * @return  none
   1112           */
   1113          static void zclSampleLight_DefaultMove( void )
   1114          {
   1115            uint8  newLevel;
   1116            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
   1117            uint16 time;
   1118          
   1119            // if moving to on position, move to on level
   1120            if ( zclSampleLight_OnOff )
   1121            {
   1122              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1123              {
   1124                // The last Level (before going OFF) should be used)
   1125                newLevel = zclSampleLight_LevelLastLevel;
   1126              }
   1127              else
   1128              {
   1129                newLevel = zclSampleLight_LevelOnLevel;
   1130              }
   1131          
   1132              time = zclSampleLight_LevelOnTransitionTime;
   1133            }
   1134            else
   1135            {
   1136              newLevel = ATTR_LEVEL_MIN_LEVEL;
   1137          
   1138              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
   1139              {
   1140                // Save the current Level before going OFF to use it when the light turns ON
   1141                // it should be back to this level
   1142                zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   1143              }
   1144          
   1145              time = zclSampleLight_LevelOffTransitionTime;
   1146            }
   1147          
   1148            // else use OnOffTransitionTime if set (not 0xffff)
   1149            if ( time == 0xFFFF )
   1150            {
   1151              time = zclSampleLight_LevelOnOffTransitionTime;
   1152            }
   1153          
   1154            // else as fast as possible
   1155            if ( time == 0xFFFF )
   1156            {
   1157              time = 1;
   1158            }
   1159          
   1160            // calculate rate based on time (int 10ths) for full transition (1-254)
   1161            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
   1162          
   1163            // start up state machine.
   1164            zclSampleLight_WithOnOff = TRUE;
   1165            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1166          }
   1167          
   1168          /*********************************************************************
   1169           * @fn      zclSampleLight_AdjustLightLevel
   1170           *
   1171           * @brief   Called each 10th of a second while state machine running
   1172           *
   1173           * @param   none
   1174           *
   1175           * @return  none
   1176           */
   1177          static void zclSampleLight_AdjustLightLevel( void )
   1178          {
   1179            // one tick (10th of a second) less
   1180            if ( zclSampleLight_LevelRemainingTime )
   1181            {
   1182              --zclSampleLight_LevelRemainingTime;
   1183            }
   1184          
   1185            // no time left, done
   1186            if ( zclSampleLight_LevelRemainingTime == 0)
   1187            {
   1188              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
   1189            }
   1190          
   1191            // still time left, keep increment/decrementing
   1192            else
   1193            {
   1194              if ( zclSampleLight_NewLevelUp )
   1195              {
   1196                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
   1197              }
   1198              else
   1199              {
   1200                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
   1201              }
   1202              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
   1203            }
   1204          
   1205          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1206            zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
   1207          #endif
   1208          
   1209            // also affect on/off
   1210            if ( zclSampleLight_WithOnOff )
   1211            {
   1212              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
   1213              {
   1214                zclSampleLight_OnOff = LIGHT_ON;
   1215          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1216                ENABLE_LAMP;
   1217          #endif
   1218              }
   1219              else
   1220              {
   1221                zclSampleLight_OnOff = LIGHT_OFF;
   1222          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
   1223                DISABLE_LAMP;
   1224          #endif
   1225              }
   1226            }
   1227          
   1228            // display light level as we go
   1229            zclSampleLight_DisplayLight( );
   1230          
   1231            // keep ticking away
   1232            if ( zclSampleLight_LevelRemainingTime )
   1233            {
   1234              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   1235            }
   1236          }
   1237          
   1238          /*********************************************************************
   1239           * @fn      zclSampleLight_LevelControlMoveToLevelCB
   1240           *
   1241           * @brief   Callback from the ZCL General Cluster Library when
   1242           *          it received a LevelControlMoveToLevel Command for this application.
   1243           *
   1244           * @param   pCmd - ZigBee command parameters
   1245           *
   1246           * @return  none
   1247           */
   1248          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   1249          {
   1250            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1251            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
   1252          }
   1253          
   1254          /*********************************************************************
   1255           * @fn      zclSampleLight_LevelControlMoveCB
   1256           *
   1257           * @brief   Callback from the ZCL General Cluster Library when
   1258           *          it received a LevelControlMove Command for this application.
   1259           *
   1260           * @param   pCmd - ZigBee command parameters
   1261           *
   1262           * @return  none
   1263           */
   1264          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
   1265          {
   1266            uint8 newLevel;
   1267            uint32 rate;
   1268          
   1269            // convert rate from units per second to units per tick (10ths of seconds)
   1270            // and move at that right up or down
   1271            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1272          
   1273            if ( pCmd->moveMode == LEVEL_MOVE_UP )
   1274            {
   1275              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
   1276            }
   1277            else
   1278            {
   1279              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   1280            }
   1281          
   1282            rate = (uint32)100 * pCmd->rate;
   1283            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1284          }
   1285          
   1286          /*********************************************************************
   1287           * @fn      zclSampleLight_LevelControlStepCB
   1288           *
   1289           * @brief   Callback from the ZCL General Cluster Library when
   1290           *          it received an On/Off Command for this application.
   1291           *
   1292           * @param   pCmd - ZigBee command parameters
   1293           *
   1294           * @return  none
   1295           */
   1296          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   1297          {
   1298            uint8 newLevel;
   1299          
   1300            // determine new level, but don't exceed boundaries
   1301            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   1302            {
   1303              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   1304              {
   1305                newLevel = ATTR_LEVEL_MAX_LEVEL;
   1306              }
   1307              else
   1308              {
   1309                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   1310              }
   1311            }
   1312            else
   1313            {
   1314              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   1315              {
   1316                newLevel = ATTR_LEVEL_MIN_LEVEL;
   1317              }
   1318              else
   1319              {
   1320                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   1321              }
   1322            }
   1323          
   1324            // move to the new level
   1325            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1326            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   1327          }
   1328          
   1329          /*********************************************************************
   1330           * @fn      zclSampleLight_LevelControlStopCB
   1331           *
   1332           * @brief   Callback from the ZCL General Cluster Library when
   1333           *          it received an Level Control Stop Command for this application.
   1334           *
   1335           * @param   pCmd - ZigBee command parameters
   1336           *
   1337           * @return  none
   1338           */
   1339          static void zclSampleLight_LevelControlStopCB( void )
   1340          {
   1341            // stop immediately
   1342            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   1343            zclSampleLight_LevelRemainingTime = 0;
   1344          }
   1345          #endif
   1346          
   1347          /******************************************************************************
   1348           *
   1349           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1350           *
   1351           *****************************************************************************/
   1352          
   1353          /*********************************************************************
   1354           * @fn      zclSampleLight_ProcessIncomingMsg
   1355           *
   1356           * @brief   Process ZCL Foundation incoming message
   1357           *
   1358           * @param   pInMsg - pointer to the received message
   1359           *
   1360           * @return  none
   1361           */
   1362          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1363          {
   1364            switch ( pInMsg->zclHdr.commandID )
   1365            {
   1366          #ifdef ZCL_READ
   1367              case ZCL_CMD_READ_RSP:
   1368                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   1369                break;
   1370          #endif
   1371          #ifdef ZCL_WRITE
   1372              case ZCL_CMD_WRITE_RSP:
   1373                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   1374                break;
   1375          #endif
   1376          #ifdef ZCL_REPORT
   1377              // Attribute Reporting implementation should be added here
   1378              case ZCL_CMD_CONFIG_REPORT:
   1379                // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
   1380                break;
   1381          
   1382              case ZCL_CMD_CONFIG_REPORT_RSP:
   1383                // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
   1384                break;
   1385          
   1386              case ZCL_CMD_READ_REPORT_CFG:
   1387                // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
   1388                break;
   1389          
   1390              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1391                // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
   1392                break;
   1393          
   1394              case ZCL_CMD_REPORT:
   1395                // zclSampleLight_ProcessInReportCmd( pInMsg );
   1396                break;
   1397          #endif
   1398              case ZCL_CMD_DEFAULT_RSP:
   1399                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1400                break;
   1401          #ifdef ZCL_DISCOVER
   1402              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1403                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1404                break;
   1405          
   1406              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1407                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1408                break;
   1409          
   1410              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1411                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   1412                break;
   1413          
   1414              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1415                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1416                break;
   1417          #endif
   1418              default:
   1419                break;
   1420            }
   1421          
   1422            if ( pInMsg->attrCmd )
   1423              osal_mem_free( pInMsg->attrCmd );
   1424          }
   1425          
   1426          #ifdef ZCL_READ
   1427          /*********************************************************************
   1428           * @fn      zclSampleLight_ProcessInReadRspCmd
   1429           *
   1430           * @brief   Process the "Profile" Read Response Command
   1431           *
   1432           * @param   pInMsg - incoming message to process
   1433           *
   1434           * @return  none
   1435           */
   1436          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1437          {
   1438            zclReadRspCmd_t *readRspCmd;
   1439            uint8 i;
   1440          
   1441            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1442            for (i = 0; i < readRspCmd->numAttr; i++)
   1443            {
   1444              // Notify the originator of the results of the original read attributes
   1445              // attempt and, for each successfull request, the value of the requested
   1446              // attribute
   1447            }
   1448          
   1449            return ( TRUE );
   1450          }
   1451          #endif // ZCL_READ
   1452          
   1453          #ifdef ZCL_WRITE
   1454          /*********************************************************************
   1455           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1456           *
   1457           * @brief   Process the "Profile" Write Response Command
   1458           *
   1459           * @param   pInMsg - incoming message to process
   1460           *
   1461           * @return  none
   1462           */
   1463          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1464          {
   1465            zclWriteRspCmd_t *writeRspCmd;
   1466            uint8 i;
   1467          
   1468            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1469            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1470            {
   1471              // Notify the device of the results of the its original write attributes
   1472              // command.
   1473            }
   1474          
   1475            return ( TRUE );
   1476          }
   1477          #endif // ZCL_WRITE
   1478          
   1479          /*********************************************************************
   1480           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1481           *
   1482           * @brief   Process the "Profile" Default Response Command
   1483           *
   1484           * @param   pInMsg - incoming message to process
   1485           *
   1486           * @return  none
   1487           */
   1488          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1489          {
   1490            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1491          
   1492            // Device is notified of the Default Response command.
   1493            (void)pInMsg;
   1494          
   1495            return ( TRUE );
   1496          }
   1497          
   1498          #ifdef ZCL_DISCOVER
   1499          /*********************************************************************
   1500           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1501           *
   1502           * @brief   Process the Discover Commands Response Command
   1503           *
   1504           * @param   pInMsg - incoming message to process
   1505           *
   1506           * @return  none
   1507           */
   1508          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1509          {
   1510            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1511            uint8 i;
   1512          
   1513            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1514            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1515            {
   1516              // Device is notified of the result of its attribute discovery command.
   1517            }
   1518          
   1519            return ( TRUE );
   1520          }
   1521          
   1522          /*********************************************************************
   1523           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1524           *
   1525           * @brief   Process the "Profile" Discover Attributes Response Command
   1526           *
   1527           * @param   pInMsg - incoming message to process
   1528           *
   1529           * @return  none
   1530           */
   1531          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1532          {
   1533            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1534            uint8 i;
   1535          
   1536            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1537            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1538            {
   1539              // Device is notified of the result of its attribute discovery command.
   1540            }
   1541          
   1542            return ( TRUE );
   1543          }
   1544          
   1545          /*********************************************************************
   1546           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1547           *
   1548           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1549           *
   1550           * @param   pInMsg - incoming message to process
   1551           *
   1552           * @return  none
   1553           */
   1554          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1555          {
   1556            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1557            uint8 i;
   1558          
   1559            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1560            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1561            {
   1562              // Device is notified of the result of its attribute discovery command.
   1563            }
   1564          
   1565            return ( TRUE );
   1566          }
   1567          #endif // ZCL_DISCOVER
   1568          
   1569          #if ZCL_EZMODE
   1570          /*********************************************************************
   1571           * @fn      zclSampleLight_ProcessZDOMsgs
   1572           *
   1573           * @brief   Called when this node receives a ZDO/ZDP response.
   1574           *
   1575           * @param   none
   1576           *
   1577           * @return  status
   1578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1579          static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   \                     zclSampleLight_ProcessZDOMsgs:
   1580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 252
   \   000005   7404         MOV     A,#0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1581            zclEZMode_ActionData_t data;
   1582            char msgPrint[200];
   1583            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1584            ZDO_DeviceAnnce_t *pDeviceAnnce;
   1585            //for ieee req
   1586            ZDO_NwkIEEEAddrResp_t *pNwkIEEEAddrResp;
   1587          
   1588            // Let EZ-Mode know of the Simple Descriptor Response
   1589            if ( pMsg->clusterID == Match_Desc_rsp )
   \   00000E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000011   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000014   7406         MOV     A,#0x6
   \   000016   68           XRL     A,R0
   \   000017   7003         JNZ     ??zclSampleLight_ProcessZDOMsgs_0
   \   000019   7480         MOV     A,#-0x80
   \   00001B   69           XRL     A,R1
   \                     ??zclSampleLight_ProcessZDOMsgs_0:
   \   00001C   7029         JNZ     ??zclSampleLight_ProcessZDOMsgs_1
   1590            {
   1591              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   \   00001E                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00001E   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000021   8A..         MOV     ?V0,R2
   \   000023   8B..         MOV     ?V1,R3
   \   000025   AE..         MOV     R6,?V0
   \   000027   AF..         MOV     R7,?V1
   1592              data.pMatchDescRsp = pMatchDescRsp;
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   EE           MOV     A,R6
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   EF           MOV     A,R7
   \   000033   F0           MOVX    @DPTR,A
   1593              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   \   000034                ; Setup parameters for call to function zcl_EZModeAction
   \   000034   AA..         MOV     R2,?XSP + 0
   \   000036   AB..         MOV     R3,?XSP + 1
   \   000038   7905         MOV     R1,#0x5
   \   00003A   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   1594              osal_mem_free( pMatchDescRsp );
   \   00003D                ; Setup parameters for call to function osal_mem_free
   \   00003D   EE           MOV     A,R6
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000044   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
   1595            }
   1596            else if(pMsg->clusterID == Device_annce){
   \                     ??zclSampleLight_ProcessZDOMsgs_1:
   \   000047   7413         MOV     A,#0x13
   \   000049   68           XRL     A,R0
   \   00004A   49           ORL     A,R1
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_3 & 0xFFFF
   1597              
   1598              
   1599              pDeviceAnnce = osal_mem_alloc(sizeof(ZDO_DeviceAnnce_t));
   \   000050                ; Setup parameters for call to function osal_mem_alloc
   \   000050   7A0B         MOV     R2,#0xb
   \   000052   7B00         MOV     R3,#0x0
   \   000054   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000057   8A..         MOV     ?V0,R2
   \   000059   8B..         MOV     ?V1,R3
   1600              ZDO_ParseDeviceAnnce(pMsg,pDeviceAnnce);
   \   00005B                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00005B   AC..         MOV     R4,?V0
   \   00005D   AD..         MOV     R5,?V1
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1601              
   1602              sprintf(msgPrint, "CMD{\"CMD\":\"ANNCE\",\"IEEEADDR\":\"%x:%x:%x:%x:%x:%x:%x:%x\",\"SHORTADDR\":\"0x%x\",\"CAP\":\"0x%x\"}\r\n",pDeviceAnnce->extAddr[7],pDeviceAnnce->extAddr[6],pDeviceAnnce->extAddr[5],pDeviceAnnce->extAddr[4],pDeviceAnnce->extAddr[3],pDeviceAnnce->extAddr[2],pDeviceAnnce->extAddr[1],pDeviceAnnce->extAddr[0], pDeviceAnnce->nwkAddr,pDeviceAnnce->capabilities);
   \   000066                ; Setup parameters for call to function sprintf
   \   000066   85..82       MOV     DPL,?V0
   \   000069   85..83       MOV     DPH,?V1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F5..         MOV     ?V2,A
   \   000079   75..00       MOV     ?V3,#0x0
   \   00007C   78..         MOV     R0,#?V2
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   85..82       MOV     DPL,?V0
   \   000084   85..83       MOV     DPH,?V1
   \   000087   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   85..82       MOV     DPL,?V0
   \   000099   85..83       MOV     DPH,?V1
   \   00009C   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   85..82       MOV     DPL,?V0
   \   0000A5   85..83       MOV     DPH,?V1
   \   0000A8   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   85..82       MOV     DPL,?V0
   \   0000B1   85..83       MOV     DPH,?V1
   \   0000B4   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   85..82       MOV     DPL,?V0
   \   0000BD   85..83       MOV     DPH,?V1
   \   0000C0   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   85..82       MOV     DPL,?V0
   \   0000C9   85..83       MOV     DPH,?V1
   \   0000CC   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   85..82       MOV     DPL,?V0
   \   0000D5   85..83       MOV     DPH,?V1
   \   0000D8   A3           INC     DPTR
   \   0000D9   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   85..82       MOV     DPL,?V0
   \   0000E2   85..83       MOV     DPH,?V1
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F1   7C..         MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">` & 0xff
   \   0000F3   7D..         MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">` >> 8) & 0xff
   \   0000F5   7448         MOV     A,#0x48
   \   0000F7   12....       LCALL   ?XSTACK_DISP101_8
   \   0000FA   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0000FD   7414         MOV     A,#0x14
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   1603              HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
                                                        ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   000102                ; Setup parameters for call to function strlen
   \   000102   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_4 & 0xFFFF
   1604              //char sam[10] = "CMD ANNCE IEEE:\n";
   1605              
   1606              //HalUARTWrite(MT_UART_DEFAULT_PORT, sam, strlen(sam));
   1607              //uint8 *chldExtAddr;
   1608              //chldExtAddr = osal_mem_alloc(8);
   1609              //ZDO_DeviceAnnce_t msg;
   1610              //ZDO_ParseDeviceAnnce( pMsg, &msg);
   1611              //memcpy(&chldExtAddr, msg.extAddr, Z_EXTADDR_LEN);
   1612              //debug_str("Device_annce");
   1613            }
   1614            else if(pMsg->clusterID == IEEE_addr_rsp){
   \                     ??zclSampleLight_ProcessZDOMsgs_3:
   \   000105   7401         MOV     A,#0x1
   \   000107   68           XRL     A,R0
   \   000108   7003         JNZ     ??zclSampleLight_ProcessZDOMsgs_5
   \   00010A   7480         MOV     A,#-0x80
   \   00010C   69           XRL     A,R1
   \                     ??zclSampleLight_ProcessZDOMsgs_5:
   \   00010D   6003         JZ      $+5
   \   00010F   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
   1615              
   1616              
   1617              
   1618              pNwkIEEEAddrResp = ZDO_ParseAddrRsp( pMsg );
   \   000112                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000112   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000115   8A..         MOV     ?V0,R2
   \   000117   8B..         MOV     ?V1,R3
   \   000119   AE..         MOV     R6,?V0
   \   00011B   AF..         MOV     R7,?V1
   1619              if( pNwkIEEEAddrResp->status == ZDO_SUCCESS ){
   \   00011D   8E82         MOV     DPL,R6
   \   00011F   8F83         MOV     DPH,R7
   \   000121   E0           MOVX    A,@DPTR
   \   000122   6003         JZ      $+5
   \   000124   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_2 & 0xFFFF
   1620                
   1621                if( pNwkIEEEAddrResp->numAssocDevs == 0 ){
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F5..         MOV     ?V4,A
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F5..         MOV     ?V5,A
   \   00012F   EE           MOV     A,R6
   \   000130   240B         ADD     A,#0xb
   \   000132   F8           MOV     R0,A
   \   000133   E4           CLR     A
   \   000134   3F           ADDC    A,R7
   \   000135   F9           MOV     R1,A
   \   000136   88..         MOV     ?V0,R0
   \   000138   89..         MOV     ?V1,R1
   \   00013A   8882         MOV     DPL,R0
   \   00013C   F583         MOV     DPH,A
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F5..         MOV     ?V2,A
   \   000141   706A         JNZ     ??zclSampleLight_ProcessZDOMsgs_6
   1622                  
   1623                  sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"STATUS\":0,\"SHORTADDR\":\"0x%x\",\"Type\":0,\"IEEEADDR\":\"%x:%x:%x:%x:%x:%x:%x:%x\"}\r\n", pNwkIEEEAddrResp->nwkAddr, pNwkIEEEAddrResp->extAddr[7], pNwkIEEEAddrResp->extAddr[6], pNwkIEEEAddrResp->extAddr[5], pNwkIEEEAddrResp->extAddr[4], pNwkIEEEAddrResp->extAddr[3], pNwkIEEEAddrResp->extAddr[2], pNwkIEEEAddrResp->extAddr[1], pNwkIEEEAddrResp->extAddr[0]);
   \   000143                ; Setup parameters for call to function sprintf
   \   000143   8E82         MOV     DPL,R6
   \   000145   8F83         MOV     DPH,R7
   \   000147   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014D   8E82         MOV     DPL,R6
   \   00014F   8F83         MOV     DPH,R7
   \   000151   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000154   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000157   8E82         MOV     DPL,R6
   \   000159   8F83         MOV     DPH,R7
   \   00015B   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00015E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000161   8E82         MOV     DPL,R6
   \   000163   8F83         MOV     DPH,R7
   \   000165   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000168   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016B   8E82         MOV     DPL,R6
   \   00016D   8F83         MOV     DPH,R7
   \   00016F   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000172   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000175   8E82         MOV     DPL,R6
   \   000177   8F83         MOV     DPH,R7
   \   000179   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00017C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017F   8E82         MOV     DPL,R6
   \   000181   8F83         MOV     DPH,R7
   \   000183   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000186   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000189   8E82         MOV     DPL,R6
   \   00018B   8F83         MOV     DPH,R7
   \   00018D   A3           INC     DPTR
   \   00018E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000191   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000194   78..         MOV     R0,#?V4
   \   000196   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000199   7C..         MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">` & 0xff
   \   00019B   7D..         MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">` >> 8) & 0xff
   \   00019D   7446         MOV     A,#0x46
   \   00019F   12....       LCALL   ?XSTACK_DISP101_8
   \   0001A2   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0001A5   7412         MOV     A,#0x12
   \   0001A7   12....       LCALL   ?DEALLOC_XSTACK8
   1624                  HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
                                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   0001AA                ; Setup parameters for call to function strlen
   \   0001AA   02....       LJMP    ??zclSampleLight_ProcessZDOMsgs_4 & 0xFFFF
   1625                  
   1626                }
   1627                else if( pNwkIEEEAddrResp->numAssocDevs > 0 ){
   1628                  
   1629                  char temp[50];
   1630                  
   1631                  sprintf(msgPrint, "CMD{\"CMD\":\"IEEEREQ\",\"STATUS\":0,\"SHORTADDR\":\"0x%x\",\"Type\":1,\"STID\":\"0x%x\",\"NumAsso\":\"0x%x\",\"TB\":[", pNwkIEEEAddrResp->nwkAddr, pNwkIEEEAddrResp->startIndex, pNwkIEEEAddrResp->numAssocDevs);
   \                     ??zclSampleLight_ProcessZDOMsgs_6:
   \   0001AD                ; Setup parameters for call to function sprintf
   \   0001AD   75..00       MOV     ?V3,#0x0
   \   0001B0   78..         MOV     R0,#?V2
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B5   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001B8   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BE   78..         MOV     R0,#?V4
   \   0001C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C3   7C..         MOV     R4,#`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1` & 0xff
   \   0001C5   7D..         MOV     R5,#(`?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1` >> 8) & 0xff
   \   0001C7   743A         MOV     A,#0x3a
   \   0001C9   12....       LCALL   ?XSTACK_DISP101_8
   \   0001CC   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0001CF   7406         MOV     A,#0x6
   \   0001D1   12....       LCALL   ?DEALLOC_XSTACK8
   1632                  
   1633                  for(uint8 i = 0 ; i < pNwkIEEEAddrResp->numAssocDevs ; i++){
   \   0001D4   75..00       MOV     ?V2,#0x0
   \   0001D7   803A         SJMP    ??zclSampleLight_ProcessZDOMsgs_7
   1634                  
   1635                    sprintf(temp, "\"0x%x\",", pNwkIEEEAddrResp->devList[i]);
   \                     ??zclSampleLight_ProcessZDOMsgs_8:
   \   0001D9                ; Setup parameters for call to function sprintf
   \   0001D9   A8..         MOV     R0,?V2
   \   0001DB   E8           MOV     A,R0
   \   0001DC   28           ADD     A,R0
   \   0001DD   F8           MOV     R0,A
   \   0001DE   E4           CLR     A
   \   0001DF   33           RLC     A
   \   0001E0   F9           MOV     R1,A
   \   0001E1   EE           MOV     A,R6
   \   0001E2   28           ADD     A,R0
   \   0001E3   F8           MOV     R0,A
   \   0001E4   EF           MOV     A,R7
   \   0001E5   39           ADDC    A,R1
   \   0001E6   F9           MOV     R1,A
   \   0001E7   E8           MOV     A,R0
   \   0001E8   240D         ADD     A,#0xd
   \   0001EA   F582         MOV     DPL,A
   \   0001EC   E4           CLR     A
   \   0001ED   39           ADDC    A,R1
   \   0001EE   F583         MOV     DPH,A
   \   0001F0   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001F3   7C..         MOV     R4,#`?<Constant "\\"0x%x\\",">` & 0xff
   \   0001F5   7D..         MOV     R5,#(`?<Constant "\\"0x%x\\",">` >> 8) & 0xff
   \   0001F7   7404         MOV     A,#0x4
   \   0001F9   12....       LCALL   ?XSTACK_DISP101_8
   \   0001FC   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0001FF   7402         MOV     A,#0x2
   \   000201   12....       LCALL   ?DEALLOC_XSTACK8
   1636                    strcat(msgPrint,temp);
   \   000204                ; Setup parameters for call to function strcat
   \   000204   7402         MOV     A,#0x2
   \   000206   12....       LCALL   ?XSTACK_DISP102_8
   \   000209   7434         MOV     A,#0x34
   \   00020B   12....       LCALL   ?XSTACK_DISP101_8
   \   00020E   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
   1637                  }
   \   000211   05..         INC     ?V2
   \                     ??zclSampleLight_ProcessZDOMsgs_7:
   \   000213   85..82       MOV     DPL,?V0
   \   000216   85..83       MOV     DPH,?V1
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   F8           MOV     R0,A
   \   00021B   E5..         MOV     A,?V2
   \   00021D   C3           CLR     C
   \   00021E   98           SUBB    A,R0
   \   00021F   40B8         JC      ??zclSampleLight_ProcessZDOMsgs_8
   1638                  
   1639                  sprintf(temp, "]}");
   \   000221                ; Setup parameters for call to function sprintf
   \   000221   7C..         MOV     R4,#`?<Constant "]}">` & 0xff
   \   000223   7D..         MOV     R5,#(`?<Constant "]}">` >> 8) & 0xff
   \   000225   7402         MOV     A,#0x2
   \   000227   12....       LCALL   ?XSTACK_DISP101_8
   \   00022A   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   1640                  strcat(msgPrint,temp);
   \   00022D                ; Setup parameters for call to function strcat
   \   00022D   7402         MOV     A,#0x2
   \   00022F   12....       LCALL   ?XSTACK_DISP102_8
   \   000232   7434         MOV     A,#0x34
   \   000234   12....       LCALL   ?XSTACK_DISP101_8
   \   000237   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
   1641                  
   1642                  HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
                                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   00023A                ; Setup parameters for call to function strlen
   \                     ??zclSampleLight_ProcessZDOMsgs_4:
   \   00023A   7434         MOV     A,#0x34
   \   00023C   12....       LCALL   ?XSTACK_DISP101_8
   \   00023F   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   000242   8A..         MOV     ?V0,R2
   \   000244   8B..         MOV     ?V1,R3
   \   000246   AC..         MOV     R4,?V0
   \   000248   AD..         MOV     R5,?V1
   \   00024A                ; Setup parameters for call to function HalUARTWrite
   \   00024A   7434         MOV     A,#0x34
   \   00024C   12....       LCALL   ?XSTACK_DISP101_8
   \   00024F   7900         MOV     R1,#0x0
   \   000251   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   1643                
   1644                }
   1645                
   1646              }
   1647              /*
   1648              else{
   1649                
   1650                sprintf(msgPrint, "CMD{CMD:\"IEEEREQ\",STATUS:%d,SRCADDR:\"%x\"}\r\n", pNwkIEEEAddrResp->status, pNwkIEEEAddrResp->nwkAddr);
   1651                HalUARTWrite(MT_UART_DEFAULT_PORT, msgPrint, strlen(msgPrint));
   1652                
   1653              }*/
   1654            
   1655            }
   1656            
   1657          }
   \                     ??zclSampleLight_ProcessZDOMsgs_2:
   \   000254   74FC         MOV     A,#-0x4
   \   000256   12....       LCALL   ?DEALLOC_XSTACK8
   \   000259   7F06         MOV     R7,#0x6
   \   00025B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0,A
   \   000006   75..00       MOV     ?V1,#0x0
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine11_0
   \   000001                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine12_0
   \   000001                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine13_0
   \   000001                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine14_0
   \   000001                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine15_0
   \   000001                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine16_0
   \   000001                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine17_0
   \   000001                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine18_0
   \   000001                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine19_0
   \   000001                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine20_0
   \   000001                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine21_0
   \   000002                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   78..         MOV     R0,#?V2
   \   000005   22           RET
   1658          
   1659          /*********************************************************************
   1660           * @fn      zclSampleLight_EZModeCB
   1661           *
   1662           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1663          *           going on during EZ-Mode steering/finding/binding.
   1664           *
   1665           * @param   state - an
   1666           *
   1667           * @return  none
   1668           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1669          static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   \                     zclSampleLight_EZModeCB:
   1670          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1671          #ifdef LCD_SUPPORTED
   1672            char *pStr;
   1673            uint8 err;
   1674          #endif
   1675          
   1676            // time to go into identify mode
   1677            if ( state == EZMODE_STATE_IDENTIFYING )
   \   000007   7404         MOV     A,#0x4
   \   000009   6E           XRL     A,R6
   \   00000A   700E         JNZ     ??zclSampleLight_EZModeCB_0
   1678            {
   1679          #ifdef LCD_SUPPORTED
   1680              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   1681          #endif
   1682          
   1683              zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   \   00000C   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   00000F   74B4         MOV     A,#-0x4c
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1684              zclSampleLight_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   \   000018   8026         SJMP    ??zclSampleLight_EZModeCB_1
   1685            }
   1686          
   1687            // autoclosing, show what happened (success, cancelled, etc...)
   1688            if( state == EZMODE_STATE_AUTOCLOSE )
   1689            {
   1690          #ifdef LCD_SUPPORTED
   1691              pStr = NULL;
   1692              err = pData->sAutoClose.err;
   1693              if ( err == EZMODE_ERR_SUCCESS )
   1694              {
   1695                pStr = "EZMode: Success";
   1696              }
   1697              else if ( err == EZMODE_ERR_NOMATCH )
   1698              {
   1699                pStr = "EZMode: NoMatch"; // not a match made in heaven
   1700              }
   1701              if ( pStr )
   1702              {
   1703                if ( giLightScreenMode == LIGHT_MAINMODE )
   1704                {
   1705                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1706                }
   1707              }
   1708          #endif
   1709            }
   1710          
   1711            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1712            if( state == EZMODE_STATE_FINISH )
   \                     ??zclSampleLight_EZModeCB_0:
   \   00001A   7463         MOV     A,#0x63
   \   00001C   6E           XRL     A,R6
   \   00001D   7021         JNZ     ??zclSampleLight_EZModeCB_1
   1713            {
   1714              // turn off identify mode
   1715              zclSampleLight_IdentifyTime = 0;
   \   00001F   90....       MOV     DPTR,#zclSampleLight_IdentifyTime
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
   1716              zclSampleLight_ProcessIdentifyTimeChange();
   \   000026                ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
   \   000026   12....       LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
   1717          
   1718          #ifdef LCD_SUPPORTED
   1719              // if successful, inform user which nwkaddr/ep we bound to
   1720              pStr = NULL;
   1721              err = pData->sFinish.err;
   1722              if( err == EZMODE_ERR_SUCCESS )
   1723              {
   1724                // already stated on autoclose
   1725              }
   1726              else if ( err == EZMODE_ERR_CANCELLED )
   1727              {
   1728                pStr = "EZMode: Cancel";
   1729              }
   1730              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   1731              {
   1732                pStr = "EZMode: BadParm";
   1733              }
   1734              else if ( err == EZMODE_ERR_TIMEDOUT )
   1735              {
   1736                pStr = "EZMode: TimeOut";
   1737              }
   1738              if ( pStr )
   1739              {
   1740                if ( giLightScreenMode == LIGHT_MAINMODE )
   1741                {
   1742                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1743                }
   1744              }
   1745          #endif
   1746              // show main UI screen 3 seconds after binding
   1747              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
   \   000029                ; Setup parameters for call to function osal_start_timerEx
   \   000029   90....       MOV     DPTR,#__Constant_bb8
   \   00002C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00002F   7A10         MOV     R2,#0x10
   \   000031   7B00         MOV     R3,#0x0
   \   000033   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   1748            }
   1749          }
   \                     ??zclSampleLight_EZModeCB_1:
   \   000040   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   08           DB 8
   \   000001   ....         DW zclSampleLight_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleLight_BasicResetCB::?relay`
   \   000002   ....         DW `??zclSampleLight_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
   \   00000C   ....         DW `??zclSampleLight_OnOffCB::?relay`
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_LcdDisplayUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_ProcessIdentifyTimeChange::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_EZModeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_EZModeCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD{\\"CMD\\":\\"ANNCE\\",\\"IE...">`:
   \   000000   434D447B     DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
   \            22434D44
   \   000008   223A2241     DB 22H, 3AH, 22H, 41H, 4EH, 4EH, 43H, 45H
   \            4E4E4345
   \   000010   222C2249     DB 22H, 2CH, 22H, 49H, 45H, 45H, 45H, 41H
   \            45454541
   \   000018   44445222     DB 44H, 44H, 52H, 22H, 3AH, 22H, 25H, 78H
   \            3A222578
   \   000020   3A25783A     DB 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH, 25H
   \            25783A25
   \   000028   783A2578     DB 78H, 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH
   \            3A25783A
   \   000030   25783A25     DB 25H, 78H, 3AH, 25H, 78H, 22H, 2CH, 22H
   \            78222C22
   \   000038   53484F52     DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
   \            54414444
   \   000040   52223A22     DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
   \            30782578
   \   000048   222C2243     DB 22H, 2CH, 22H, 43H, 41H, 50H, 22H, 3AH
   \            4150223A
   \   000050   22307825     DB 22H, 30H, 78H, 25H, 78H, 22H, 7DH, 0DH
   \            78227D0D
   \   000058   0A00         DB 0AH, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">`:
   \   000000   434D447B     DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
   \            22434D44
   \   000008   223A2249     DB 22H, 3AH, 22H, 49H, 45H, 45H, 45H, 52H
   \            45454552
   \   000010   4551222C     DB 45H, 51H, 22H, 2CH, 22H, 53H, 54H, 41H
   \            22535441
   \   000018   54555322     DB 54H, 55H, 53H, 22H, 3AH, 30H, 2CH, 22H
   \            3A302C22
   \   000020   53484F52     DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
   \            54414444
   \   000028   52223A22     DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
   \            30782578
   \   000030   222C2254     DB 22H, 2CH, 22H, 54H, 79H, 70H, 65H, 22H
   \            79706522
   \   000038   3A302C22     DB 3AH, 30H, 2CH, 22H, 49H, 45H, 45H, 45H
   \            49454545
   \   000040   41444452     DB 41H, 44H, 44H, 52H, 22H, 3AH, 22H, 25H
   \            223A2225
   \   000048   783A2578     DB 78H, 3AH, 25H, 78H, 3AH, 25H, 78H, 3AH
   \            3A25783A
   \   000050   25783A25     DB 25H, 78H, 3AH, 25H, 78H, 3AH, 25H, 78H
   \            783A2578
   \   000058   3A25783A     DB 3AH, 25H, 78H, 3AH, 25H, 78H, 22H, 7DH
   \            2578227D
   \   000060   0D0A00       DB 0DH, 0AH, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD{\\"CMD\\":\\"IEEEREQ\\",\\"...">_1`:
   \   000000   434D447B     DB 43H, 4DH, 44H, 7BH, 22H, 43H, 4DH, 44H
   \            22434D44
   \   000008   223A2249     DB 22H, 3AH, 22H, 49H, 45H, 45H, 45H, 52H
   \            45454552
   \   000010   4551222C     DB 45H, 51H, 22H, 2CH, 22H, 53H, 54H, 41H
   \            22535441
   \   000018   54555322     DB 54H, 55H, 53H, 22H, 3AH, 30H, 2CH, 22H
   \            3A302C22
   \   000020   53484F52     DB 53H, 48H, 4FH, 52H, 54H, 41H, 44H, 44H
   \            54414444
   \   000028   52223A22     DB 52H, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
   \            30782578
   \   000030   222C2254     DB 22H, 2CH, 22H, 54H, 79H, 70H, 65H, 22H
   \            79706522
   \   000038   3A312C22     DB 3AH, 31H, 2CH, 22H, 53H, 54H, 49H, 44H
   \            53544944
   \   000040   223A2230     DB 22H, 3AH, 22H, 30H, 78H, 25H, 78H, 22H
   \            78257822
   \   000048   2C224E75     DB 2CH, 22H, 4EH, 75H, 6DH, 41H, 73H, 73H
   \            6D417373
   \   000050   6F223A22     DB 6FH, 22H, 3AH, 22H, 30H, 78H, 25H, 78H
   \            30782578
   \   000058   222C2254     DB 22H, 2CH, 22H, 54H, 42H, 22H, 3AH, 5BH
   \            42223A5B
   \   000060   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"0x%x\\",">`:
   \   000000   22307825     DB "\"0x%x\","
   \            78222C00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "]}">`:
   \   000000   5D7D00       DB "]}"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000
   1750          #endif // ZCL_EZMODE
   1751          
   1752          /****************************************************************************
   1753          ****************************************************************************/
   1754          
   1755          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   zclSampleLight_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      0     13   zclSampleLight_EZModeCB
        0     13   -> osal_start_timerEx
        0      9   -> zclSampleLight_ProcessIdentifyTimeChange
      0     32   zclSampleLight_HandleKeys
        0     19   -> NLME_GetShortAddr
        0     20   -> NLME_SendNetworkStatus
        0     19   -> ZDP_MgmtPermitJoinReq
        0     19   -> zclSampleLight_BasicResetCB
        0     19   -> zclSampleLight_LcdDisplayUpdate
        0     19   -> zcl_InvokeEZMode
      2      0   zclSampleLight_IdentifyCB
        2      0   -> zclSampleLight_ProcessIdentifyTimeChange
      2      2   zclSampleLight_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0      9   zclSampleLight_Init
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> zclDiagnostic_InitStats
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_RegisterEZMode
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
        0      9   -> zcl_registerReadWriteCB
      2     19   zclSampleLight_LcdDisplayUpdate
        2      0   -> HalLedSet
      0     10   zclSampleLight_OnOffCB
        0     10   -> zclSampleLight_LcdDisplayUpdate
        0     10   -> zcl_getRawAFMsg
      2     16   zclSampleLight_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      0    298   zclSampleLight_ProcessZDOMsgs
        0    266   -> HalUARTWrite
        0    266   -> ZDO_ParseAddrRsp
        0    266   -> ZDO_ParseDeviceAnnce
        0    266   -> ZDO_ParseEPListRsp
        0    266   -> osal_mem_alloc
        0    266   -> osal_mem_free
        0    266   -> sprintf
        0    268   -> sprintf
        0    272   -> sprintf
        0    284   -> sprintf
        0    286   -> sprintf
        0    266   -> strcat
        0    266   -> strlen
        0    266   -> zcl_EZModeAction
      0     12   zclSampleLight_event_loop
        0     12   -> osal_mem_free
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclSampleLight_HandleKeys
        0     12   -> zclSampleLight_LcdDisplayUpdate
        0     12   -> zclSampleLight_ProcessIdentifyTimeChange
        0     12   -> zclSampleLight_ProcessZDOMsgs
        0     12   -> zcl_EZModeAction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      90  ?<Constant "CMD{\"CMD\":\"ANNCE\",\"IE...">
      99  ?<Constant "CMD{\"CMD\":\"IEEEREQ\",\"...">
      97  ?<Constant "CMD{\"CMD\":\"IEEEREQ\",\"...">_1
       8  ?<Constant "\"0x%x\",">
       3  ?<Constant "]}">
       6  ?<Initializer for sampleLight_TestEp>
      32  ?<Initializer for zclSampleLight_CmdCallbacks>
       1  ?<Initializer for zclSampleLight_NwkState>
       6  ??Subroutine10_0
       1  ??Subroutine11_0
       1  ??Subroutine12_0
       1  ??Subroutine13_0
       1  ??Subroutine14_0
      10  ??Subroutine15_0
       1  ??Subroutine16_0
       1  ??Subroutine17_0
       1  ??Subroutine18_0
       1  ??Subroutine19_0
       2  ??Subroutine20_0
       6  ??Subroutine21_0
       7  ??Subroutine9_0
       5  ?Subroutine0
       5  ?Subroutine1
       3  ?Subroutine2
       1  ?Subroutine3
       1  ?Subroutine4
      16  ?Subroutine5
       3  ?Subroutine6
      12  ?Subroutine7
      10  ?Subroutine8
       4  __Constant_3e8
       4  __Constant_bb8
       1  gPermitDuration
       1  giLightScreenMode
       6  sampleLight_TestEp
       1  zclSampleLightSeqNum
      57  zclSampleLight_BasicResetCB
       6  zclSampleLight_BasicResetCB::?relay
      32  zclSampleLight_CmdCallbacks
      12  zclSampleLight_DstAddr
      67  zclSampleLight_EZModeCB
       6  zclSampleLight_EZModeCB::?relay
     284  zclSampleLight_HandleKeys
       6  zclSampleLight_HandleKeys::?relay
      27  zclSampleLight_IdentifyCB
       6  zclSampleLight_IdentifyCB::?relay
      34  zclSampleLight_IdentifyQueryRspCB
       6  zclSampleLight_IdentifyQueryRspCB::?relay
     128  zclSampleLight_Init
       6  zclSampleLight_Init::?relay
      25  zclSampleLight_LcdDisplayUpdate
       6  zclSampleLight_LcdDisplayUpdate::?relay
       1  zclSampleLight_NwkState
      68  zclSampleLight_OnOffCB
       6  zclSampleLight_OnOffCB::?relay
      82  zclSampleLight_ProcessIdentifyTimeChange
       6  zclSampleLight_ProcessIdentifyTimeChange::?relay
     606  zclSampleLight_ProcessZDOMsgs
       6  zclSampleLight_ProcessZDOMsgs::?relay
      10  zclSampleLight_RegisterEZModeData
       1  zclSampleLight_TaskID
     295  zclSampleLight_event_loop
       6  zclSampleLight_event_loop::?relay

 
 1 768 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    39 bytes in segment XDATA_I
    39 bytes in segment XDATA_ID
   315 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
 1 873 bytes of CODE  memory
   307 bytes of CONST memory (+ 8 bytes shared)
    55 bytes of XDATA memory

Errors: none
Warnings: 3
