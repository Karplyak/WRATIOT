///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               13/Jun/2016  16:05:00
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
//        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List
//        -lA
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List
//        --diag_suppress Pe001,Pa010 -o
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes
//    List file          =  
//        H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleLight_EZModeCB::?relay`,0203H
        FUNCTION `??zclSampleLight_HandleKeys::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessIdentifyTimeChange::?re`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_bb8
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC sClearLine
        PUBLIC sDeviceName
        PUBLIC sLightOff
        PUBLIC sLightOn
        PUBLIC sSwEZMode
        PUBLIC sSwHelp
        PUBLIC sSwLight
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zclSampleLight_DstAddr
        FUNCTION zclSampleLight_EZModeCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION zclSampleLight_HandleKeys,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSampleLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyQueryRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_NwkState
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclSampleLight_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 38>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 38>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zclHA_LcdStatusLine1 SYMBOL "zclHA_LcdStatusLine1"
`??zclHA_LcdStatusLine1::?relay` SYMBOL "?relay", zclHA_LcdStatusLine1
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_RegisterEZMode  SYMBOL "zcl_RegisterEZMode"
`??zcl_RegisterEZMode::?relay` SYMBOL "?relay", zcl_RegisterEZMode
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zclHA_LcdStatusLine1::?relay`
        FUNCTION `??zclHA_LcdStatusLine1::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_RegisterEZMode::?relay`
        FUNCTION `??zcl_RegisterEZMode::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_LcdStatusLine1
        FUNCTION zclHA_LcdStatusLine1,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_IdentifyCommissionState
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_RegisterEZMode
        FUNCTION zcl_RegisterEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// H:\WRAT\Project\IotProject\Hardware\LightBulb\Hardware\cc2530\SourceCode\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "zcl.h"
//   77 #include "zcl_general.h"
//   78 #include "zcl_ha.h"
//   79 #include "zcl_ezmode.h"
//   80 #include "zcl_diagnostic.h"
//   81 
//   82 #include "zcl_samplelight.h"
//   83 
//   84 #include "onboard.h"
//   85 
//   86 /* HAL */
//   87 #include "hal_lcd.h"
//   88 #include "hal_led.h"
//   89 #include "hal_key.h"
//   90 
//   91 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   92       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   93 #include "zgp_translationtable.h"
//   94   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   95     #define ZGP_AUTO_TT
//   96   #endif
//   97 #endif
//   98 
//   99 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  100 #include "math.h"
//  101 #include "hal_timer.h"
//  102 #endif
//  103 
//  104 #include "NLMEDE.h"
//  105 
//  106 #include "DebugTrace.h"
//  107 #include "string.h"
//  108 #include "MT_UART.h"
//  109 
//  110 /*********************************************************************
//  111  * MACROS
//  112  */
//  113 
//  114 /*********************************************************************
//  115  * CONSTANTS
//  116  */
//  117 #if (defined HAL_BOARD_ZLIGHT)
//  118 #define LEVEL_MAX                 0xFE
//  119 #define LEVEL_MIN                 0x0
//  120 #define GAMMA_VALUE               2
//  121 #define PWM_FULL_DUTY_CYCLE       1000
//  122 #elif (defined HAL_PWM)
//  123 #define LEVEL_MAX                 0xFE
//  124 #define LEVEL_MIN                 0x0
//  125 #define GAMMA_VALUE               2
//  126 #define PWM_FULL_DUTY_CYCLE       100
//  127 #endif
//  128 
//  129 /*********************************************************************
//  130  * TYPEDEFS
//  131  */
//  132 
//  133 /*********************************************************************
//  134  * GLOBAL VARIABLES
//  135  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  138 
//  139 
//  140 /*********************************************************************
//  141  * GLOBAL FUNCTIONS
//  142  */
//  143 
//  144 /*********************************************************************
//  145  * LOCAL VARIABLES
//  146  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  148 
//  149 #ifdef ZCL_EZMODE
//  150 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  151 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  152 
//  153 
//  154 // register EZ-Mode with task information (timeout events, callback, etc...)

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  155 static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
zclSampleLight_RegisterEZModeData:
        DATA16
        DW zclSampleLight_TaskID
        DW 8
        DW 4
        DW zclSampleLightSeqNum
        DW `??zclSampleLight_EZModeCB::?relay`
//  156 {
//  157   &zclSampleLight_TaskID,
//  158   SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  159   SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  160   &zclSampleLightSeqNum,
//  161   zclSampleLight_EZModeCB
//  162 };
//  163 
//  164 #else
//  165 uint16 bindingInClusters[] =
//  166 {
//  167   ZCL_CLUSTER_ID_GEN_ON_OFF
//  168 #ifdef ZCL_LEVEL_CTRL
//  169   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  170 #endif
//  171 };
//  172 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  173 
//  174 #endif  // ZCL_EZMODE
//  175 
//  176 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  177 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  178 {
//  179   SAMPLELIGHT_ENDPOINT,
//  180   &zclSampleLight_TaskID,
//  181   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  182   (afNetworkLatencyReq_t)0            // No Network Latency req
//  183 };
//  184 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  186 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  187 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  188 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  189 devStates_t zclSampleLight_NwkState = DEV_INIT;
zclSampleLight_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleLight_NwkState>`
        REQUIRE __INIT_XDATA_I
//  190 
//  191 #if ZCL_LEVEL_CTRL
//  192 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  193 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  194 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  195 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  196 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  197 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  198 #endif
//  199 
//  200 /*********************************************************************
//  201  * LOCAL FUNCTIONS
//  202  */
//  203 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  204 static void zclSampleLight_BasicResetCB( void );
//  205 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  206 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  207 static void zclSampleLight_OnOffCB( uint8 cmd );
//  208 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  209 #ifdef ZCL_LEVEL_CTRL
//  210 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  211 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  212 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  213 static void zclSampleLight_LevelControlStopCB( void );
//  214 static void zclSampleLight_DefaultMove( void );
//  215 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  216 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  217 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  218 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  219 static void zclSampleLight_AdjustLightLevel( void );
//  220 #endif
//  221 
//  222 // app display functions
//  223 static void zclSampleLight_LcdDisplayUpdate( void );
//  224 #ifdef LCD_SUPPORTED
//  225 static void zclSampleLight_LcdDisplayMainMode( void );
//  226 static void zclSampleLight_LcdDisplayHelpMode( void );
//  227 #endif
//  228 static void zclSampleLight_DisplayLight( void );
//  229 
//  230 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  231 void zclSampleLight_UpdateLampLevel( uint8 level );
//  232 #endif
//  233 
//  234 // Functions to process ZCL Foundation incoming Command/Response messages
//  235 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  236 #ifdef ZCL_READ
//  237 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  238 #endif
//  239 #ifdef ZCL_WRITE
//  240 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  241 #endif
//  242 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  243 #ifdef ZCL_DISCOVER
//  244 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  245 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  246 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  247 #endif
//  248 
//  249 /*********************************************************************
//  250  * STATUS STRINGS
//  251  */
//  252 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  253 const char sDeviceName[]   = "  Sample Light";
sDeviceName:
        DB "  Sample Light"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  254 const char sClearLine[]    = " ";
sClearLine:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  255 const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
sSwLight:
        DB "SW1: ToggleLight"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  256 const char sSwEZMode[]     = "SW2: EZ-Mode";
sSwEZMode:
        DB "SW2: EZ-Mode"

        RSEG XDATA_I:XDATA:NOROOT(0)
//  257 char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
sSwHelp:
        DATA8
        DS 17
        REQUIRE `?<Initializer for sSwHelp>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  258 const char sLightOn[]      = "    LIGHT ON ";
sLightOn:
        DB "    LIGHT ON "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  259 const char sLightOff[]     = "    LIGHT OFF";
sLightOff:
        DB "    LIGHT OFF"
//  260  #if ZCL_LEVEL_CTRL
//  261  char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
//  262  #endif
//  263 #endif
//  264 
//  265 /*********************************************************************
//  266  * ZCL General Profile Callback table
//  267  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  268 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  269 {
//  270   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  271   zclSampleLight_IdentifyCB,              // Identify command
//  272 #ifdef ZCL_EZMODE
//  273   NULL,                                   // Identify EZ-Mode Invoke command
//  274   NULL,                                   // Identify Update Commission State command
//  275 #endif
//  276   NULL,                                   // Identify Trigger Effect command
//  277   zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
//  278   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  279   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  280   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  281   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  282 #ifdef ZCL_LEVEL_CTRL
//  283   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  284   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  285   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  286   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  287 #endif
//  288 #ifdef ZCL_GROUPS
//  289   NULL,                                   // Group Response commands
//  290 #endif
//  291 #ifdef ZCL_SCENES
//  292   NULL,                                  // Scene Store Request command
//  293   NULL,                                  // Scene Recall Request command
//  294   NULL,                                  // Scene Response command
//  295 #endif
//  296 #ifdef ZCL_ALARMS
//  297   NULL,                                  // Alarm (Response) commands
//  298 #endif
//  299 #ifdef SE_UK_EXT
//  300   NULL,                                  // Get Event Log command
//  301   NULL,                                  // Publish Event Log command
//  302 #endif
//  303   NULL,                                  // RSSI Location command
//  304   NULL                                   // RSSI Location Response command
//  305 };
//  306 
//  307 /*********************************************************************
//  308  * @fn          zclSampleLight_Init
//  309  *
//  310  * @brief       Initialization function for the zclGeneral layer.
//  311  *
//  312  * @param       none
//  313  *
//  314  * @return      none
//  315  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  316 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  317 {
        FUNCALL zclSampleLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_RegisterEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  318   zclSampleLight_TaskID = task_id;
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    @DPTR,A
//  319 
//  320   // Set destination address to indirect
//  321   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  322   zclSampleLight_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  323   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  324 
//  325   // This app is part of the Home Automation Profile
//  326   zclHA_Init( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclSampleLight_SimpleDesc & 0xff
        MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  327 
//  328   // Register the ZCL General Cluster Library callback functions
//  329   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  330 
//  331   // Register the application's attribute list
//  332   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleLight_Attrs & 0xff
        MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV     DPTR,#zclSampleLight_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  333 
//  334   // Register the Application to receive the unprocessed Foundation command/response messages
//  335   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  336 
//  337 #ifdef ZCL_DISCOVER
//  338   // Register the application's command list
//  339   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
//  340 #endif
//  341 
//  342   // Register for all key events - This app will handle all key events
//  343   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  344 
//  345   // Register for a test endpoint
//  346   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  347 
//  348 #ifdef ZCL_EZMODE
//  349   // Register EZ-Mode
//  350   zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
        ; Setup parameters for call to function zcl_RegisterEZMode
        MOV     R2,#zclSampleLight_RegisterEZModeData & 0xff
        MOV     R3,#(zclSampleLight_RegisterEZModeData >> 8) & 0xff
        LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
//  351 
//  352   // Register with the ZDO to receive Match Descriptor Responses
//  353   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  354 #endif
//  355 
//  356 
//  357 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  358   HalTimer1Init( 0 );
//  359   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  360   halTimer1SetChannelDuty( RED_LED, 0 );
//  361   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  362   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  363 
//  364   // find if we are already on a network from NV_RESTORE
//  365   uint8 state;
//  366   NLME_GetRequest( nwkNwkState, 0, &state );
//  367 
//  368   if ( state < NWK_ENDDEVICE )
//  369   {
//  370     // Start EZMode on Start up to avoid button press
//  371     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  372   }
//  373 #if ZCL_LEVEL_CTRL
//  374   zclSampleLight_DefaultMove();
//  375 #endif
//  376 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  377 
//  378 #ifdef ZCL_DIAGNOSTIC
//  379   // Register the application's callback function to read/write attribute data.
//  380   // This is only required when the attribute data format is unknown to ZCL.
//  381   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  382 
//  383   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  384   {
//  385     // Here the user could start the timer to save Diagnostics to NV
//  386   }
//  387 #endif
//  388 
//  389 #ifdef LCD_SUPPORTED
//  390   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sDeviceName & 0xff
        MOV     R3,#(sDeviceName >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  391 #endif  // LCD_SUPPORTED
//  392 
//  393 #ifdef ZGP_AUTO_TT
//  394   zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
//  395 #endif
//  396 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  397 
//  398 /*********************************************************************
//  399  * @fn          zclSample_event_loop
//  400  *
//  401  * @brief       Event Loop Processor for zclGeneral.
//  402  *
//  403  * @param       none
//  404  *
//  405  * @return      none
//  406  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  407 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  408 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  409   afIncomingMSGPacket_t *MSGpkt;
//  410 
//  411   (void)task_id;  // Intentionally unreferenced parameter
//  412 
//  413   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleLight_event_loop_0
//  414   {
//  415     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  416     {
//  417       switch ( MSGpkt->hdr.event )
//  418       {
//  419 #ifdef ZCL_EZMODE
//  420         case ZDO_CB_MSG:
//  421           zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  422           break;
//  423 #endif
//  424         case ZCL_INCOMING_MSG:
//  425           // Incoming ZCL Foundation command/response messages
//  426           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  427           break;
//  428 
//  429         case KEY_CHANGE:
//  430           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  431           break;
//  432 
//  433         case ZDO_STATE_CHANGE:
//  434           zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  435 
//  436           // now on the network
//  437           if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  438                (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  439                (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  440           {
//  441             giLightScreenMode = LIGHT_MAINMODE;
//  442             zclSampleLight_LcdDisplayUpdate();
//  443 #ifdef ZCL_EZMODE
//  444             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  445 #endif // ZCL_EZMODE
//  446           }
//  447           break;
//  448 
//  449         default:
//  450           break;
//  451       }
//  452 
//  453       // Release the memory
//  454       osal_msg_deallocate( (uint8 *)MSGpkt );
//  455     }
//  456 
//  457     // return unprocessed events
//  458     return (events ^ SYS_EVENT_MSG);
//  459   }
//  460 
//  461   if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
//  462   {
//  463     if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_event_loop_2
//  464       zclSampleLight_IdentifyTime--;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  465     zclSampleLight_ProcessIdentifyTimeChange();
??zclSampleLight_event_loop_2:
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  466 
//  467     return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
//  468   }
??zclSampleLight_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_5:
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x2
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
??zclSampleLight_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??zclSampleLight_event_loop_7 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleLight_event_loop_8
        ADD     A,#0x74
        JZ      ??zclSampleLight_event_loop_9
        ADD     A,#-0x11
        JZ      ??zclSampleLight_event_loop_4
        ADD     A,#-0x2
        JNZ     ??zclSampleLight_event_loop_6
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_event_loop_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??zclSampleLight_event_loop_10:
        JNZ     ??zclSampleLight_event_loop_6
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V2,R2
        MOV     ?V3,R3
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R1,#0x5
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
??zclSampleLight_event_loop_11:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_8:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleLight_event_loop_12
        ADD     A,#-0x3
        JNZ     ??zclSampleLight_event_loop_13
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleLight_event_loop_13
        INC     R0
        SJMP    ??CrossCallReturnLabel_2
??zclSampleLight_event_loop_12:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        SJMP    ??zclSampleLight_event_loop_14
??zclSampleLight_event_loop_15:
        INC     R0
??zclSampleLight_event_loop_14:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleLight_event_loop_15
??zclSampleLight_event_loop_13:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        SJMP    ??zclSampleLight_event_loop_11
??zclSampleLight_event_loop_9:
        ; Setup parameters for call to function zclSampleLight_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
        LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
??zclSampleLight_event_loop_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??zclSampleLight_event_loop_16
//  469 
//  470   if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
??zclSampleLight_event_loop_1:
        ANL     A,#0x10
        JZ      ??zclSampleLight_event_loop_17
//  471   {
//  472     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  473     zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  474 
//  475     return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??zclSampleLight_event_loop_3
//  476   }
//  477 
//  478 #ifdef ZCL_EZMODE
//  479 #if (defined HAL_BOARD_ZLIGHT)
//  480   // event to start EZMode on startup with a delay
//  481   if ( events & SAMPLELIGHT_START_EZMODE_EVT )
//  482   {
//  483     // Invoke EZ-Mode
//  484     zclEZMode_InvokeData_t ezModeData;
//  485 
//  486     // Invoke EZ-Mode
//  487     ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  488     if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  489          (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  490          (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  491     {
//  492       ezModeData.onNetwork = TRUE;      // node is already on the network
//  493     }
//  494     else
//  495     {
//  496       ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  497     }
//  498     ezModeData.initiator = FALSE;          // OnOffLight is a target
//  499     ezModeData.numActiveOutClusters = 0;
//  500     ezModeData.pActiveOutClusterIDs = NULL;
//  501     ezModeData.numActiveInClusters = 0;
//  502     ezModeData.pActiveOutClusterIDs = NULL;
//  503     zcl_InvokeEZMode( &ezModeData );
//  504 
//  505     return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
//  506   }
//  507 #endif // #if (defined HAL_BOARD_ZLIGHT)
//  508 
//  509   // going on to next state
//  510   if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
??zclSampleLight_event_loop_17:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zclSampleLight_event_loop_18
//  511   {
//  512     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  513     return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
        MOV     A,R6
        XRL     A,#0x8
        SJMP    ??zclSampleLight_event_loop_3
//  514   }
//  515 
//  516   // the overall EZMode timer expired, so we timed out
//  517   if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
??zclSampleLight_event_loop_18:
        MOV     A,R6
        ANL     A,#0x4
        MOV     R2,#0x0
        MOV     R3,#0x0
        JZ      ??zclSampleLight_event_loop_19
//  518   {
//  519     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R1,#0x63
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  520     return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x4
??zclSampleLight_event_loop_3:
        MOV     R2,A
        MOV     A,R7
??zclSampleLight_event_loop_16:
        MOV     R3,A
//  521   }
//  522 #endif // ZLC_EZMODE
//  523 
//  524 #ifdef ZCL_LEVEL_CTRL
//  525   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  526   {
//  527     zclSampleLight_AdjustLightLevel();
//  528     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  529   }
//  530 #endif
//  531 
//  532   // Discard unknown events
//  533   return 0;
??zclSampleLight_event_loop_19:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  534 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond4) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond4) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond4) CFA_SP SP+-7
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPTR,#zclSampleLight_IdentifyTime
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zclSampleLight_OnOffCB
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclSampleLight_event_loop
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-7
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclSampleLight_event_loop
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
//  535 
//  536 /*********************************************************************
//  537  * @fn      zclSampleLight_HandleKeys
//  538  *
//  539  * @brief   Handles all key events for this device.
//  540  *
//  541  * @param   shift - true if in shift/alt.
//  542  * @param   keys - bit field for key events. Valid entries:
//  543  *                 HAL_KEY_SW_5
//  544  *                 HAL_KEY_SW_4
//  545  *                 HAL_KEY_SW_2
//  546  *                 HAL_KEY_SW_1
//  547  *
//  548  * @return  none
//  549  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  550 static void zclSampleLight_HandleKeys( byte shift, byte keys )
zclSampleLight_HandleKeys:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function zclSampleLight_HandleKeys
        CODE
//  551 {
        FUNCALL zclSampleLight_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  552   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclSampleLight_HandleKeys_0
//  553   {
//  554     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  555 
//  556     // toggle local light immediately
//  557     zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_1
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_2
??zclSampleLight_HandleKeys_1:
        MOV     A,#0x1
??zclSampleLight_HandleKeys_2:
        MOVX    @DPTR,A
//  558 #ifdef ZCL_LEVEL_CTRL
//  559     zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  560 #endif
//  561   }
//  562 
//  563   if ( keys & HAL_KEY_SW_2 )
??zclSampleLight_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclSampleLight_HandleKeys_3
//  564   {
//  565 #if (defined HAL_BOARD_ZLIGHT)
//  566 
//  567     zclSampleLight_BasicResetCB();
//  568 
//  569 #else
//  570 
//  571     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  572 
//  573 #ifdef ZCL_EZMODE
//  574     {
//  575       // Invoke EZ-Mode
//  576       zclEZMode_InvokeData_t ezModeData;
//  577 
//  578       // Invoke EZ-Mode
//  579       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x8
        MOVX    @DPTR,A
//  580       if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  581           (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  582             (zclSampleLight_NwkState == DEV_END_DEVICE) )
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleLight_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_HandleKeys_5
//  583       {
//  584         ezModeData.onNetwork = TRUE;      // node is already on the network
??zclSampleLight_HandleKeys_4:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zclSampleLight_HandleKeys_6
//  585       }
//  586       else
//  587       {
//  588         ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zclSampleLight_HandleKeys_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zclSampleLight_HandleKeys_6:
        MOVX    @DPTR,A
//  589       }
//  590       ezModeData.initiator = FALSE;          // OnOffLight is a target
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  591       ezModeData.numActiveOutClusters = 0;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  592       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  593       ezModeData.numActiveInClusters = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  594       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  595       zcl_InvokeEZMode( &ezModeData );
        ; Setup parameters for call to function zcl_InvokeEZMode
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  596     }
//  597 
//  598 #else // NOT EZ-Mode
//  599     {
//  600       zAddrType_t dstAddr;
//  601       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  602 
//  603       // Initiate an End Device Bind Request, this bind request will
//  604       // only use a cluster list that is important to binding.
//  605       dstAddr.addrMode = afAddr16Bit;
//  606       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  607       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  608                            SAMPLELIGHT_ENDPOINT,
//  609                            ZCL_HA_PROFILE_ID,
//  610                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  611                            0, NULL,   // No Outgoing clusters to bind
//  612                            TRUE );
//  613     }
//  614 #endif // ZCL_EZMODE
//  615 #endif // HAL_BOARD_ZLIGHT
//  616   }
//  617 
//  618   if ( keys & HAL_KEY_SW_3 )
??zclSampleLight_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclSampleLight_HandleKeys_7
//  619   {
//  620     NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
//  621                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  622   }
//  623 
//  624   if ( keys & HAL_KEY_SW_4 )
??zclSampleLight_HandleKeys_7:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zclSampleLight_HandleKeys_8
//  625   {
//  626     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  627 
//  628     if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
//  629           ( zclSampleLight_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleLight_HandleKeys_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleLight_HandleKeys_8
//  630     {
//  631       zAddrType_t tmpAddr;
//  632 
//  633       tmpAddr.addrMode = Addr16Bit;
??zclSampleLight_HandleKeys_9:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  634       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  635 
//  636       // toggle permit join
//  637       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_10
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_11
??zclSampleLight_HandleKeys_10:
        MOV     A,#-0x1
??zclSampleLight_HandleKeys_11:
        MOVX    @DPTR,A
//  638 
//  639       // Trust Center significance is always true
//  640       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  641     }
//  642   }
//  643 
//  644   // Shift F5 does a Basic Reset (factory defaults)
//  645   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zclSampleLight_HandleKeys_8:
        MOV     A,R6
        JZ      ??zclSampleLight_HandleKeys_12
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleLight_HandleKeys_13
//  646   {
//  647     zclSampleLight_BasicResetCB();
        ; Setup parameters for call to function zclSampleLight_BasicResetCB
        LCALL   `??zclSampleLight_BasicResetCB::?relay`; Banked call to: zclSampleLight_BasicResetCB
        SJMP    ??zclSampleLight_HandleKeys_13
//  648   }
//  649   else if ( keys & HAL_KEY_SW_5 )
??zclSampleLight_HandleKeys_12:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleLight_HandleKeys_13
//  650   {
//  651     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_14
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_15
??zclSampleLight_HandleKeys_14:
        MOV     A,#0x1
??zclSampleLight_HandleKeys_15:
        MOVX    @DPTR,A
//  652   }
//  653 
//  654   // update the display, including the light
//  655   zclSampleLight_LcdDisplayUpdate();
??zclSampleLight_HandleKeys_13:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  656 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock14
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15
//  657 
//  658 /*********************************************************************
//  659  * @fn      zclSampleLight_LcdDisplayUpdate
//  660  *
//  661  * @brief   Called to update the LCD display.
//  662  *
//  663  * @param   none
//  664  *
//  665  * @return  none
//  666  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  667 void zclSampleLight_LcdDisplayUpdate( void )
zclSampleLight_LcdDisplayUpdate:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
        CODE
//  668 {
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  669 #ifdef LCD_SUPPORTED
//  670   if ( giLightScreenMode == LIGHT_HELPMODE )
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_LcdDisplayUpdate_0
//  671   {
//  672     zclSampleLight_LcdDisplayHelpMode();
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#sSwLight & 0xff
        MOV     R3,#(sSwLight >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#sSwEZMode & 0xff
        MOV     R3,#(sSwEZMode >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        SJMP    ??zclSampleLight_LcdDisplayUpdate_1
//  673   }
//  674   else
//  675   {
//  676     zclSampleLight_LcdDisplayMainMode();
??zclSampleLight_LcdDisplayUpdate_0:
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??zclSampleLight_LcdDisplayUpdate_2
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x0
        SJMP    ??zclSampleLight_LcdDisplayUpdate_3
??zclSampleLight_LcdDisplayUpdate_2:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleLight_LcdDisplayUpdate_4
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x1
        SJMP    ??zclSampleLight_LcdDisplayUpdate_3
??zclSampleLight_LcdDisplayUpdate_4:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_LcdDisplayUpdate_5
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x2
??zclSampleLight_LcdDisplayUpdate_3:
        LCALL   `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
??zclSampleLight_LcdDisplayUpdate_5:
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        MOV     DPTR,#sSwHelp + 15
        JZ      ??zclSampleLight_LcdDisplayUpdate_6
        MOV     A,#0x2a
        SJMP    ??zclSampleLight_LcdDisplayUpdate_7
??zclSampleLight_LcdDisplayUpdate_6:
        MOV     A,#0x20
??zclSampleLight_LcdDisplayUpdate_7:
        MOVX    @DPTR,A
??zclSampleLight_LcdDisplayUpdate_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sSwHelp & 0xff
        MOV     R3,#(sSwHelp >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  677   }
//  678 #endif
//  679 
//  680   zclSampleLight_DisplayLight();
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_LcdDisplayUpdate_8
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_LcdDisplayUpdate_9
??zclSampleLight_LcdDisplayUpdate_8:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_LcdDisplayUpdate_9:
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_LcdDisplayUpdate_10
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        MOV     R1,#0x2
        JZ      ??zclSampleLight_LcdDisplayUpdate_11
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#sLightOn & 0xff
        MOV     R3,#(sLightOn >> 8) & 0xff
        SJMP    ??zclSampleLight_LcdDisplayUpdate_12
??zclSampleLight_LcdDisplayUpdate_11:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#sLightOff & 0xff
        MOV     R3,#(sLightOff >> 8) & 0xff
??zclSampleLight_LcdDisplayUpdate_12:
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  681 }
??zclSampleLight_LcdDisplayUpdate_10:
        SJMP    ??Subroutine7_0
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 5)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock17
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock18
//  682 
//  683 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  684 /*********************************************************************
//  685  * @fn      zclSampleLight_UpdateLampLevel
//  686  *
//  687  * @brief   Update lamp level output with gamma compensation
//  688  *
//  689  * @param   level
//  690  *
//  691  * @return  none
//  692  */
//  693 void zclSampleLight_UpdateLampLevel( uint8 level )
//  694 
//  695 {
//  696   uint16 gammaCorrectedLevel;
//  697 
//  698   // gamma correct the level
//  699   gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
//  700 
//  701   halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
//  702 }
//  703 #endif
//  704 
//  705 /*********************************************************************
//  706  * @fn      zclSampleLight_DisplayLight
//  707  *
//  708  * @brief   Displays current state of light on LED and also on main display if supported.
//  709  *
//  710  * @param   none
//  711  *
//  712  * @return  none
//  713  */
//  714 static void zclSampleLight_DisplayLight( void )
//  715 {
//  716   // set the LED1 based on light (on or off)
//  717   if ( zclSampleLight_OnOff == LIGHT_ON )
//  718   {
//  719     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  720   }
//  721   else
//  722   {
//  723     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  724   }
//  725 
//  726 #ifdef LCD_SUPPORTED
//  727   if (giLightScreenMode == LIGHT_MAINMODE)
//  728   {
//  729 #ifdef ZCL_LEVEL_CTRL
//  730     // display current light level
//  731     if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  732          ( zclSampleLight_OnOff == LIGHT_OFF ) )
//  733     {
//  734       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  735     }
//  736     else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  737               ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
//  738                ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  739                  ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
//  740     {
//  741       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  742     }
//  743     else    // "    LEVEL ###"
//  744     {
//  745       zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
//  746       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  747     }
//  748 #else
//  749     if ( zclSampleLight_OnOff )
//  750     {
//  751       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  752     }
//  753     else
//  754     {
//  755       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  756     }
//  757 #endif // ZCL_LEVEL_CTRL
//  758   }
//  759 #endif // LCD_SUPPORTED
//  760 }
//  761 
//  762 #ifdef LCD_SUPPORTED
//  763 /*********************************************************************
//  764  * @fn      zclSampleLight_LcdDisplayMainMode
//  765  *
//  766  * @brief   Called to display the main screen on the LCD.
//  767  *
//  768  * @param   none
//  769  *
//  770  * @return  none
//  771  */
//  772 static void zclSampleLight_LcdDisplayMainMode( void )
//  773 {
//  774   // display line 1 to indicate NWK status
//  775   if ( zclSampleLight_NwkState == DEV_ZB_COORD )
//  776   {
//  777     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
//  778   }
//  779   else if ( zclSampleLight_NwkState == DEV_ROUTER )
//  780   {
//  781     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
//  782   }
//  783   else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
//  784   {
//  785     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
//  786   }
//  787 
//  788   // end of line 3 displays permit join status (*)
//  789   if ( gPermitDuration )
//  790   {
//  791     sSwHelp[15] = '*';
//  792   }
//  793   else
//  794   {
//  795     sSwHelp[15] = ' ';
//  796   }
//  797   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  798 }
//  799 
//  800 /*********************************************************************
//  801  * @fn      zclSampleLight_LcdDisplayHelpMode
//  802  *
//  803  * @brief   Called to display the SW options on the LCD.
//  804  *
//  805  * @param   none
//  806  *
//  807  * @return  none
//  808  */
//  809 static void zclSampleLight_LcdDisplayHelpMode( void )
//  810 {
//  811   HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
//  812   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
//  813   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  814 }
//  815 #endif  // LCD_SUPPORTED
//  816 
//  817 /*********************************************************************
//  818  * @fn      zclSampleLight_ProcessIdentifyTimeChange
//  819  *
//  820  * @brief   Called to process any change to the IdentifyTime attribute.
//  821  *
//  822  * @param   none
//  823  *
//  824  * @return  none
//  825  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  826 static void zclSampleLight_ProcessIdentifyTimeChange( void )
zclSampleLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
        CODE
//  827 {
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  828   if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
//  829   {
//  830     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  831     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
//  832   }
//  833   else
//  834   {
//  835 #ifdef ZCL_EZMODE
//  836     if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
??zclSampleLight_ProcessIdentifyTimeChange_0:
        MOV     DPTR,#zclSampleLight_IdentifyCommissionState
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclSampleLight_ProcessIdentifyTimeChange_2
//  837     {
//  838       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_3
//  839     }
//  840     else
//  841     {
//  842       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
??zclSampleLight_ProcessIdentifyTimeChange_2:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_ProcessIdentifyTimeChange_3:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  843     }
//  844 #endif
//  845 
//  846     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  847   }
//  848 }
??zclSampleLight_ProcessIdentifyTimeChange_1:
        SJMP    ??Subroutine7_0
          CFI EndBlock cfiBlock19
//  849 
//  850 /*********************************************************************
//  851  * @fn      zclSampleLight_BasicResetCB
//  852  *
//  853  * @brief   Callback from the ZCL General Cluster Library
//  854  *          to set all the Basic Cluster attributes to default values.
//  855  *
//  856  * @param   none
//  857  *
//  858  * @return  none
//  859  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  860 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  861 {
        FUNCALL zclSampleLight_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  862   NLME_LeaveReq_t leaveReq;
//  863   // Set every field to 0
//  864   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  865 
//  866   // This will enable the device to rejoin the network after reset.
//  867   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  868 
//  869   // Set the NV startup option to force a "new" join.
//  870   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  871 
//  872   // Leave the network, and reset afterwards
//  873   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zclSampleLight_BasicResetCB_0
//  874   {
//  875     // Couldn't send out leave; prepare to reset anyway
//  876     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  877   }
//  878 }
??zclSampleLight_BasicResetCB_0:
        MOV     A,#0x5
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock20
//  879 
//  880 /*********************************************************************
//  881  * @fn      zclSampleLight_IdentifyCB
//  882  *
//  883  * @brief   Callback from the ZCL General Cluster Library when
//  884  *          it received an Identity Command for this application.
//  885  *
//  886  * @param   srcAddr - source address and endpoint of the response message
//  887  * @param   identifyTime - the number of seconds to identify yourself
//  888  *
//  889  * @return  none
//  890  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  891 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
zclSampleLight_IdentifyCB:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
        CODE
//  892 {
        FUNCALL zclSampleLight_IdentifyCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  893   zclSampleLight_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  894   zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  895 }
        LJMP    ??Subroutine7_0 & 0xFFFF
          CFI EndBlock cfiBlock21
//  896 
//  897 /*********************************************************************
//  898  * @fn      zclSampleLight_IdentifyQueryRspCB
//  899  *
//  900  * @brief   Callback from the ZCL General Cluster Library when
//  901  *          it received an Identity Query Response Command for this application.
//  902  *
//  903  * @param   srcAddr - requestor's address
//  904  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  905  *
//  906  * @return  none
//  907  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  908 static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleLight_IdentifyQueryRspCB:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyQueryRspCB
        CODE
//  909 {
        FUNCALL zclSampleLight_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  910   (void)pRsp;
//  911 #ifdef ZCL_EZMODE
//  912   {
//  913     zclEZMode_ActionData_t data;
//  914     data.pIdentifyQueryRsp = pRsp;
        LCALL   ?Subroutine3 & 0xFFFF
//  915     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
//  916   }
??CrossCallReturnLabel_0:
        MOV     R1,#0x4
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  917 #endif
//  918 }
        MOV     A,#0x2
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zclSampleLight_IdentifyQueryRspCB
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond24) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond24) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond24) CFA_SP SP+-7
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_EZModeAction
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
//  919 
//  920 /*********************************************************************
//  921  * @fn      zclSampleLight_OnOffCB
//  922  *
//  923  * @brief   Callback from the ZCL General Cluster Library when
//  924  *          it received an On/Off Command for this application.
//  925  *
//  926  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  927  *
//  928  * @return  none
//  929  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  930 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  931 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  932   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  933 
//  934   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     DPTR,#zclSampleLight_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  935 
//  936 
//  937   // Turn on the light
//  938   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zclSampleLight_OnOffCB_0
//  939   {
//  940     zclSampleLight_OnOff = LIGHT_ON;
//  941   }
//  942   // Turn off the light
//  943   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclSampleLight_OnOffCB_1
//  944   {
//  945     zclSampleLight_OnOff = LIGHT_OFF;
//  946   }
//  947   // Toggle the light
//  948   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_2
//  949   {
//  950     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_OnOffCB_1
//  951     {
//  952       zclSampleLight_OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_0:
        MOV     DPTR,#zclSampleLight_OnOff
        MOV     A,#0x1
        SJMP    ??zclSampleLight_OnOffCB_3
//  953     }
//  954     else
//  955     {
//  956       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_1:
        MOV     DPTR,#zclSampleLight_OnOff
        CLR     A
??zclSampleLight_OnOffCB_3:
        MOVX    @DPTR,A
//  957     }
//  958   }
//  959 
//  960 #if ZCL_LEVEL_CTRL
//  961   zclSampleLight_DefaultMove( );
//  962 #endif
//  963 
//  964   // update the display
//  965   zclSampleLight_LcdDisplayUpdate( );
??zclSampleLight_OnOffCB_2:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  966 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock26
//  967 
//  968 #ifdef ZCL_LEVEL_CTRL
//  969 /*********************************************************************
//  970  * @fn      zclSampleLight_TimeRateHelper
//  971  *
//  972  * @brief   Calculate time based on rate, and startup level state machine
//  973  *
//  974  * @param   newLevel - new level for current level
//  975  *
//  976  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  977  */
//  978 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
//  979 {
//  980   uint32 diff;
//  981   uint32 newLevel32;
//  982 
//  983   // remember current and new level
//  984   zclSampleLight_NewLevel = newLevel;
//  985   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
//  986 
//  987   // calculate diff
//  988   newLevel32 = (uint32)1000 * newLevel;
//  989   if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  990   {
//  991     diff = zclSampleLight_CurrentLevel32 - newLevel32;
//  992     zclSampleLight_NewLevelUp = FALSE;  // moving down
//  993   }
//  994   else
//  995   {
//  996     diff = newLevel32 - zclSampleLight_CurrentLevel32;
//  997     zclSampleLight_NewLevelUp = TRUE;   // moving up
//  998   }
//  999 
// 1000   return ( diff );
// 1001 }
// 1002 
// 1003 /*********************************************************************
// 1004  * @fn      zclSampleLight_MoveBasedOnRate
// 1005  *
// 1006  * @brief   Calculate time based on rate, and startup level state machine
// 1007  *
// 1008  * @param   newLevel - new level for current level
// 1009  * @param   rate16   - fixed point rate (e.g. 16.123)
// 1010  *
// 1011  * @return  none
// 1012  */
// 1013 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
// 1014 {
// 1015   uint32 diff;
// 1016 
// 1017   // determine how much time (in 10ths of seconds) based on the difference and rate
// 1018   zclSampleLight_Rate32 = rate;
// 1019   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1020   zclSampleLight_LevelRemainingTime = diff / rate;
// 1021   if ( !zclSampleLight_LevelRemainingTime )
// 1022   {
// 1023     zclSampleLight_LevelRemainingTime = 1;
// 1024   }
// 1025 
// 1026   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1027 }
// 1028 
// 1029 /*********************************************************************
// 1030  * @fn      zclSampleLight_MoveBasedOnTime
// 1031  *
// 1032  * @brief   Calculate rate based on time, and startup level state machine
// 1033  *
// 1034  * @param   newLevel  - new level for current level
// 1035  * @param   time      - in 10ths of seconds
// 1036  *
// 1037  * @return  none
// 1038  */
// 1039 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
// 1040 {
// 1041   uint16 diff;
// 1042 
// 1043   // determine rate (in units) based on difference and time
// 1044   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1045   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
// 1046   zclSampleLight_Rate32 = diff / time;
// 1047 
// 1048   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1049 }
// 1050 
// 1051 /*********************************************************************
// 1052  * @fn      zclSampleLight_GetTime
// 1053  *
// 1054  * @brief   Determine amount of time that MoveXXX will take to complete.
// 1055  *
// 1056  * @param   level = new level to move to
// 1057  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
// 1058  *
// 1059  * @return  none
// 1060  */
// 1061 static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
// 1062 {
// 1063   // there is a hiearchy of the amount of time to use for transistioning
// 1064   // check each one in turn. If none of defaults are set, then use fastest
// 1065   // time possible.
// 1066   if ( time == 0xFFFF )
// 1067   {
// 1068     // use On or Off Transition Time if set (not 0xffff)
// 1069     if ( zclSampleLight_OnOff == LIGHT_ON )
// 1070     {
// 1071       time = zclSampleLight_LevelOffTransitionTime;
// 1072     }
// 1073     else
// 1074     {
// 1075       time = zclSampleLight_LevelOnTransitionTime;
// 1076     }
// 1077 
// 1078     // else use OnOffTransitionTime if set (not 0xffff)
// 1079     if ( time == 0xFFFF )
// 1080     {
// 1081       time = zclSampleLight_LevelOnOffTransitionTime;
// 1082     }
// 1083 
// 1084     // else as fast as possible
// 1085     if ( time == 0xFFFF )
// 1086     {
// 1087       time = 1;
// 1088     }
// 1089   }
// 1090 
// 1091   if ( !time )
// 1092   {
// 1093     time = 1; // as fast as possible
// 1094   }
// 1095 
// 1096   return ( time );
// 1097 }
// 1098 
// 1099 /*********************************************************************
// 1100  * @fn      zclSampleLight_DefaultMove
// 1101  *
// 1102  * @brief   We were turned on/off. Use default time to move to on or off.
// 1103  *
// 1104  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
// 1105  *
// 1106  * @return  none
// 1107  */
// 1108 static void zclSampleLight_DefaultMove( void )
// 1109 {
// 1110   uint8  newLevel;
// 1111   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
// 1112   uint16 time;
// 1113 
// 1114   // if moving to on position, move to on level
// 1115   if ( zclSampleLight_OnOff )
// 1116   {
// 1117     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1118     {
// 1119       // The last Level (before going OFF) should be used)
// 1120       newLevel = zclSampleLight_LevelLastLevel;
// 1121     }
// 1122     else
// 1123     {
// 1124       newLevel = zclSampleLight_LevelOnLevel;
// 1125     }
// 1126 
// 1127     time = zclSampleLight_LevelOnTransitionTime;
// 1128   }
// 1129   else
// 1130   {
// 1131     newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1132 
// 1133     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1134     {
// 1135       // Save the current Level before going OFF to use it when the light turns ON
// 1136       // it should be back to this level
// 1137       zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
// 1138     }
// 1139 
// 1140     time = zclSampleLight_LevelOffTransitionTime;
// 1141   }
// 1142 
// 1143   // else use OnOffTransitionTime if set (not 0xffff)
// 1144   if ( time == 0xFFFF )
// 1145   {
// 1146     time = zclSampleLight_LevelOnOffTransitionTime;
// 1147   }
// 1148 
// 1149   // else as fast as possible
// 1150   if ( time == 0xFFFF )
// 1151   {
// 1152     time = 1;
// 1153   }
// 1154 
// 1155   // calculate rate based on time (int 10ths) for full transition (1-254)
// 1156   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
// 1157 
// 1158   // start up state machine.
// 1159   zclSampleLight_WithOnOff = TRUE;
// 1160   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1161 }
// 1162 
// 1163 /*********************************************************************
// 1164  * @fn      zclSampleLight_AdjustLightLevel
// 1165  *
// 1166  * @brief   Called each 10th of a second while state machine running
// 1167  *
// 1168  * @param   none
// 1169  *
// 1170  * @return  none
// 1171  */
// 1172 static void zclSampleLight_AdjustLightLevel( void )
// 1173 {
// 1174   // one tick (10th of a second) less
// 1175   if ( zclSampleLight_LevelRemainingTime )
// 1176   {
// 1177     --zclSampleLight_LevelRemainingTime;
// 1178   }
// 1179 
// 1180   // no time left, done
// 1181   if ( zclSampleLight_LevelRemainingTime == 0)
// 1182   {
// 1183     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
// 1184   }
// 1185 
// 1186   // still time left, keep increment/decrementing
// 1187   else
// 1188   {
// 1189     if ( zclSampleLight_NewLevelUp )
// 1190     {
// 1191       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
// 1192     }
// 1193     else
// 1194     {
// 1195       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
// 1196     }
// 1197     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
// 1198   }
// 1199 
// 1200 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1201   zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
// 1202 #endif
// 1203 
// 1204   // also affect on/off
// 1205   if ( zclSampleLight_WithOnOff )
// 1206   {
// 1207     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
// 1208     {
// 1209       zclSampleLight_OnOff = LIGHT_ON;
// 1210 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1211       ENABLE_LAMP;
// 1212 #endif
// 1213     }
// 1214     else
// 1215     {
// 1216       zclSampleLight_OnOff = LIGHT_OFF;
// 1217 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1218       DISABLE_LAMP;
// 1219 #endif
// 1220     }
// 1221   }
// 1222 
// 1223   // display light level as we go
// 1224   zclSampleLight_DisplayLight( );
// 1225 
// 1226   // keep ticking away
// 1227   if ( zclSampleLight_LevelRemainingTime )
// 1228   {
// 1229     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1230   }
// 1231 }
// 1232 
// 1233 /*********************************************************************
// 1234  * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1235  *
// 1236  * @brief   Callback from the ZCL General Cluster Library when
// 1237  *          it received a LevelControlMoveToLevel Command for this application.
// 1238  *
// 1239  * @param   pCmd - ZigBee command parameters
// 1240  *
// 1241  * @return  none
// 1242  */
// 1243 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
// 1244 {
// 1245   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1246   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
// 1247 }
// 1248 
// 1249 /*********************************************************************
// 1250  * @fn      zclSampleLight_LevelControlMoveCB
// 1251  *
// 1252  * @brief   Callback from the ZCL General Cluster Library when
// 1253  *          it received a LevelControlMove Command for this application.
// 1254  *
// 1255  * @param   pCmd - ZigBee command parameters
// 1256  *
// 1257  * @return  none
// 1258  */
// 1259 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
// 1260 {
// 1261   uint8 newLevel;
// 1262   uint32 rate;
// 1263 
// 1264   // convert rate from units per second to units per tick (10ths of seconds)
// 1265   // and move at that right up or down
// 1266   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1267 
// 1268   if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1269   {
// 1270     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1271   }
// 1272   else
// 1273   {
// 1274     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1275   }
// 1276 
// 1277   rate = (uint32)100 * pCmd->rate;
// 1278   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1279 }
// 1280 
// 1281 /*********************************************************************
// 1282  * @fn      zclSampleLight_LevelControlStepCB
// 1283  *
// 1284  * @brief   Callback from the ZCL General Cluster Library when
// 1285  *          it received an On/Off Command for this application.
// 1286  *
// 1287  * @param   pCmd - ZigBee command parameters
// 1288  *
// 1289  * @return  none
// 1290  */
// 1291 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1292 {
// 1293   uint8 newLevel;
// 1294 
// 1295   // determine new level, but don't exceed boundaries
// 1296   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1297   {
// 1298     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1299     {
// 1300       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1301     }
// 1302     else
// 1303     {
// 1304       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1305     }
// 1306   }
// 1307   else
// 1308   {
// 1309     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1310     {
// 1311       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1312     }
// 1313     else
// 1314     {
// 1315       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1316     }
// 1317   }
// 1318 
// 1319   // move to the new level
// 1320   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1321   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1322 }
// 1323 
// 1324 /*********************************************************************
// 1325  * @fn      zclSampleLight_LevelControlStopCB
// 1326  *
// 1327  * @brief   Callback from the ZCL General Cluster Library when
// 1328  *          it received an Level Control Stop Command for this application.
// 1329  *
// 1330  * @param   pCmd - ZigBee command parameters
// 1331  *
// 1332  * @return  none
// 1333  */
// 1334 static void zclSampleLight_LevelControlStopCB( void )
// 1335 {
// 1336   // stop immediately
// 1337   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1338   zclSampleLight_LevelRemainingTime = 0;
// 1339 }
// 1340 #endif
// 1341 
// 1342 /******************************************************************************
// 1343  *
// 1344  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1345  *
// 1346  *****************************************************************************/
// 1347 
// 1348 /*********************************************************************
// 1349  * @fn      zclSampleLight_ProcessIncomingMsg
// 1350  *
// 1351  * @brief   Process ZCL Foundation incoming message
// 1352  *
// 1353  * @param   pInMsg - pointer to the received message
// 1354  *
// 1355  * @return  none
// 1356  */
// 1357 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1358 {
// 1359   switch ( pInMsg->zclHdr.commandID )
// 1360   {
// 1361 #ifdef ZCL_READ
// 1362     case ZCL_CMD_READ_RSP:
// 1363       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1364       break;
// 1365 #endif
// 1366 #ifdef ZCL_WRITE
// 1367     case ZCL_CMD_WRITE_RSP:
// 1368       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1369       break;
// 1370 #endif
// 1371 #ifdef ZCL_REPORT
// 1372     // Attribute Reporting implementation should be added here
// 1373     case ZCL_CMD_CONFIG_REPORT:
// 1374       // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
// 1375       break;
// 1376 
// 1377     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1378       // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
// 1379       break;
// 1380 
// 1381     case ZCL_CMD_READ_REPORT_CFG:
// 1382       // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
// 1383       break;
// 1384 
// 1385     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1386       // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
// 1387       break;
// 1388 
// 1389     case ZCL_CMD_REPORT:
// 1390       // zclSampleLight_ProcessInReportCmd( pInMsg );
// 1391       break;
// 1392 #endif
// 1393     case ZCL_CMD_DEFAULT_RSP:
// 1394       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1395       break;
// 1396 #ifdef ZCL_DISCOVER
// 1397     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1398       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1399       break;
// 1400 
// 1401     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1402       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1403       break;
// 1404 
// 1405     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1406       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1407       break;
// 1408 
// 1409     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1410       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1411       break;
// 1412 #endif
// 1413     default:
// 1414       break;
// 1415   }
// 1416 
// 1417   if ( pInMsg->attrCmd )
// 1418     osal_mem_free( pInMsg->attrCmd );
// 1419 }
// 1420 
// 1421 #ifdef ZCL_READ
// 1422 /*********************************************************************
// 1423  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1424  *
// 1425  * @brief   Process the "Profile" Read Response Command
// 1426  *
// 1427  * @param   pInMsg - incoming message to process
// 1428  *
// 1429  * @return  none
// 1430  */
// 1431 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1432 {
// 1433   zclReadRspCmd_t *readRspCmd;
// 1434   uint8 i;
// 1435 
// 1436   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1437   for (i = 0; i < readRspCmd->numAttr; i++)
// 1438   {
// 1439     // Notify the originator of the results of the original read attributes
// 1440     // attempt and, for each successfull request, the value of the requested
// 1441     // attribute
// 1442   }
// 1443 
// 1444   return ( TRUE );
// 1445 }
// 1446 #endif // ZCL_READ
// 1447 
// 1448 #ifdef ZCL_WRITE
// 1449 /*********************************************************************
// 1450  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1451  *
// 1452  * @brief   Process the "Profile" Write Response Command
// 1453  *
// 1454  * @param   pInMsg - incoming message to process
// 1455  *
// 1456  * @return  none
// 1457  */
// 1458 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1459 {
// 1460   zclWriteRspCmd_t *writeRspCmd;
// 1461   uint8 i;
// 1462 
// 1463   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1464   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1465   {
// 1466     // Notify the device of the results of the its original write attributes
// 1467     // command.
// 1468   }
// 1469 
// 1470   return ( TRUE );
// 1471 }
// 1472 #endif // ZCL_WRITE
// 1473 
// 1474 /*********************************************************************
// 1475  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1476  *
// 1477  * @brief   Process the "Profile" Default Response Command
// 1478  *
// 1479  * @param   pInMsg - incoming message to process
// 1480  *
// 1481  * @return  none
// 1482  */
// 1483 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1484 {
// 1485   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1486 
// 1487   // Device is notified of the Default Response command.
// 1488   (void)pInMsg;
// 1489 
// 1490   return ( TRUE );
// 1491 }
// 1492 
// 1493 #ifdef ZCL_DISCOVER
// 1494 /*********************************************************************
// 1495  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1496  *
// 1497  * @brief   Process the Discover Commands Response Command
// 1498  *
// 1499  * @param   pInMsg - incoming message to process
// 1500  *
// 1501  * @return  none
// 1502  */
// 1503 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1504 {
// 1505   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1506   uint8 i;
// 1507 
// 1508   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1509   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1510   {
// 1511     // Device is notified of the result of its attribute discovery command.
// 1512   }
// 1513 
// 1514   return ( TRUE );
// 1515 }
// 1516 
// 1517 /*********************************************************************
// 1518  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1519  *
// 1520  * @brief   Process the "Profile" Discover Attributes Response Command
// 1521  *
// 1522  * @param   pInMsg - incoming message to process
// 1523  *
// 1524  * @return  none
// 1525  */
// 1526 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1527 {
// 1528   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1529   uint8 i;
// 1530 
// 1531   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1532   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1533   {
// 1534     // Device is notified of the result of its attribute discovery command.
// 1535   }
// 1536 
// 1537   return ( TRUE );
// 1538 }
// 1539 
// 1540 /*********************************************************************
// 1541  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1542  *
// 1543  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1544  *
// 1545  * @param   pInMsg - incoming message to process
// 1546  *
// 1547  * @return  none
// 1548  */
// 1549 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1550 {
// 1551   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1552   uint8 i;
// 1553 
// 1554   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1555   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1556   {
// 1557     // Device is notified of the result of its attribute discovery command.
// 1558   }
// 1559 
// 1560   return ( TRUE );
// 1561 }
// 1562 #endif // ZCL_DISCOVER
// 1563 
// 1564 #if ZCL_EZMODE
// 1565 /*********************************************************************
// 1566  * @fn      zclSampleLight_ProcessZDOMsgs
// 1567  *
// 1568  * @brief   Called when this node receives a ZDO/ZDP response.
// 1569  *
// 1570  * @param   none
// 1571  *
// 1572  * @return  status
// 1573  */
// 1574 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
// 1575 {
// 1576   zclEZMode_ActionData_t data;
// 1577   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1578 
// 1579   // Let EZ-Mode know of the Simple Descriptor Response
// 1580   if ( pMsg->clusterID == Match_Desc_rsp )
// 1581   {
// 1582     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
// 1583     data.pMatchDescRsp = pMatchDescRsp;
// 1584     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
// 1585     osal_mem_free( pMatchDescRsp );
// 1586   }
// 1587 }
// 1588 
// 1589 /*********************************************************************
// 1590  * @fn      zclSampleLight_EZModeCB
// 1591  *
// 1592  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1593 *           going on during EZ-Mode steering/finding/binding.
// 1594  *
// 1595  * @param   state - an
// 1596  *
// 1597  * @return  none
// 1598  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1599 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
zclSampleLight_EZModeCB:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function zclSampleLight_EZModeCB
        CODE
// 1600 {
        FUNCALL zclSampleLight_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_EZModeCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1601 #ifdef LCD_SUPPORTED
// 1602   char *pStr;
// 1603   uint8 err;
// 1604 #endif
// 1605 
// 1606   // time to go into identify mode
// 1607   if ( state == EZMODE_STATE_IDENTIFYING )
        MOV     A,#0x4
        XRL     A,?V0
        JNZ     ??zclSampleLight_EZModeCB_0
// 1608   {
// 1609 #ifdef LCD_SUPPORTED
// 1610     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "EZMode">` & 0xff
        MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1611 #endif
// 1612 
// 1613     zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,#-0x4c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1614     zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
        LJMP    ??zclSampleLight_EZModeCB_1 & 0xFFFF
// 1615   }
// 1616 
// 1617   // autoclosing, show what happened (success, cancelled, etc...)
// 1618   if( state == EZMODE_STATE_AUTOCLOSE )
??zclSampleLight_EZModeCB_0:
        MOV     A,#0x7
        XRL     A,?V0
        JNZ     ??zclSampleLight_EZModeCB_2
// 1619   {
// 1620 #ifdef LCD_SUPPORTED
// 1621     pStr = NULL;
// 1622     err = pData->sAutoClose.err;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
// 1623     if ( err == EZMODE_ERR_SUCCESS )
        JNZ     ??zclSampleLight_EZModeCB_3
// 1624     {
// 1625       pStr = "EZMode: Success";
        MOV     R2,#`?<Constant "EZMode: Success">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
        SJMP    ??zclSampleLight_EZModeCB_4
// 1626     }
// 1627     else if ( err == EZMODE_ERR_NOMATCH )
??zclSampleLight_EZModeCB_3:
        MOV     A,#0x4
        XRL     A,R0
        JNZ     ??zclSampleLight_EZModeCB_1
// 1628     {
// 1629       pStr = "EZMode: NoMatch"; // not a match made in heaven
        MOV     R2,#`?<Constant "EZMode: NoMatch">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
// 1630     }
// 1631     if ( pStr )
??zclSampleLight_EZModeCB_4:
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleLight_EZModeCB_1
// 1632     {
// 1633       if ( giLightScreenMode == LIGHT_MAINMODE )
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_EZModeCB_1
// 1634       {
// 1635         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        SJMP    ??zclSampleLight_EZModeCB_1
// 1636       }
// 1637     }
// 1638 #endif
// 1639   }
// 1640 
// 1641   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1642   if( state == EZMODE_STATE_FINISH )
??zclSampleLight_EZModeCB_2:
        MOV     A,#0x63
        XRL     A,?V0
        JNZ     ??zclSampleLight_EZModeCB_1
// 1643   {
// 1644     // turn off identify mode
// 1645     zclSampleLight_IdentifyTime = 0;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1646     zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
// 1647 
// 1648 #ifdef LCD_SUPPORTED
// 1649     // if successful, inform user which nwkaddr/ep we bound to
// 1650     pStr = NULL;
// 1651     err = pData->sFinish.err;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
// 1652     if( err == EZMODE_ERR_SUCCESS )
        JZ      ??zclSampleLight_EZModeCB_5
// 1653     {
// 1654       // already stated on autoclose
// 1655     }
// 1656     else if ( err == EZMODE_ERR_CANCELLED )
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??zclSampleLight_EZModeCB_6
// 1657     {
// 1658       pStr = "EZMode: Cancel";
        MOV     R2,#`?<Constant "EZMode: Cancel">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
        SJMP    ??zclSampleLight_EZModeCB_7
// 1659     }
// 1660     else if ( err == EZMODE_ERR_BAD_PARAMETER )
??zclSampleLight_EZModeCB_6:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zclSampleLight_EZModeCB_8
// 1661     {
// 1662       pStr = "EZMode: BadParm";
        MOV     R2,#`?<Constant "EZMode: BadParm">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
        SJMP    ??zclSampleLight_EZModeCB_7
// 1663     }
// 1664     else if ( err == EZMODE_ERR_TIMEDOUT )
??zclSampleLight_EZModeCB_8:
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??zclSampleLight_EZModeCB_5
// 1665     {
// 1666       pStr = "EZMode: TimeOut";
        MOV     R2,#`?<Constant "EZMode: TimeOut">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
// 1667     }
// 1668     if ( pStr )
??zclSampleLight_EZModeCB_7:
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleLight_EZModeCB_5
// 1669     {
// 1670       if ( giLightScreenMode == LIGHT_MAINMODE )
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_EZModeCB_5
// 1671       {
// 1672         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1673       }
// 1674     }
// 1675 #endif
// 1676     // show main UI screen 3 seconds after binding
// 1677     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
??zclSampleLight_EZModeCB_5:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_bb8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1678   }
// 1679 }
??zclSampleLight_EZModeCB_1:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock27

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 8
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sSwHelp>`:
        DB "SW5: Help       "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW `??zclSampleLight_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIdentifyTimeChange::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_EZModeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_EZModeCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode">`:
        DB "EZMode"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: Success">`:
        DB "EZMode: Success"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: NoMatch">`:
        DB "EZMode: NoMatch"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: Cancel">`:
        DB "EZMode: Cancel"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: BadParm">`:
        DB "EZMode: BadParm"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: TimeOut">`:
        DB "EZMode: TimeOut"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        END
// 1680 #endif // ZCL_EZMODE
// 1681 
// 1682 /****************************************************************************
// 1683 ****************************************************************************/
// 1684 
// 1685 
// 
// 1 387 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//    56 bytes in segment XDATA_I
//    56 bytes in segment XDATA_ID
//   179 bytes in segment XDATA_ROM_C
//    16 bytes in segment XDATA_Z
// 
// 1 503 bytes of CODE  memory
//   171 bytes of CONST memory (+ 8 bytes shared)
//    72 bytes of XDATA memory
//
//Errors: none
//Warnings: none
